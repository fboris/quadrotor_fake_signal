
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 00 20 2d 6b 00 00 79 6b 00 00 79 6b 00 00     .P. -k..yk..yk..
      10:	79 6b 00 00 79 6b 00 00 79 6b 00 00 00 00 00 00     yk..yk..yk......
	...
      2c:	89 4c 00 00 79 6b 00 00 00 00 00 00 95 4d 00 00     .L..yk.......M..
      3c:	d1 4d 00 00 79 6b 00 00 79 6b 00 00 79 6b 00 00     .M..yk..yk..yk..
      4c:	79 6b 00 00 79 6b 00 00 79 6b 00 00 79 6b 00 00     yk..yk..yk..yk..
      5c:	79 6b 00 00 79 6b 00 00 79 6b 00 00 79 6b 00 00     yk..yk..yk..yk..
      6c:	79 6b 00 00 79 6b 00 00 79 6b 00 00 79 6b 00 00     yk..yk..yk..yk..
      7c:	79 6b 00 00 79 6b 00 00 79 6b 00 00 79 6b 00 00     yk..yk..yk..yk..
      8c:	79 6b 00 00 79 6b 00 00 79 6b 00 00 79 6b 00 00     yk..yk..yk..yk..
      9c:	79 6b 00 00 79 6b 00 00 79 6b 00 00 79 6b 00 00     yk..yk..yk..yk..
      ac:	79 6b 00 00 79 6b 00 00 79 6b 00 00 79 6b 00 00     yk..yk..yk..yk..
      bc:	79 6b 00 00 79 6b 00 00 79 6b 00 00 79 6b 00 00     yk..yk..yk..yk..
      cc:	79 6b 00 00 79 6b 00 00 e9 52 00 00 79 6b 00 00     yk..yk...R..yk..
      dc:	79 6b 00 00 79 6b 00 00 79 6b 00 00 79 6b 00 00     yk..yk..yk..yk..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     110:	f3ef 8409 	mrs	r4, PSP
     114:	4620      	mov	r0, r4
     116:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     128:	f3ef 8408 	mrs	r4, MSP
     12c:	4620      	mov	r0, r4
     12e:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b490      	push	{r4, r7}
     13e:	b082      	sub	sp, #8
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	f04f 0300 	mov.w	r3, #0
     146:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     148:	f3ef 8412 	mrs	r4, BASEPRI_MAX
     14c:	607c      	str	r4, [r7, #4]
  return(result);
     14e:	687b      	ldr	r3, [r7, #4]
}
     150:	4618      	mov	r0, r3
     152:	f107 0708 	add.w	r7, r7, #8
     156:	46bd      	mov	sp, r7
     158:	bc90      	pop	{r4, r7}
     15a:	4770      	bx	lr

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	f107 070c 	add.w	r7, r7, #12
     16e:	46bd      	mov	sp, r7
     170:	bc80      	pop	{r7}
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b490      	push	{r4, r7}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	f04f 0300 	mov.w	r3, #0
     17e:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     180:	f3ef 8410 	mrs	r4, PRIMASK
     184:	607c      	str	r4, [r7, #4]
  return(result);
     186:	687b      	ldr	r3, [r7, #4]
}
     188:	4618      	mov	r0, r3
     18a:	f107 0708 	add.w	r7, r7, #8
     18e:	46bd      	mov	sp, r7
     190:	bc90      	pop	{r4, r7}
     192:	4770      	bx	lr

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	f107 070c 	add.w	r7, r7, #12
     1a6:	46bd      	mov	sp, r7
     1a8:	bc80      	pop	{r7}
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b490      	push	{r4, r7}
     1ae:	b082      	sub	sp, #8
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	f04f 0300 	mov.w	r3, #0
     1b6:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b8:	f3ef 8413 	mrs	r4, FAULTMASK
     1bc:	607c      	str	r4, [r7, #4]
  return(result);
     1be:	687b      	ldr	r3, [r7, #4]
}
     1c0:	4618      	mov	r0, r3
     1c2:	f107 0708 	add.w	r7, r7, #8
     1c6:	46bd      	mov	sp, r7
     1c8:	bc90      	pop	{r4, r7}
     1ca:	4770      	bx	lr

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	f107 070c 	add.w	r7, r7, #12
     1de:	46bd      	mov	sp, r7
     1e0:	bc80      	pop	{r7}
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b490      	push	{r4, r7}
     1e6:	b082      	sub	sp, #8
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	f04f 0300 	mov.w	r3, #0
     1ee:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1f0:	f3ef 8414 	mrs	r4, CONTROL
     1f4:	607c      	str	r4, [r7, #4]
  return(result);
     1f6:	687b      	ldr	r3, [r7, #4]
}
     1f8:	4618      	mov	r0, r3
     1fa:	f107 0708 	add.w	r7, r7, #8
     1fe:	46bd      	mov	sp, r7
     200:	bc90      	pop	{r4, r7}
     202:	4770      	bx	lr

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	f107 070c 	add.w	r7, r7, #12
     216:	46bd      	mov	sp, r7
     218:	bc80      	pop	{r7}
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b490      	push	{r4, r7}
     21e:	b084      	sub	sp, #16
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	f04f 0300 	mov.w	r3, #0
     228:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	ba1c      	rev	r4, r3
     22e:	60fc      	str	r4, [r7, #12]
  return(result);
     230:	68fb      	ldr	r3, [r7, #12]
}
     232:	4618      	mov	r0, r3
     234:	f107 0710 	add.w	r7, r7, #16
     238:	46bd      	mov	sp, r7
     23a:	bc90      	pop	{r4, r7}
     23c:	4770      	bx	lr
     23e:	bf00      	nop

00000240 <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     240:	b490      	push	{r4, r7}
     242:	b084      	sub	sp, #16
     244:	af00      	add	r7, sp, #0
     246:	4603      	mov	r3, r0
     248:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     24a:	f04f 0300 	mov.w	r3, #0
     24e:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     250:	88fb      	ldrh	r3, [r7, #6]
     252:	ba5c      	rev16	r4, r3
     254:	60fc      	str	r4, [r7, #12]
  return(result);
     256:	68fb      	ldr	r3, [r7, #12]
}
     258:	4618      	mov	r0, r3
     25a:	f107 0710 	add.w	r7, r7, #16
     25e:	46bd      	mov	sp, r7
     260:	bc90      	pop	{r4, r7}
     262:	4770      	bx	lr

00000264 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     264:	b490      	push	{r4, r7}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	4603      	mov	r3, r0
     26c:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26e:	f04f 0300 	mov.w	r3, #0
     272:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     274:	88fb      	ldrh	r3, [r7, #6]
     276:	badc      	revsh	r4, r3
     278:	60fc      	str	r4, [r7, #12]
  return(result);
     27a:	68fb      	ldr	r3, [r7, #12]
}
     27c:	4618      	mov	r0, r3
     27e:	f107 0710 	add.w	r7, r7, #16
     282:	46bd      	mov	sp, r7
     284:	bc90      	pop	{r4, r7}
     286:	4770      	bx	lr

00000288 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     288:	b490      	push	{r4, r7}
     28a:	b084      	sub	sp, #16
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     290:	f04f 0300 	mov.w	r3, #0
     294:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     296:	687b      	ldr	r3, [r7, #4]
     298:	fa93 f4a3 	rbit	r4, r3
     29c:	60fc      	str	r4, [r7, #12]
   return(result);
     29e:	68fb      	ldr	r3, [r7, #12]
}
     2a0:	4618      	mov	r0, r3
     2a2:	f107 0710 	add.w	r7, r7, #16
     2a6:	46bd      	mov	sp, r7
     2a8:	bc90      	pop	{r4, r7}
     2aa:	4770      	bx	lr

000002ac <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2ac:	b490      	push	{r4, r7}
     2ae:	b084      	sub	sp, #16
     2b0:	af00      	add	r7, sp, #0
     2b2:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b4:	f04f 0300 	mov.w	r3, #0
     2b8:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2ba:	687b      	ldr	r3, [r7, #4]
     2bc:	e8d3 4f4f 	ldrexb	r4, [r3]
     2c0:	73fc      	strb	r4, [r7, #15]
   return(result);
     2c2:	7bfb      	ldrb	r3, [r7, #15]
}
     2c4:	4618      	mov	r0, r3
     2c6:	f107 0710 	add.w	r7, r7, #16
     2ca:	46bd      	mov	sp, r7
     2cc:	bc90      	pop	{r4, r7}
     2ce:	4770      	bx	lr

000002d0 <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2d0:	b490      	push	{r4, r7}
     2d2:	b084      	sub	sp, #16
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d8:	f04f 0300 	mov.w	r3, #0
     2dc:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	e8d3 4f5f 	ldrexh	r4, [r3]
     2e4:	81fc      	strh	r4, [r7, #14]
   return(result);
     2e6:	89fb      	ldrh	r3, [r7, #14]
}
     2e8:	4618      	mov	r0, r3
     2ea:	f107 0710 	add.w	r7, r7, #16
     2ee:	46bd      	mov	sp, r7
     2f0:	bc90      	pop	{r4, r7}
     2f2:	4770      	bx	lr

000002f4 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f4:	b490      	push	{r4, r7}
     2f6:	b084      	sub	sp, #16
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2fc:	f04f 0300 	mov.w	r3, #0
     300:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     302:	687b      	ldr	r3, [r7, #4]
     304:	e853 4f00 	ldrex	r4, [r3]
     308:	60fc      	str	r4, [r7, #12]
   return(result);
     30a:	68fb      	ldr	r3, [r7, #12]
}
     30c:	4618      	mov	r0, r3
     30e:	f107 0710 	add.w	r7, r7, #16
     312:	46bd      	mov	sp, r7
     314:	bc90      	pop	{r4, r7}
     316:	4770      	bx	lr

00000318 <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
     318:	b490      	push	{r4, r7}
     31a:	b084      	sub	sp, #16
     31c:	af00      	add	r7, sp, #0
     31e:	4603      	mov	r3, r0
     320:	6039      	str	r1, [r7, #0]
     322:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
     324:	f04f 0300 	mov.w	r3, #0
     328:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     32a:	683b      	ldr	r3, [r7, #0]
     32c:	79fa      	ldrb	r2, [r7, #7]
     32e:	e8c3 2f44 	strexb	r4, r2, [r3]
     332:	60fc      	str	r4, [r7, #12]
   return(result);
     334:	68fb      	ldr	r3, [r7, #12]
}
     336:	4618      	mov	r0, r3
     338:	f107 0710 	add.w	r7, r7, #16
     33c:	46bd      	mov	sp, r7
     33e:	bc90      	pop	{r4, r7}
     340:	4770      	bx	lr
     342:	bf00      	nop

00000344 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
     344:	b490      	push	{r4, r7}
     346:	b084      	sub	sp, #16
     348:	af00      	add	r7, sp, #0
     34a:	4603      	mov	r3, r0
     34c:	6039      	str	r1, [r7, #0]
     34e:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
     350:	f04f 0300 	mov.w	r3, #0
     354:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     356:	683b      	ldr	r3, [r7, #0]
     358:	88fa      	ldrh	r2, [r7, #6]
     35a:	e8c3 2f54 	strexh	r4, r2, [r3]
     35e:	60fc      	str	r4, [r7, #12]
   return(result);
     360:	68fb      	ldr	r3, [r7, #12]
}
     362:	4618      	mov	r0, r3
     364:	f107 0710 	add.w	r7, r7, #16
     368:	46bd      	mov	sp, r7
     36a:	bc90      	pop	{r4, r7}
     36c:	4770      	bx	lr
     36e:	bf00      	nop

00000370 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     370:	b490      	push	{r4, r7}
     372:	b084      	sub	sp, #16
     374:	af00      	add	r7, sp, #0
     376:	6078      	str	r0, [r7, #4]
     378:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     37a:	f04f 0300 	mov.w	r3, #0
     37e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     380:	683b      	ldr	r3, [r7, #0]
     382:	687a      	ldr	r2, [r7, #4]
     384:	e843 2400 	strex	r4, r2, [r3]
     388:	60fc      	str	r4, [r7, #12]
   return(result);
     38a:	68fb      	ldr	r3, [r7, #12]
}
     38c:	4618      	mov	r0, r3
     38e:	f107 0710 	add.w	r7, r7, #16
     392:	46bd      	mov	sp, r7
     394:	bc90      	pop	{r4, r7}
     396:	4770      	bx	lr

00000398 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     398:	b580      	push	{r7, lr}
     39a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     39c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3ac:	6812      	ldr	r2, [r2, #0]
     3ae:	f042 0201 	orr.w	r2, r2, #1
     3b2:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     3b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c4:	6859      	ldr	r1, [r3, #4]
     3c6:	f04f 0300 	mov.w	r3, #0
     3ca:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     3ce:	400b      	ands	r3, r1
     3d0:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     3d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3de:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3e2:	6812      	ldr	r2, [r2, #0]
     3e4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     3e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     3ec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     3ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3fe:	6812      	ldr	r2, [r2, #0]
     400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     404:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     40a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     40e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     412:	f2c4 0202 	movt	r2, #16386	; 0x4002
     416:	6852      	ldr	r2, [r2, #4]
     418:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     41c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     41e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     422:	f2c4 0302 	movt	r3, #16386	; 0x4002
     426:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     42a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     42c:	f000 f8ac 	bl	588 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     430:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     434:	f2ce 0300 	movt	r3, #57344	; 0xe000
     438:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     43c:	609a      	str	r2, [r3, #8]
#endif
}
     43e:	bd80      	pop	{r7, pc}

00000440 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     440:	b480      	push	{r7}
     442:	b085      	sub	sp, #20
     444:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     446:	f04f 0300 	mov.w	r3, #0
     44a:	60fb      	str	r3, [r7, #12]
     44c:	f04f 0300 	mov.w	r3, #0
     450:	60bb      	str	r3, [r7, #8]
     452:	f04f 0300 	mov.w	r3, #0
     456:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     45c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     460:	685b      	ldr	r3, [r3, #4]
     462:	f003 030c 	and.w	r3, r3, #12
     466:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     468:	68fb      	ldr	r3, [r7, #12]
     46a:	2b04      	cmp	r3, #4
     46c:	d00d      	beq.n	48a <SystemCoreClockUpdate+0x4a>
     46e:	2b08      	cmp	r3, #8
     470:	d015      	beq.n	49e <SystemCoreClockUpdate+0x5e>
     472:	2b00      	cmp	r3, #0
     474:	d15c      	bne.n	530 <_binary_test_romfs_bin_size+0x7d>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     476:	f240 0300 	movw	r3, #0
     47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     47e:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     482:	f2c0 027a 	movt	r2, #122	; 0x7a
     486:	601a      	str	r2, [r3, #0]
      break;
     488:	e05c      	b.n	544 <_binary_test_romfs_bin_size+0x91>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     48a:	f240 0300 	movw	r3, #0
     48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     492:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     496:	f2c0 027a 	movt	r2, #122	; 0x7a
     49a:	601a      	str	r2, [r3, #0]
      break;
     49c:	e052      	b.n	544 <_binary_test_romfs_bin_size+0x91>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     49e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4a6:	685b      	ldr	r3, [r3, #4]
     4a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     4ac:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     4ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4b6:	685b      	ldr	r3, [r3, #4]
     4b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     4bc:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     4be:	68bb      	ldr	r3, [r7, #8]
     4c0:	ea4f 4393 	mov.w	r3, r3, lsr #18
     4c4:	f103 0302 	add.w	r3, r3, #2
     4c8:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	2b00      	cmp	r3, #0
     4ce:	d10c      	bne.n	4ea <_binary_test_romfs_bin_size+0x37>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     4d0:	68ba      	ldr	r2, [r7, #8]
     4d2:	f44f 6310 	mov.w	r3, #2304	; 0x900
     4d6:	f2c0 033d 	movt	r3, #61	; 0x3d
     4da:	fb03 f202 	mul.w	r2, r3, r2
     4de:	f240 0300 	movw	r3, #0
     4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4e6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4e8:	e02c      	b.n	544 <_binary_test_romfs_bin_size+0x91>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     4ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4f2:	685b      	ldr	r3, [r3, #4]
     4f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     4f8:	2b00      	cmp	r3, #0
     4fa:	d00c      	beq.n	516 <_binary_test_romfs_bin_size+0x63>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     4fc:	68ba      	ldr	r2, [r7, #8]
     4fe:	f44f 6310 	mov.w	r3, #2304	; 0x900
     502:	f2c0 033d 	movt	r3, #61	; 0x3d
     506:	fb03 f202 	mul.w	r2, r3, r2
     50a:	f240 0300 	movw	r3, #0
     50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     512:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     514:	e016      	b.n	544 <_binary_test_romfs_bin_size+0x91>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     516:	68ba      	ldr	r2, [r7, #8]
     518:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     51c:	f2c0 037a 	movt	r3, #122	; 0x7a
     520:	fb03 f202 	mul.w	r2, r3, r2
     524:	f240 0300 	movw	r3, #0
     528:	f2c2 0300 	movt	r3, #8192	; 0x2000
     52c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     52e:	e009      	b.n	544 <_binary_test_romfs_bin_size+0x91>

    default:
      SystemCoreClock = HSI_VALUE;
     530:	f240 0300 	movw	r3, #0
     534:	f2c2 0300 	movt	r3, #8192	; 0x2000
     538:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     53c:	f2c0 027a 	movt	r2, #122	; 0x7a
     540:	601a      	str	r2, [r3, #0]
      break;
     542:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     548:	f2c4 0302 	movt	r3, #16386	; 0x4002
     54c:	685b      	ldr	r3, [r3, #4]
     54e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     552:	ea4f 1213 	mov.w	r2, r3, lsr #4
     556:	f240 0304 	movw	r3, #4
     55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     55e:	5c9b      	ldrb	r3, [r3, r2]
     560:	b2db      	uxtb	r3, r3
     562:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     564:	f240 0300 	movw	r3, #0
     568:	f2c2 0300 	movt	r3, #8192	; 0x2000
     56c:	681a      	ldr	r2, [r3, #0]
     56e:	68fb      	ldr	r3, [r7, #12]
     570:	fa22 f203 	lsr.w	r2, r2, r3
     574:	f240 0300 	movw	r3, #0
     578:	f2c2 0300 	movt	r3, #8192	; 0x2000
     57c:	601a      	str	r2, [r3, #0]
}
     57e:	f107 0714 	add.w	r7, r7, #20
     582:	46bd      	mov	sp, r7
     584:	bc80      	pop	{r7}
     586:	4770      	bx	lr

00000588 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     588:	b580      	push	{r7, lr}
     58a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     58c:	f000 f802 	bl	594 <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     590:	bd80      	pop	{r7, pc}
     592:	bf00      	nop

00000594 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     594:	b480      	push	{r7}
     596:	b083      	sub	sp, #12
     598:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     59a:	f04f 0300 	mov.w	r3, #0
     59e:	607b      	str	r3, [r7, #4]
     5a0:	f04f 0300 	mov.w	r3, #0
     5a4:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     5a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5b6:	6812      	ldr	r2, [r2, #0]
     5b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     5bc:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     5be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5cc:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	f103 0301 	add.w	r3, r3, #1
     5d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     5d6:	683b      	ldr	r3, [r7, #0]
     5d8:	2b00      	cmp	r3, #0
     5da:	d103      	bne.n	5e4 <SetSysClockTo72+0x50>
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     5e2:	d1ec      	bne.n	5be <SetSysClockTo72+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     5e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ec:	681b      	ldr	r3, [r3, #0]
     5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5f2:	2b00      	cmp	r3, #0
     5f4:	d003      	beq.n	5fe <SetSysClockTo72+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
     5f6:	f04f 0301 	mov.w	r3, #1
     5fa:	603b      	str	r3, [r7, #0]
     5fc:	e002      	b.n	604 <SetSysClockTo72+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     5fe:	f04f 0300 	mov.w	r3, #0
     602:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     604:	683b      	ldr	r3, [r7, #0]
     606:	2b01      	cmp	r3, #1
     608:	f040 8094 	bne.w	734 <SetSysClockTo72+0x1a0>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     60c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     610:	f2c4 0302 	movt	r3, #16386	; 0x4002
     614:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     618:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61c:	6812      	ldr	r2, [r2, #0]
     61e:	f042 0210 	orr.w	r2, r2, #16
     622:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     628:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     630:	f2c4 0202 	movt	r2, #16386	; 0x4002
     634:	6812      	ldr	r2, [r2, #0]
     636:	f022 0203 	bic.w	r2, r2, #3
     63a:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     63c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     640:	f2c4 0302 	movt	r3, #16386	; 0x4002
     644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     648:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64c:	6812      	ldr	r2, [r2, #0]
     64e:	f042 0202 	orr.w	r2, r2, #2
     652:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     658:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     660:	f2c4 0202 	movt	r2, #16386	; 0x4002
     664:	6852      	ldr	r2, [r2, #4]
     666:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     66c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     674:	f2c4 0202 	movt	r2, #16386	; 0x4002
     678:	6852      	ldr	r2, [r2, #4]
     67a:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     67c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     680:	f2c4 0302 	movt	r3, #16386	; 0x4002
     684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     688:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68c:	6852      	ldr	r2, [r2, #4]
     68e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     692:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     698:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a4:	6852      	ldr	r2, [r2, #4]
     6a6:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     6aa:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     6ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6bc:	6852      	ldr	r2, [r2, #4]
     6be:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     6c2:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     6c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6d4:	6812      	ldr	r2, [r2, #0]
     6d6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     6da:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     6dc:	bf00      	nop
     6de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     6ec:	2b00      	cmp	r3, #0
     6ee:	d0f6      	beq.n	6de <SetSysClockTo72+0x14a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     6f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     700:	6852      	ldr	r2, [r2, #4]
     702:	f022 0203 	bic.w	r2, r2, #3
     706:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     70c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     714:	f2c4 0202 	movt	r2, #16386	; 0x4002
     718:	6852      	ldr	r2, [r2, #4]
     71a:	f042 0202 	orr.w	r2, r2, #2
     71e:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     720:	bf00      	nop
     722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     726:	f2c4 0302 	movt	r3, #16386	; 0x4002
     72a:	685b      	ldr	r3, [r3, #4]
     72c:	f003 030c 	and.w	r3, r3, #12
     730:	2b08      	cmp	r3, #8
     732:	d1f6      	bne.n	722 <SetSysClockTo72+0x18e>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     734:	f107 070c 	add.w	r7, r7, #12
     738:	46bd      	mov	sp, r7
     73a:	bc80      	pop	{r7}
     73c:	4770      	bx	lr
     73e:	bf00      	nop
     740:	0000718b 	.word	0x0000718b
     744:	20000000 	.word	0x20000000
     748:	20000038 	.word	0x20000038
     74c:	20000040 	.word	0x20000040
     750:	20004a50 	.word	0x20004a50

00000754 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     754:	b480      	push	{r7}
     756:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     75c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     760:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     764:	f2c4 0202 	movt	r2, #16386	; 0x4002
     768:	6812      	ldr	r2, [r2, #0]
     76a:	f042 0201 	orr.w	r2, r2, #1
     76e:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     774:	f2c4 0202 	movt	r2, #16386	; 0x4002
     778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     77c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     780:	6859      	ldr	r1, [r3, #4]
     782:	f04f 0300 	mov.w	r3, #0
     786:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     78a:	400b      	ands	r3, r1
     78c:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     78e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     792:	f2c4 0302 	movt	r3, #16386	; 0x4002
     796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     79a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     79e:	6812      	ldr	r2, [r2, #0]
     7a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     7a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     7a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     7aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ba:	6812      	ldr	r2, [r2, #0]
     7bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7c0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     7c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d2:	6852      	ldr	r2, [r2, #4]
     7d4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     7d8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     7da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7de:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     7e6:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     7e8:	46bd      	mov	sp, r7
     7ea:	bc80      	pop	{r7}
     7ec:	4770      	bx	lr
     7ee:	bf00      	nop

000007f0 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     7f0:	b480      	push	{r7}
     7f2:	b083      	sub	sp, #12
     7f4:	af00      	add	r7, sp, #0
     7f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     7f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     800:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     804:	f2c4 0202 	movt	r2, #16386	; 0x4002
     808:	6812      	ldr	r2, [r2, #0]
     80a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     80e:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     814:	f2c4 0302 	movt	r3, #16386	; 0x4002
     818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     81c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     820:	6812      	ldr	r2, [r2, #0]
     822:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     826:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     828:	687b      	ldr	r3, [r7, #4]
     82a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     82e:	d003      	beq.n	838 <RCC_HSEConfig+0x48>
     830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     834:	d00d      	beq.n	852 <RCC_HSEConfig+0x62>
     836:	e019      	b.n	86c <RCC_HSEConfig+0x7c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     83c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     844:	f2c4 0202 	movt	r2, #16386	; 0x4002
     848:	6812      	ldr	r2, [r2, #0]
     84a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     84e:	601a      	str	r2, [r3, #0]
      break;
     850:	e00d      	b.n	86e <RCC_HSEConfig+0x7e>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     856:	f2c4 0302 	movt	r3, #16386	; 0x4002
     85a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     85e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     862:	6812      	ldr	r2, [r2, #0]
     864:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     868:	601a      	str	r2, [r3, #0]
      break;
     86a:	e000      	b.n	86e <RCC_HSEConfig+0x7e>

    default:
      break;
     86c:	bf00      	nop
  }
}
     86e:	f107 070c 	add.w	r7, r7, #12
     872:	46bd      	mov	sp, r7
     874:	bc80      	pop	{r7}
     876:	4770      	bx	lr

00000878 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     878:	b580      	push	{r7, lr}
     87a:	b082      	sub	sp, #8
     87c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     87e:	f04f 0300 	mov.w	r3, #0
     882:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     884:	f04f 0300 	mov.w	r3, #0
     888:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     88a:	f04f 0300 	mov.w	r3, #0
     88e:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     890:	f04f 0031 	mov.w	r0, #49	; 0x31
     894:	f000 fbce 	bl	1034 <RCC_GetFlagStatus>
     898:	4603      	mov	r3, r0
     89a:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     89c:	683b      	ldr	r3, [r7, #0]
     89e:	f103 0301 	add.w	r3, r3, #1
     8a2:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     8a4:	683b      	ldr	r3, [r7, #0]
     8a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     8aa:	d002      	beq.n	8b2 <RCC_WaitForHSEStartUp+0x3a>
     8ac:	79bb      	ldrb	r3, [r7, #6]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d0ee      	beq.n	890 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     8b2:	f04f 0031 	mov.w	r0, #49	; 0x31
     8b6:	f000 fbbd 	bl	1034 <RCC_GetFlagStatus>
     8ba:	4603      	mov	r3, r0
     8bc:	2b00      	cmp	r3, #0
     8be:	d003      	beq.n	8c8 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
     8c0:	f04f 0301 	mov.w	r3, #1
     8c4:	71fb      	strb	r3, [r7, #7]
     8c6:	e002      	b.n	8ce <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
     8c8:	f04f 0300 	mov.w	r3, #0
     8cc:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     8ce:	79fb      	ldrb	r3, [r7, #7]
}
     8d0:	4618      	mov	r0, r3
     8d2:	f107 0708 	add.w	r7, r7, #8
     8d6:	46bd      	mov	sp, r7
     8d8:	bd80      	pop	{r7, pc}
     8da:	bf00      	nop

000008dc <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     8dc:	b480      	push	{r7}
     8de:	b085      	sub	sp, #20
     8e0:	af00      	add	r7, sp, #0
     8e2:	4603      	mov	r3, r0
     8e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     8e6:	f04f 0300 	mov.w	r3, #0
     8ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     8ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8f4:	681b      	ldr	r3, [r3, #0]
     8f6:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     8f8:	68fb      	ldr	r3, [r7, #12]
     8fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     8fe:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     900:	79fb      	ldrb	r3, [r7, #7]
     902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     906:	68fa      	ldr	r2, [r7, #12]
     908:	4313      	orrs	r3, r2
     90a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     90c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     910:	f2c4 0302 	movt	r3, #16386	; 0x4002
     914:	68fa      	ldr	r2, [r7, #12]
     916:	601a      	str	r2, [r3, #0]
}
     918:	f107 0714 	add.w	r7, r7, #20
     91c:	46bd      	mov	sp, r7
     91e:	bc80      	pop	{r7}
     920:	4770      	bx	lr
     922:	bf00      	nop

00000924 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     924:	b480      	push	{r7}
     926:	b083      	sub	sp, #12
     928:	af00      	add	r7, sp, #0
     92a:	4603      	mov	r3, r0
     92c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     92e:	f04f 0300 	mov.w	r3, #0
     932:	f2c4 2342 	movt	r3, #16962	; 0x4242
     936:	79fa      	ldrb	r2, [r7, #7]
     938:	601a      	str	r2, [r3, #0]
}
     93a:	f107 070c 	add.w	r7, r7, #12
     93e:	46bd      	mov	sp, r7
     940:	bc80      	pop	{r7}
     942:	4770      	bx	lr

00000944 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     944:	b480      	push	{r7}
     946:	b085      	sub	sp, #20
     948:	af00      	add	r7, sp, #0
     94a:	6078      	str	r0, [r7, #4]
     94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     94e:	f04f 0300 	mov.w	r3, #0
     952:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     958:	f2c4 0302 	movt	r3, #16386	; 0x4002
     95c:	685b      	ldr	r3, [r3, #4]
     95e:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     960:	68fb      	ldr	r3, [r7, #12]
     962:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     966:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     968:	687a      	ldr	r2, [r7, #4]
     96a:	683b      	ldr	r3, [r7, #0]
     96c:	4313      	orrs	r3, r2
     96e:	68fa      	ldr	r2, [r7, #12]
     970:	4313      	orrs	r3, r2
     972:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     978:	f2c4 0302 	movt	r3, #16386	; 0x4002
     97c:	68fa      	ldr	r2, [r7, #12]
     97e:	605a      	str	r2, [r3, #4]
}
     980:	f107 0714 	add.w	r7, r7, #20
     984:	46bd      	mov	sp, r7
     986:	bc80      	pop	{r7}
     988:	4770      	bx	lr
     98a:	bf00      	nop

0000098c <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     98c:	b480      	push	{r7}
     98e:	b083      	sub	sp, #12
     990:	af00      	add	r7, sp, #0
     992:	4603      	mov	r3, r0
     994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     996:	f04f 0360 	mov.w	r3, #96	; 0x60
     99a:	f2c4 2342 	movt	r3, #16962	; 0x4242
     99e:	79fa      	ldrb	r2, [r7, #7]
     9a0:	601a      	str	r2, [r3, #0]
}
     9a2:	f107 070c 	add.w	r7, r7, #12
     9a6:	46bd      	mov	sp, r7
     9a8:	bc80      	pop	{r7}
     9aa:	4770      	bx	lr

000009ac <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     9ac:	b480      	push	{r7}
     9ae:	b085      	sub	sp, #20
     9b0:	af00      	add	r7, sp, #0
     9b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9b4:	f04f 0300 	mov.w	r3, #0
     9b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     9ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9be:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9c2:	685b      	ldr	r3, [r3, #4]
     9c4:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	f023 0303 	bic.w	r3, r3, #3
     9cc:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     9ce:	68fa      	ldr	r2, [r7, #12]
     9d0:	687b      	ldr	r3, [r7, #4]
     9d2:	4313      	orrs	r3, r2
     9d4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9da:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9de:	68fa      	ldr	r2, [r7, #12]
     9e0:	605a      	str	r2, [r3, #4]
}
     9e2:	f107 0714 	add.w	r7, r7, #20
     9e6:	46bd      	mov	sp, r7
     9e8:	bc80      	pop	{r7}
     9ea:	4770      	bx	lr

000009ec <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     9ec:	b480      	push	{r7}
     9ee:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     9f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9f8:	685b      	ldr	r3, [r3, #4]
     9fa:	b2db      	uxtb	r3, r3
     9fc:	f003 030c 	and.w	r3, r3, #12
     a00:	b2db      	uxtb	r3, r3
}
     a02:	4618      	mov	r0, r3
     a04:	46bd      	mov	sp, r7
     a06:	bc80      	pop	{r7}
     a08:	4770      	bx	lr
     a0a:	bf00      	nop

00000a0c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     a0c:	b480      	push	{r7}
     a0e:	b085      	sub	sp, #20
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a14:	f04f 0300 	mov.w	r3, #0
     a18:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a22:	685b      	ldr	r3, [r3, #4]
     a24:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     a26:	68fb      	ldr	r3, [r7, #12]
     a28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     a2c:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	4313      	orrs	r3, r2
     a34:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a3e:	68fa      	ldr	r2, [r7, #12]
     a40:	605a      	str	r2, [r3, #4]
}
     a42:	f107 0714 	add.w	r7, r7, #20
     a46:	46bd      	mov	sp, r7
     a48:	bc80      	pop	{r7}
     a4a:	4770      	bx	lr

00000a4c <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     a4c:	b480      	push	{r7}
     a4e:	b085      	sub	sp, #20
     a50:	af00      	add	r7, sp, #0
     a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a54:	f04f 0300 	mov.w	r3, #0
     a58:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a62:	685b      	ldr	r3, [r3, #4]
     a64:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     a6c:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     a6e:	68fa      	ldr	r2, [r7, #12]
     a70:	687b      	ldr	r3, [r7, #4]
     a72:	4313      	orrs	r3, r2
     a74:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a7e:	68fa      	ldr	r2, [r7, #12]
     a80:	605a      	str	r2, [r3, #4]
}
     a82:	f107 0714 	add.w	r7, r7, #20
     a86:	46bd      	mov	sp, r7
     a88:	bc80      	pop	{r7}
     a8a:	4770      	bx	lr

00000a8c <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     a8c:	b480      	push	{r7}
     a8e:	b085      	sub	sp, #20
     a90:	af00      	add	r7, sp, #0
     a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a94:	f04f 0300 	mov.w	r3, #0
     a98:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     aa2:	685b      	ldr	r3, [r3, #4]
     aa4:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     aa6:	68fb      	ldr	r3, [r7, #12]
     aa8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     aac:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     ab4:	68fa      	ldr	r2, [r7, #12]
     ab6:	4313      	orrs	r3, r2
     ab8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     abe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac2:	68fa      	ldr	r2, [r7, #12]
     ac4:	605a      	str	r2, [r3, #4]
}
     ac6:	f107 0714 	add.w	r7, r7, #20
     aca:	46bd      	mov	sp, r7
     acc:	bc80      	pop	{r7}
     ace:	4770      	bx	lr

00000ad0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     ad0:	b480      	push	{r7}
     ad2:	b083      	sub	sp, #12
     ad4:	af00      	add	r7, sp, #0
     ad6:	4602      	mov	r2, r0
     ad8:	460b      	mov	r3, r1
     ada:	71fa      	strb	r2, [r7, #7]
     adc:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ade:	79bb      	ldrb	r3, [r7, #6]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d00e      	beq.n	b02 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     ae4:	f241 0309 	movw	r3, #4105	; 0x1009
     ae8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     aec:	f241 0209 	movw	r2, #4105	; 0x1009
     af0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     af4:	7812      	ldrb	r2, [r2, #0]
     af6:	b2d1      	uxtb	r1, r2
     af8:	79fa      	ldrb	r2, [r7, #7]
     afa:	430a      	orrs	r2, r1
     afc:	b2d2      	uxtb	r2, r2
     afe:	701a      	strb	r2, [r3, #0]
     b00:	e010      	b.n	b24 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     b02:	f241 0309 	movw	r3, #4105	; 0x1009
     b06:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b0a:	f241 0209 	movw	r2, #4105	; 0x1009
     b0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b12:	7812      	ldrb	r2, [r2, #0]
     b14:	b2d1      	uxtb	r1, r2
     b16:	79fa      	ldrb	r2, [r7, #7]
     b18:	ea6f 0202 	mvn.w	r2, r2
     b1c:	b2d2      	uxtb	r2, r2
     b1e:	400a      	ands	r2, r1
     b20:	b2d2      	uxtb	r2, r2
     b22:	701a      	strb	r2, [r3, #0]
  }
}
     b24:	f107 070c 	add.w	r7, r7, #12
     b28:	46bd      	mov	sp, r7
     b2a:	bc80      	pop	{r7}
     b2c:	4770      	bx	lr
     b2e:	bf00      	nop

00000b30 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     b30:	b480      	push	{r7}
     b32:	b083      	sub	sp, #12
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     b38:	f04f 03d8 	mov.w	r3, #216	; 0xd8
     b3c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b40:	687a      	ldr	r2, [r7, #4]
     b42:	601a      	str	r2, [r3, #0]
}
     b44:	f107 070c 	add.w	r7, r7, #12
     b48:	46bd      	mov	sp, r7
     b4a:	bc80      	pop	{r7}
     b4c:	4770      	bx	lr
     b4e:	bf00      	nop

00000b50 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     b50:	b480      	push	{r7}
     b52:	b085      	sub	sp, #20
     b54:	af00      	add	r7, sp, #0
     b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     b58:	f04f 0300 	mov.w	r3, #0
     b5c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b62:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b66:	685b      	ldr	r3, [r3, #4]
     b68:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     b6a:	68fb      	ldr	r3, [r7, #12]
     b6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     b70:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     b72:	68fa      	ldr	r2, [r7, #12]
     b74:	687b      	ldr	r3, [r7, #4]
     b76:	4313      	orrs	r3, r2
     b78:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b82:	68fa      	ldr	r2, [r7, #12]
     b84:	605a      	str	r2, [r3, #4]
}
     b86:	f107 0714 	add.w	r7, r7, #20
     b8a:	46bd      	mov	sp, r7
     b8c:	bc80      	pop	{r7}
     b8e:	4770      	bx	lr

00000b90 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     b90:	b480      	push	{r7}
     b92:	b083      	sub	sp, #12
     b94:	af00      	add	r7, sp, #0
     b96:	4603      	mov	r3, r0
     b98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b9a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ba2:	f04f 0200 	mov.w	r2, #0
     ba6:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     ba8:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     bac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bb0:	f04f 0200 	mov.w	r2, #0
     bb4:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     bb6:	79fb      	ldrb	r3, [r7, #7]
     bb8:	2b01      	cmp	r3, #1
     bba:	d002      	beq.n	bc2 <RCC_LSEConfig+0x32>
     bbc:	2b04      	cmp	r3, #4
     bbe:	d008      	beq.n	bd2 <RCC_LSEConfig+0x42>
     bc0:	e00f      	b.n	be2 <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     bc2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     bc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bca:	f04f 0201 	mov.w	r2, #1
     bce:	701a      	strb	r2, [r3, #0]
      break;
     bd0:	e008      	b.n	be4 <RCC_LSEConfig+0x54>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     bd2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     bd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bda:	f04f 0205 	mov.w	r2, #5
     bde:	701a      	strb	r2, [r3, #0]
      break;
     be0:	e000      	b.n	be4 <RCC_LSEConfig+0x54>

    default:
      break;
     be2:	bf00      	nop
  }
}
     be4:	f107 070c 	add.w	r7, r7, #12
     be8:	46bd      	mov	sp, r7
     bea:	bc80      	pop	{r7}
     bec:	4770      	bx	lr
     bee:	bf00      	nop

00000bf0 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     bf0:	b480      	push	{r7}
     bf2:	b083      	sub	sp, #12
     bf4:	af00      	add	r7, sp, #0
     bf6:	4603      	mov	r3, r0
     bf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     bfa:	f44f 6390 	mov.w	r3, #1152	; 0x480
     bfe:	f2c4 2342 	movt	r3, #16962	; 0x4242
     c02:	79fa      	ldrb	r2, [r7, #7]
     c04:	601a      	str	r2, [r3, #0]
}
     c06:	f107 070c 	add.w	r7, r7, #12
     c0a:	46bd      	mov	sp, r7
     c0c:	bc80      	pop	{r7}
     c0e:	4770      	bx	lr

00000c10 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     c10:	b480      	push	{r7}
     c12:	b083      	sub	sp, #12
     c14:	af00      	add	r7, sp, #0
     c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     c24:	f2c4 0202 	movt	r2, #16386	; 0x4002
     c28:	6a11      	ldr	r1, [r2, #32]
     c2a:	687a      	ldr	r2, [r7, #4]
     c2c:	430a      	orrs	r2, r1
     c2e:	621a      	str	r2, [r3, #32]
}
     c30:	f107 070c 	add.w	r7, r7, #12
     c34:	46bd      	mov	sp, r7
     c36:	bc80      	pop	{r7}
     c38:	4770      	bx	lr
     c3a:	bf00      	nop

00000c3c <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     c3c:	b480      	push	{r7}
     c3e:	b083      	sub	sp, #12
     c40:	af00      	add	r7, sp, #0
     c42:	4603      	mov	r3, r0
     c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     c46:	f240 433c 	movw	r3, #1084	; 0x43c
     c4a:	f2c4 2342 	movt	r3, #16962	; 0x4242
     c4e:	79fa      	ldrb	r2, [r7, #7]
     c50:	601a      	str	r2, [r3, #0]
}
     c52:	f107 070c 	add.w	r7, r7, #12
     c56:	46bd      	mov	sp, r7
     c58:	bc80      	pop	{r7}
     c5a:	4770      	bx	lr

00000c5c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     c5c:	b480      	push	{r7}
     c5e:	b087      	sub	sp, #28
     c60:	af00      	add	r7, sp, #0
     c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     c64:	f04f 0300 	mov.w	r3, #0
     c68:	617b      	str	r3, [r7, #20]
     c6a:	f04f 0300 	mov.w	r3, #0
     c6e:	613b      	str	r3, [r7, #16]
     c70:	f04f 0300 	mov.w	r3, #0
     c74:	60fb      	str	r3, [r7, #12]
     c76:	f04f 0300 	mov.w	r3, #0
     c7a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c80:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c84:	685b      	ldr	r3, [r3, #4]
     c86:	f003 030c 	and.w	r3, r3, #12
     c8a:	617b      	str	r3, [r7, #20]

  switch (tmp)
     c8c:	697b      	ldr	r3, [r7, #20]
     c8e:	2b04      	cmp	r3, #4
     c90:	d00a      	beq.n	ca8 <RCC_GetClocksFreq+0x4c>
     c92:	2b08      	cmp	r3, #8
     c94:	d00f      	beq.n	cb6 <RCC_GetClocksFreq+0x5a>
     c96:	2b00      	cmp	r3, #0
     c98:	d14d      	bne.n	d36 <RCC_GetClocksFreq+0xda>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c9a:	687a      	ldr	r2, [r7, #4]
     c9c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     ca0:	f2c0 037a 	movt	r3, #122	; 0x7a
     ca4:	6013      	str	r3, [r2, #0]
      break;
     ca6:	e04d      	b.n	d44 <RCC_GetClocksFreq+0xe8>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     ca8:	687a      	ldr	r2, [r7, #4]
     caa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     cae:	f2c0 037a 	movt	r3, #122	; 0x7a
     cb2:	6013      	str	r3, [r2, #0]
      break;
     cb4:	e046      	b.n	d44 <RCC_GetClocksFreq+0xe8>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cba:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cbe:	685b      	ldr	r3, [r3, #4]
     cc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     cc4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     cd4:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     cd6:	693b      	ldr	r3, [r7, #16]
     cd8:	ea4f 4393 	mov.w	r3, r3, lsr #18
     cdc:	f103 0302 	add.w	r3, r3, #2
     ce0:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	2b00      	cmp	r3, #0
     ce6:	d109      	bne.n	cfc <RCC_GetClocksFreq+0xa0>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     ce8:	693a      	ldr	r2, [r7, #16]
     cea:	f44f 6310 	mov.w	r3, #2304	; 0x900
     cee:	f2c0 033d 	movt	r3, #61	; 0x3d
     cf2:	fb03 f202 	mul.w	r2, r3, r2
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     cfa:	e023      	b.n	d44 <RCC_GetClocksFreq+0xe8>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d00:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d04:	685b      	ldr	r3, [r3, #4]
     d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     d0a:	2b00      	cmp	r3, #0
     d0c:	d009      	beq.n	d22 <RCC_GetClocksFreq+0xc6>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     d0e:	693a      	ldr	r2, [r7, #16]
     d10:	f44f 6310 	mov.w	r3, #2304	; 0x900
     d14:	f2c0 033d 	movt	r3, #61	; 0x3d
     d18:	fb03 f202 	mul.w	r2, r3, r2
     d1c:	687b      	ldr	r3, [r7, #4]
     d1e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     d20:	e010      	b.n	d44 <RCC_GetClocksFreq+0xe8>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     d22:	693a      	ldr	r2, [r7, #16]
     d24:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     d28:	f2c0 037a 	movt	r3, #122	; 0x7a
     d2c:	fb03 f202 	mul.w	r2, r3, r2
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     d34:	e006      	b.n	d44 <RCC_GetClocksFreq+0xe8>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     d36:	687a      	ldr	r2, [r7, #4]
     d38:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     d3c:	f2c0 037a 	movt	r3, #122	; 0x7a
     d40:	6013      	str	r3, [r2, #0]
      break;
     d42:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d48:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d4c:	685b      	ldr	r3, [r3, #4]
     d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     d52:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     d54:	697b      	ldr	r3, [r7, #20]
     d56:	ea4f 1313 	mov.w	r3, r3, lsr #4
     d5a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d5c:	f240 0314 	movw	r3, #20
     d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d64:	697a      	ldr	r2, [r7, #20]
     d66:	189b      	adds	r3, r3, r2
     d68:	781b      	ldrb	r3, [r3, #0]
     d6a:	b2db      	uxtb	r3, r3
     d6c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	681a      	ldr	r2, [r3, #0]
     d72:	68bb      	ldr	r3, [r7, #8]
     d74:	fa22 f203 	lsr.w	r2, r2, r3
     d78:	687b      	ldr	r3, [r7, #4]
     d7a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d80:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d84:	685b      	ldr	r3, [r3, #4]
     d86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     d8a:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     d8c:	697b      	ldr	r3, [r7, #20]
     d8e:	ea4f 2313 	mov.w	r3, r3, lsr #8
     d92:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d94:	f240 0314 	movw	r3, #20
     d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d9c:	697a      	ldr	r2, [r7, #20]
     d9e:	189b      	adds	r3, r3, r2
     da0:	781b      	ldrb	r3, [r3, #0]
     da2:	b2db      	uxtb	r3, r3
     da4:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	685a      	ldr	r2, [r3, #4]
     daa:	68bb      	ldr	r3, [r7, #8]
     dac:	fa22 f203 	lsr.w	r2, r2, r3
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     db8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dbc:	685b      	ldr	r3, [r3, #4]
     dbe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     dc2:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     dc4:	697b      	ldr	r3, [r7, #20]
     dc6:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     dca:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     dcc:	f240 0314 	movw	r3, #20
     dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     dd4:	697a      	ldr	r2, [r7, #20]
     dd6:	189b      	adds	r3, r3, r2
     dd8:	781b      	ldrb	r3, [r3, #0]
     dda:	b2db      	uxtb	r3, r3
     ddc:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	685a      	ldr	r2, [r3, #4]
     de2:	68bb      	ldr	r3, [r7, #8]
     de4:	fa22 f203 	lsr.w	r2, r2, r3
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	685b      	ldr	r3, [r3, #4]
     df6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     dfa:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     dfc:	697b      	ldr	r3, [r7, #20]
     dfe:	ea4f 3393 	mov.w	r3, r3, lsr #14
     e02:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     e04:	f240 0324 	movw	r3, #36	; 0x24
     e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e0c:	697a      	ldr	r2, [r7, #20]
     e0e:	189b      	adds	r3, r3, r2
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	b2db      	uxtb	r3, r3
     e14:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	68da      	ldr	r2, [r3, #12]
     e1a:	68bb      	ldr	r3, [r7, #8]
     e1c:	fbb2 f2f3 	udiv	r2, r2, r3
     e20:	687b      	ldr	r3, [r7, #4]
     e22:	611a      	str	r2, [r3, #16]
}
     e24:	f107 071c 	add.w	r7, r7, #28
     e28:	46bd      	mov	sp, r7
     e2a:	bc80      	pop	{r7}
     e2c:	4770      	bx	lr
     e2e:	bf00      	nop

00000e30 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     e30:	b480      	push	{r7}
     e32:	b083      	sub	sp, #12
     e34:	af00      	add	r7, sp, #0
     e36:	6078      	str	r0, [r7, #4]
     e38:	460b      	mov	r3, r1
     e3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     e3c:	78fb      	ldrb	r3, [r7, #3]
     e3e:	2b00      	cmp	r3, #0
     e40:	d00c      	beq.n	e5c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e46:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e52:	6951      	ldr	r1, [r2, #20]
     e54:	687a      	ldr	r2, [r7, #4]
     e56:	430a      	orrs	r2, r1
     e58:	615a      	str	r2, [r3, #20]
     e5a:	e00d      	b.n	e78 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e60:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e68:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e6c:	6951      	ldr	r1, [r2, #20]
     e6e:	687a      	ldr	r2, [r7, #4]
     e70:	ea6f 0202 	mvn.w	r2, r2
     e74:	400a      	ands	r2, r1
     e76:	615a      	str	r2, [r3, #20]
  }
}
     e78:	f107 070c 	add.w	r7, r7, #12
     e7c:	46bd      	mov	sp, r7
     e7e:	bc80      	pop	{r7}
     e80:	4770      	bx	lr
     e82:	bf00      	nop

00000e84 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e84:	b480      	push	{r7}
     e86:	b083      	sub	sp, #12
     e88:	af00      	add	r7, sp, #0
     e8a:	6078      	str	r0, [r7, #4]
     e8c:	460b      	mov	r3, r1
     e8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e90:	78fb      	ldrb	r3, [r7, #3]
     e92:	2b00      	cmp	r3, #0
     e94:	d00c      	beq.n	eb0 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ea2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ea6:	6991      	ldr	r1, [r2, #24]
     ea8:	687a      	ldr	r2, [r7, #4]
     eaa:	430a      	orrs	r2, r1
     eac:	619a      	str	r2, [r3, #24]
     eae:	e00d      	b.n	ecc <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     eb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ebc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ec0:	6991      	ldr	r1, [r2, #24]
     ec2:	687a      	ldr	r2, [r7, #4]
     ec4:	ea6f 0202 	mvn.w	r2, r2
     ec8:	400a      	ands	r2, r1
     eca:	619a      	str	r2, [r3, #24]
  }
}
     ecc:	f107 070c 	add.w	r7, r7, #12
     ed0:	46bd      	mov	sp, r7
     ed2:	bc80      	pop	{r7}
     ed4:	4770      	bx	lr
     ed6:	bf00      	nop

00000ed8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     ed8:	b480      	push	{r7}
     eda:	b083      	sub	sp, #12
     edc:	af00      	add	r7, sp, #0
     ede:	6078      	str	r0, [r7, #4]
     ee0:	460b      	mov	r3, r1
     ee2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ee4:	78fb      	ldrb	r3, [r7, #3]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d00c      	beq.n	f04 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     eee:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ef2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ef6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     efa:	69d1      	ldr	r1, [r2, #28]
     efc:	687a      	ldr	r2, [r7, #4]
     efe:	430a      	orrs	r2, r1
     f00:	61da      	str	r2, [r3, #28]
     f02:	e00d      	b.n	f20 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f08:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f10:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f14:	69d1      	ldr	r1, [r2, #28]
     f16:	687a      	ldr	r2, [r7, #4]
     f18:	ea6f 0202 	mvn.w	r2, r2
     f1c:	400a      	ands	r2, r1
     f1e:	61da      	str	r2, [r3, #28]
  }
}
     f20:	f107 070c 	add.w	r7, r7, #12
     f24:	46bd      	mov	sp, r7
     f26:	bc80      	pop	{r7}
     f28:	4770      	bx	lr
     f2a:	bf00      	nop

00000f2c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     f2c:	b480      	push	{r7}
     f2e:	b083      	sub	sp, #12
     f30:	af00      	add	r7, sp, #0
     f32:	6078      	str	r0, [r7, #4]
     f34:	460b      	mov	r3, r1
     f36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     f38:	78fb      	ldrb	r3, [r7, #3]
     f3a:	2b00      	cmp	r3, #0
     f3c:	d00c      	beq.n	f58 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f42:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f4a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f4e:	68d1      	ldr	r1, [r2, #12]
     f50:	687a      	ldr	r2, [r7, #4]
     f52:	430a      	orrs	r2, r1
     f54:	60da      	str	r2, [r3, #12]
     f56:	e00d      	b.n	f74 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f64:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f68:	68d1      	ldr	r1, [r2, #12]
     f6a:	687a      	ldr	r2, [r7, #4]
     f6c:	ea6f 0202 	mvn.w	r2, r2
     f70:	400a      	ands	r2, r1
     f72:	60da      	str	r2, [r3, #12]
  }
}
     f74:	f107 070c 	add.w	r7, r7, #12
     f78:	46bd      	mov	sp, r7
     f7a:	bc80      	pop	{r7}
     f7c:	4770      	bx	lr
     f7e:	bf00      	nop

00000f80 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     f80:	b480      	push	{r7}
     f82:	b083      	sub	sp, #12
     f84:	af00      	add	r7, sp, #0
     f86:	6078      	str	r0, [r7, #4]
     f88:	460b      	mov	r3, r1
     f8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     f8c:	78fb      	ldrb	r3, [r7, #3]
     f8e:	2b00      	cmp	r3, #0
     f90:	d00c      	beq.n	fac <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     fa2:	6911      	ldr	r1, [r2, #16]
     fa4:	687a      	ldr	r2, [r7, #4]
     fa6:	430a      	orrs	r2, r1
     fa8:	611a      	str	r2, [r3, #16]
     faa:	e00d      	b.n	fc8 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     fb8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     fbc:	6911      	ldr	r1, [r2, #16]
     fbe:	687a      	ldr	r2, [r7, #4]
     fc0:	ea6f 0202 	mvn.w	r2, r2
     fc4:	400a      	ands	r2, r1
     fc6:	611a      	str	r2, [r3, #16]
  }
}
     fc8:	f107 070c 	add.w	r7, r7, #12
     fcc:	46bd      	mov	sp, r7
     fce:	bc80      	pop	{r7}
     fd0:	4770      	bx	lr
     fd2:	bf00      	nop

00000fd4 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     fd4:	b480      	push	{r7}
     fd6:	b083      	sub	sp, #12
     fd8:	af00      	add	r7, sp, #0
     fda:	4603      	mov	r3, r0
     fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     fde:	f44f 6388 	mov.w	r3, #1088	; 0x440
     fe2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     fe6:	79fa      	ldrb	r2, [r7, #7]
     fe8:	601a      	str	r2, [r3, #0]
}
     fea:	f107 070c 	add.w	r7, r7, #12
     fee:	46bd      	mov	sp, r7
     ff0:	bc80      	pop	{r7}
     ff2:	4770      	bx	lr

00000ff4 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     ff4:	b480      	push	{r7}
     ff6:	b083      	sub	sp, #12
     ff8:	af00      	add	r7, sp, #0
     ffa:	4603      	mov	r3, r0
     ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     ffe:	f04f 034c 	mov.w	r3, #76	; 0x4c
    1002:	f2c4 2342 	movt	r3, #16962	; 0x4242
    1006:	79fa      	ldrb	r2, [r7, #7]
    1008:	601a      	str	r2, [r3, #0]
}
    100a:	f107 070c 	add.w	r7, r7, #12
    100e:	46bd      	mov	sp, r7
    1010:	bc80      	pop	{r7}
    1012:	4770      	bx	lr

00001014 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    1014:	b480      	push	{r7}
    1016:	b083      	sub	sp, #12
    1018:	af00      	add	r7, sp, #0
    101a:	4603      	mov	r3, r0
    101c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    101e:	f241 0307 	movw	r3, #4103	; 0x1007
    1022:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1026:	79fa      	ldrb	r2, [r7, #7]
    1028:	701a      	strb	r2, [r3, #0]
}
    102a:	f107 070c 	add.w	r7, r7, #12
    102e:	46bd      	mov	sp, r7
    1030:	bc80      	pop	{r7}
    1032:	4770      	bx	lr

00001034 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    1034:	b480      	push	{r7}
    1036:	b087      	sub	sp, #28
    1038:	af00      	add	r7, sp, #0
    103a:	4603      	mov	r3, r0
    103c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    103e:	f04f 0300 	mov.w	r3, #0
    1042:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    1044:	f04f 0300 	mov.w	r3, #0
    1048:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
    104a:	f04f 0300 	mov.w	r3, #0
    104e:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    1050:	79fb      	ldrb	r3, [r7, #7]
    1052:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1056:	b2db      	uxtb	r3, r3
    1058:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    105a:	68fb      	ldr	r3, [r7, #12]
    105c:	2b01      	cmp	r3, #1
    105e:	d106      	bne.n	106e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
    1060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1064:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1068:	681b      	ldr	r3, [r3, #0]
    106a:	617b      	str	r3, [r7, #20]
    106c:	e00f      	b.n	108e <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    106e:	68fb      	ldr	r3, [r7, #12]
    1070:	2b02      	cmp	r3, #2
    1072:	d106      	bne.n	1082 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
    1074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1078:	f2c4 0302 	movt	r3, #16386	; 0x4002
    107c:	6a1b      	ldr	r3, [r3, #32]
    107e:	617b      	str	r3, [r7, #20]
    1080:	e005      	b.n	108e <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    1082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1086:	f2c4 0302 	movt	r3, #16386	; 0x4002
    108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    108c:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    108e:	79fb      	ldrb	r3, [r7, #7]
    1090:	f003 031f 	and.w	r3, r3, #31
    1094:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    1096:	68fb      	ldr	r3, [r7, #12]
    1098:	697a      	ldr	r2, [r7, #20]
    109a:	fa22 f303 	lsr.w	r3, r2, r3
    109e:	f003 0301 	and.w	r3, r3, #1
    10a2:	b2db      	uxtb	r3, r3
    10a4:	2b00      	cmp	r3, #0
    10a6:	d003      	beq.n	10b0 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
    10a8:	f04f 0301 	mov.w	r3, #1
    10ac:	74fb      	strb	r3, [r7, #19]
    10ae:	e002      	b.n	10b6 <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
    10b0:	f04f 0300 	mov.w	r3, #0
    10b4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    10b6:	7cfb      	ldrb	r3, [r7, #19]
}
    10b8:	4618      	mov	r0, r3
    10ba:	f107 071c 	add.w	r7, r7, #28
    10be:	46bd      	mov	sp, r7
    10c0:	bc80      	pop	{r7}
    10c2:	4770      	bx	lr

000010c4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    10c4:	b480      	push	{r7}
    10c6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    10c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    10d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    10d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
    10d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    10da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    10de:	625a      	str	r2, [r3, #36]	; 0x24
}
    10e0:	46bd      	mov	sp, r7
    10e2:	bc80      	pop	{r7}
    10e4:	4770      	bx	lr
    10e6:	bf00      	nop

000010e8 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    10e8:	b480      	push	{r7}
    10ea:	b085      	sub	sp, #20
    10ec:	af00      	add	r7, sp, #0
    10ee:	4603      	mov	r3, r0
    10f0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    10f2:	f04f 0300 	mov.w	r3, #0
    10f6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    10f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1100:	689a      	ldr	r2, [r3, #8]
    1102:	79fb      	ldrb	r3, [r7, #7]
    1104:	4013      	ands	r3, r2
    1106:	2b00      	cmp	r3, #0
    1108:	d003      	beq.n	1112 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
    110a:	f04f 0301 	mov.w	r3, #1
    110e:	73fb      	strb	r3, [r7, #15]
    1110:	e002      	b.n	1118 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    1112:	f04f 0300 	mov.w	r3, #0
    1116:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1118:	7bfb      	ldrb	r3, [r7, #15]
}
    111a:	4618      	mov	r0, r3
    111c:	f107 0714 	add.w	r7, r7, #20
    1120:	46bd      	mov	sp, r7
    1122:	bc80      	pop	{r7}
    1124:	4770      	bx	lr
    1126:	bf00      	nop

00001128 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1128:	b480      	push	{r7}
    112a:	b083      	sub	sp, #12
    112c:	af00      	add	r7, sp, #0
    112e:	4603      	mov	r3, r0
    1130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    1132:	f241 030a 	movw	r3, #4106	; 0x100a
    1136:	f2c4 0302 	movt	r3, #16386	; 0x4002
    113a:	79fa      	ldrb	r2, [r7, #7]
    113c:	701a      	strb	r2, [r3, #0]
}
    113e:	f107 070c 	add.w	r7, r7, #12
    1142:	46bd      	mov	sp, r7
    1144:	bc80      	pop	{r7}
    1146:	4770      	bx	lr

00001148 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1148:	b580      	push	{r7, lr}
    114a:	b082      	sub	sp, #8
    114c:	af00      	add	r7, sp, #0
    114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1150:	687a      	ldr	r2, [r7, #4]
    1152:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1156:	f2c4 0301 	movt	r3, #16385	; 0x4001
    115a:	429a      	cmp	r2, r3
    115c:	d10c      	bne.n	1178 <GPIO_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    115e:	f04f 0004 	mov.w	r0, #4
    1162:	f04f 0101 	mov.w	r1, #1
    1166:	f7ff fee1 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    116a:	f04f 0004 	mov.w	r0, #4
    116e:	f04f 0100 	mov.w	r1, #0
    1172:	f7ff fedb 	bl	f2c <RCC_APB2PeriphResetCmd>
    1176:	e076      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOB)
    1178:	687a      	ldr	r2, [r7, #4]
    117a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    117e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1182:	429a      	cmp	r2, r3
    1184:	d10c      	bne.n	11a0 <GPIO_DeInit+0x58>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1186:	f04f 0008 	mov.w	r0, #8
    118a:	f04f 0101 	mov.w	r1, #1
    118e:	f7ff fecd 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    1192:	f04f 0008 	mov.w	r0, #8
    1196:	f04f 0100 	mov.w	r1, #0
    119a:	f7ff fec7 	bl	f2c <RCC_APB2PeriphResetCmd>
    119e:	e062      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOC)
    11a0:	687a      	ldr	r2, [r7, #4]
    11a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    11a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    11aa:	429a      	cmp	r2, r3
    11ac:	d10c      	bne.n	11c8 <GPIO_DeInit+0x80>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    11ae:	f04f 0010 	mov.w	r0, #16
    11b2:	f04f 0101 	mov.w	r1, #1
    11b6:	f7ff feb9 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    11ba:	f04f 0010 	mov.w	r0, #16
    11be:	f04f 0100 	mov.w	r1, #0
    11c2:	f7ff feb3 	bl	f2c <RCC_APB2PeriphResetCmd>
    11c6:	e04e      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOD)
    11c8:	687a      	ldr	r2, [r7, #4]
    11ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    11ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    11d2:	429a      	cmp	r2, r3
    11d4:	d10c      	bne.n	11f0 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    11d6:	f04f 0020 	mov.w	r0, #32
    11da:	f04f 0101 	mov.w	r1, #1
    11de:	f7ff fea5 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    11e2:	f04f 0020 	mov.w	r0, #32
    11e6:	f04f 0100 	mov.w	r1, #0
    11ea:	f7ff fe9f 	bl	f2c <RCC_APB2PeriphResetCmd>
    11ee:	e03a      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOE)
    11f0:	687a      	ldr	r2, [r7, #4]
    11f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    11f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    11fa:	429a      	cmp	r2, r3
    11fc:	d10c      	bne.n	1218 <GPIO_DeInit+0xd0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    11fe:	f04f 0040 	mov.w	r0, #64	; 0x40
    1202:	f04f 0101 	mov.w	r1, #1
    1206:	f7ff fe91 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    120a:	f04f 0040 	mov.w	r0, #64	; 0x40
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f7ff fe8b 	bl	f2c <RCC_APB2PeriphResetCmd>
    1216:	e026      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOF)
    1218:	687a      	ldr	r2, [r7, #4]
    121a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    121e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1222:	429a      	cmp	r2, r3
    1224:	d10c      	bne.n	1240 <GPIO_DeInit+0xf8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1226:	f04f 0080 	mov.w	r0, #128	; 0x80
    122a:	f04f 0101 	mov.w	r1, #1
    122e:	f7ff fe7d 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    1232:	f04f 0080 	mov.w	r0, #128	; 0x80
    1236:	f04f 0100 	mov.w	r1, #0
    123a:	f7ff fe77 	bl	f2c <RCC_APB2PeriphResetCmd>
    123e:	e012      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else
  {
    if (GPIOx == GPIOG)
    1240:	687a      	ldr	r2, [r7, #4]
    1242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1246:	f2c4 0301 	movt	r3, #16385	; 0x4001
    124a:	429a      	cmp	r2, r3
    124c:	d10b      	bne.n	1266 <GPIO_DeInit+0x11e>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    124e:	f44f 7080 	mov.w	r0, #256	; 0x100
    1252:	f04f 0101 	mov.w	r1, #1
    1256:	f7ff fe69 	bl	f2c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    125a:	f44f 7080 	mov.w	r0, #256	; 0x100
    125e:	f04f 0100 	mov.w	r1, #0
    1262:	f7ff fe63 	bl	f2c <RCC_APB2PeriphResetCmd>
    }
  }
}
    1266:	f107 0708 	add.w	r7, r7, #8
    126a:	46bd      	mov	sp, r7
    126c:	bd80      	pop	{r7, pc}
    126e:	bf00      	nop

00001270 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1270:	b580      	push	{r7, lr}
    1272:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1274:	f04f 0001 	mov.w	r0, #1
    1278:	f04f 0101 	mov.w	r1, #1
    127c:	f7ff fe56 	bl	f2c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    1280:	f04f 0001 	mov.w	r0, #1
    1284:	f04f 0100 	mov.w	r1, #0
    1288:	f7ff fe50 	bl	f2c <RCC_APB2PeriphResetCmd>
}
    128c:	bd80      	pop	{r7, pc}
    128e:	bf00      	nop

00001290 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1290:	b480      	push	{r7}
    1292:	b089      	sub	sp, #36	; 0x24
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
    1298:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    129a:	f04f 0300 	mov.w	r3, #0
    129e:	61fb      	str	r3, [r7, #28]
    12a0:	f04f 0300 	mov.w	r3, #0
    12a4:	613b      	str	r3, [r7, #16]
    12a6:	f04f 0300 	mov.w	r3, #0
    12aa:	61bb      	str	r3, [r7, #24]
    12ac:	f04f 0300 	mov.w	r3, #0
    12b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    12b2:	f04f 0300 	mov.w	r3, #0
    12b6:	617b      	str	r3, [r7, #20]
    12b8:	f04f 0300 	mov.w	r3, #0
    12bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    12be:	683b      	ldr	r3, [r7, #0]
    12c0:	78db      	ldrb	r3, [r3, #3]
    12c2:	f003 030f 	and.w	r3, r3, #15
    12c6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    12c8:	683b      	ldr	r3, [r7, #0]
    12ca:	78db      	ldrb	r3, [r3, #3]
    12cc:	f003 0310 	and.w	r3, r3, #16
    12d0:	2b00      	cmp	r3, #0
    12d2:	d004      	beq.n	12de <GPIO_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    12d4:	683b      	ldr	r3, [r7, #0]
    12d6:	789b      	ldrb	r3, [r3, #2]
    12d8:	69fa      	ldr	r2, [r7, #28]
    12da:	4313      	orrs	r3, r2
    12dc:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    12de:	683b      	ldr	r3, [r7, #0]
    12e0:	881b      	ldrh	r3, [r3, #0]
    12e2:	b2db      	uxtb	r3, r3
    12e4:	2b00      	cmp	r3, #0
    12e6:	d04e      	beq.n	1386 <GPIO_Init+0xf6>
  {
    tmpreg = GPIOx->CRL;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	681b      	ldr	r3, [r3, #0]
    12ec:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12ee:	f04f 0300 	mov.w	r3, #0
    12f2:	61bb      	str	r3, [r7, #24]
    12f4:	e041      	b.n	137a <GPIO_Init+0xea>
    {
      pos = ((uint32_t)0x01) << pinpos;
    12f6:	69bb      	ldr	r3, [r7, #24]
    12f8:	f04f 0201 	mov.w	r2, #1
    12fc:	fa02 f303 	lsl.w	r3, r2, r3
    1300:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1302:	683b      	ldr	r3, [r7, #0]
    1304:	881b      	ldrh	r3, [r3, #0]
    1306:	461a      	mov	r2, r3
    1308:	68fb      	ldr	r3, [r7, #12]
    130a:	4013      	ands	r3, r2
    130c:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    130e:	693a      	ldr	r2, [r7, #16]
    1310:	68fb      	ldr	r3, [r7, #12]
    1312:	429a      	cmp	r2, r3
    1314:	d12d      	bne.n	1372 <GPIO_Init+0xe2>
      {
        pos = pinpos << 2;
    1316:	69bb      	ldr	r3, [r7, #24]
    1318:	ea4f 0383 	mov.w	r3, r3, lsl #2
    131c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    131e:	68fb      	ldr	r3, [r7, #12]
    1320:	f04f 020f 	mov.w	r2, #15
    1324:	fa02 f303 	lsl.w	r3, r2, r3
    1328:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    132a:	68bb      	ldr	r3, [r7, #8]
    132c:	ea6f 0303 	mvn.w	r3, r3
    1330:	697a      	ldr	r2, [r7, #20]
    1332:	4013      	ands	r3, r2
    1334:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1336:	68fb      	ldr	r3, [r7, #12]
    1338:	69fa      	ldr	r2, [r7, #28]
    133a:	fa02 f303 	lsl.w	r3, r2, r3
    133e:	697a      	ldr	r2, [r7, #20]
    1340:	4313      	orrs	r3, r2
    1342:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1344:	683b      	ldr	r3, [r7, #0]
    1346:	78db      	ldrb	r3, [r3, #3]
    1348:	2b28      	cmp	r3, #40	; 0x28
    134a:	d107      	bne.n	135c <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    134c:	69bb      	ldr	r3, [r7, #24]
    134e:	f04f 0201 	mov.w	r2, #1
    1352:	fa02 f203 	lsl.w	r2, r2, r3
    1356:	687b      	ldr	r3, [r7, #4]
    1358:	615a      	str	r2, [r3, #20]
    135a:	e00a      	b.n	1372 <GPIO_Init+0xe2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    135c:	683b      	ldr	r3, [r7, #0]
    135e:	78db      	ldrb	r3, [r3, #3]
    1360:	2b48      	cmp	r3, #72	; 0x48
    1362:	d106      	bne.n	1372 <GPIO_Init+0xe2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1364:	69bb      	ldr	r3, [r7, #24]
    1366:	f04f 0201 	mov.w	r2, #1
    136a:	fa02 f203 	lsl.w	r2, r2, r3
    136e:	687b      	ldr	r3, [r7, #4]
    1370:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1372:	69bb      	ldr	r3, [r7, #24]
    1374:	f103 0301 	add.w	r3, r3, #1
    1378:	61bb      	str	r3, [r7, #24]
    137a:	69bb      	ldr	r3, [r7, #24]
    137c:	2b07      	cmp	r3, #7
    137e:	d9ba      	bls.n	12f6 <GPIO_Init+0x66>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1380:	687b      	ldr	r3, [r7, #4]
    1382:	697a      	ldr	r2, [r7, #20]
    1384:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    1386:	683b      	ldr	r3, [r7, #0]
    1388:	881b      	ldrh	r3, [r3, #0]
    138a:	2bff      	cmp	r3, #255	; 0xff
    138c:	d953      	bls.n	1436 <GPIO_Init+0x1a6>
  {
    tmpreg = GPIOx->CRH;
    138e:	687b      	ldr	r3, [r7, #4]
    1390:	685b      	ldr	r3, [r3, #4]
    1392:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1394:	f04f 0300 	mov.w	r3, #0
    1398:	61bb      	str	r3, [r7, #24]
    139a:	e046      	b.n	142a <GPIO_Init+0x19a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    139c:	69bb      	ldr	r3, [r7, #24]
    139e:	f103 0308 	add.w	r3, r3, #8
    13a2:	f04f 0201 	mov.w	r2, #1
    13a6:	fa02 f303 	lsl.w	r3, r2, r3
    13aa:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    13ac:	683b      	ldr	r3, [r7, #0]
    13ae:	881b      	ldrh	r3, [r3, #0]
    13b0:	461a      	mov	r2, r3
    13b2:	68fb      	ldr	r3, [r7, #12]
    13b4:	4013      	ands	r3, r2
    13b6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    13b8:	693a      	ldr	r2, [r7, #16]
    13ba:	68fb      	ldr	r3, [r7, #12]
    13bc:	429a      	cmp	r2, r3
    13be:	d130      	bne.n	1422 <GPIO_Init+0x192>
      {
        pos = pinpos << 2;
    13c0:	69bb      	ldr	r3, [r7, #24]
    13c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    13c6:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    13c8:	68fb      	ldr	r3, [r7, #12]
    13ca:	f04f 020f 	mov.w	r2, #15
    13ce:	fa02 f303 	lsl.w	r3, r2, r3
    13d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    13d4:	68bb      	ldr	r3, [r7, #8]
    13d6:	ea6f 0303 	mvn.w	r3, r3
    13da:	697a      	ldr	r2, [r7, #20]
    13dc:	4013      	ands	r3, r2
    13de:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    13e0:	68fb      	ldr	r3, [r7, #12]
    13e2:	69fa      	ldr	r2, [r7, #28]
    13e4:	fa02 f303 	lsl.w	r3, r2, r3
    13e8:	697a      	ldr	r2, [r7, #20]
    13ea:	4313      	orrs	r3, r2
    13ec:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    13ee:	683b      	ldr	r3, [r7, #0]
    13f0:	78db      	ldrb	r3, [r3, #3]
    13f2:	2b28      	cmp	r3, #40	; 0x28
    13f4:	d108      	bne.n	1408 <GPIO_Init+0x178>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    13f6:	69bb      	ldr	r3, [r7, #24]
    13f8:	f103 0308 	add.w	r3, r3, #8
    13fc:	f04f 0201 	mov.w	r2, #1
    1400:	fa02 f203 	lsl.w	r2, r2, r3
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1408:	683b      	ldr	r3, [r7, #0]
    140a:	78db      	ldrb	r3, [r3, #3]
    140c:	2b48      	cmp	r3, #72	; 0x48
    140e:	d108      	bne.n	1422 <GPIO_Init+0x192>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1410:	69bb      	ldr	r3, [r7, #24]
    1412:	f103 0308 	add.w	r3, r3, #8
    1416:	f04f 0201 	mov.w	r2, #1
    141a:	fa02 f203 	lsl.w	r2, r2, r3
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1422:	69bb      	ldr	r3, [r7, #24]
    1424:	f103 0301 	add.w	r3, r3, #1
    1428:	61bb      	str	r3, [r7, #24]
    142a:	69bb      	ldr	r3, [r7, #24]
    142c:	2b07      	cmp	r3, #7
    142e:	d9b5      	bls.n	139c <GPIO_Init+0x10c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1430:	687b      	ldr	r3, [r7, #4]
    1432:	697a      	ldr	r2, [r7, #20]
    1434:	605a      	str	r2, [r3, #4]
  }
}
    1436:	f107 0724 	add.w	r7, r7, #36	; 0x24
    143a:	46bd      	mov	sp, r7
    143c:	bc80      	pop	{r7}
    143e:	4770      	bx	lr

00001440 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1440:	b480      	push	{r7}
    1442:	b083      	sub	sp, #12
    1444:	af00      	add	r7, sp, #0
    1446:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    144e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	f04f 0202 	mov.w	r2, #2
    1456:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	f04f 0204 	mov.w	r2, #4
    145e:	70da      	strb	r2, [r3, #3]
}
    1460:	f107 070c 	add.w	r7, r7, #12
    1464:	46bd      	mov	sp, r7
    1466:	bc80      	pop	{r7}
    1468:	4770      	bx	lr
    146a:	bf00      	nop

0000146c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    146c:	b480      	push	{r7}
    146e:	b085      	sub	sp, #20
    1470:	af00      	add	r7, sp, #0
    1472:	6078      	str	r0, [r7, #4]
    1474:	460b      	mov	r3, r1
    1476:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1478:	f04f 0300 	mov.w	r3, #0
    147c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    147e:	687b      	ldr	r3, [r7, #4]
    1480:	689a      	ldr	r2, [r3, #8]
    1482:	887b      	ldrh	r3, [r7, #2]
    1484:	4013      	ands	r3, r2
    1486:	2b00      	cmp	r3, #0
    1488:	d003      	beq.n	1492 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    148a:	f04f 0301 	mov.w	r3, #1
    148e:	73fb      	strb	r3, [r7, #15]
    1490:	e002      	b.n	1498 <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1492:	f04f 0300 	mov.w	r3, #0
    1496:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1498:	7bfb      	ldrb	r3, [r7, #15]
}
    149a:	4618      	mov	r0, r3
    149c:	f107 0714 	add.w	r7, r7, #20
    14a0:	46bd      	mov	sp, r7
    14a2:	bc80      	pop	{r7}
    14a4:	4770      	bx	lr
    14a6:	bf00      	nop

000014a8 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    14a8:	b480      	push	{r7}
    14aa:	b083      	sub	sp, #12
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	689b      	ldr	r3, [r3, #8]
    14b4:	b29b      	uxth	r3, r3
}
    14b6:	4618      	mov	r0, r3
    14b8:	f107 070c 	add.w	r7, r7, #12
    14bc:	46bd      	mov	sp, r7
    14be:	bc80      	pop	{r7}
    14c0:	4770      	bx	lr
    14c2:	bf00      	nop

000014c4 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    14c4:	b480      	push	{r7}
    14c6:	b085      	sub	sp, #20
    14c8:	af00      	add	r7, sp, #0
    14ca:	6078      	str	r0, [r7, #4]
    14cc:	460b      	mov	r3, r1
    14ce:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    14d0:	f04f 0300 	mov.w	r3, #0
    14d4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    14d6:	687b      	ldr	r3, [r7, #4]
    14d8:	68da      	ldr	r2, [r3, #12]
    14da:	887b      	ldrh	r3, [r7, #2]
    14dc:	4013      	ands	r3, r2
    14de:	2b00      	cmp	r3, #0
    14e0:	d003      	beq.n	14ea <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    14e2:	f04f 0301 	mov.w	r3, #1
    14e6:	73fb      	strb	r3, [r7, #15]
    14e8:	e002      	b.n	14f0 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    14ea:	f04f 0300 	mov.w	r3, #0
    14ee:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    14f0:	7bfb      	ldrb	r3, [r7, #15]
}
    14f2:	4618      	mov	r0, r3
    14f4:	f107 0714 	add.w	r7, r7, #20
    14f8:	46bd      	mov	sp, r7
    14fa:	bc80      	pop	{r7}
    14fc:	4770      	bx	lr
    14fe:	bf00      	nop

00001500 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1500:	b480      	push	{r7}
    1502:	b083      	sub	sp, #12
    1504:	af00      	add	r7, sp, #0
    1506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	68db      	ldr	r3, [r3, #12]
    150c:	b29b      	uxth	r3, r3
}
    150e:	4618      	mov	r0, r3
    1510:	f107 070c 	add.w	r7, r7, #12
    1514:	46bd      	mov	sp, r7
    1516:	bc80      	pop	{r7}
    1518:	4770      	bx	lr
    151a:	bf00      	nop

0000151c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    151c:	b480      	push	{r7}
    151e:	b083      	sub	sp, #12
    1520:	af00      	add	r7, sp, #0
    1522:	6078      	str	r0, [r7, #4]
    1524:	460b      	mov	r3, r1
    1526:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    1528:	887a      	ldrh	r2, [r7, #2]
    152a:	687b      	ldr	r3, [r7, #4]
    152c:	611a      	str	r2, [r3, #16]
}
    152e:	f107 070c 	add.w	r7, r7, #12
    1532:	46bd      	mov	sp, r7
    1534:	bc80      	pop	{r7}
    1536:	4770      	bx	lr

00001538 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1538:	b480      	push	{r7}
    153a:	b083      	sub	sp, #12
    153c:	af00      	add	r7, sp, #0
    153e:	6078      	str	r0, [r7, #4]
    1540:	460b      	mov	r3, r1
    1542:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    1544:	887a      	ldrh	r2, [r7, #2]
    1546:	687b      	ldr	r3, [r7, #4]
    1548:	615a      	str	r2, [r3, #20]
}
    154a:	f107 070c 	add.w	r7, r7, #12
    154e:	46bd      	mov	sp, r7
    1550:	bc80      	pop	{r7}
    1552:	4770      	bx	lr

00001554 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    1554:	b480      	push	{r7}
    1556:	b083      	sub	sp, #12
    1558:	af00      	add	r7, sp, #0
    155a:	6078      	str	r0, [r7, #4]
    155c:	4613      	mov	r3, r2
    155e:	460a      	mov	r2, r1
    1560:	807a      	strh	r2, [r7, #2]
    1562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    1564:	787b      	ldrb	r3, [r7, #1]
    1566:	2b00      	cmp	r3, #0
    1568:	d003      	beq.n	1572 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    156a:	887a      	ldrh	r2, [r7, #2]
    156c:	687b      	ldr	r3, [r7, #4]
    156e:	611a      	str	r2, [r3, #16]
    1570:	e002      	b.n	1578 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    1572:	887a      	ldrh	r2, [r7, #2]
    1574:	687b      	ldr	r3, [r7, #4]
    1576:	615a      	str	r2, [r3, #20]
  }
}
    1578:	f107 070c 	add.w	r7, r7, #12
    157c:	46bd      	mov	sp, r7
    157e:	bc80      	pop	{r7}
    1580:	4770      	bx	lr
    1582:	bf00      	nop

00001584 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1584:	b480      	push	{r7}
    1586:	b083      	sub	sp, #12
    1588:	af00      	add	r7, sp, #0
    158a:	6078      	str	r0, [r7, #4]
    158c:	460b      	mov	r3, r1
    158e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    1590:	887a      	ldrh	r2, [r7, #2]
    1592:	687b      	ldr	r3, [r7, #4]
    1594:	60da      	str	r2, [r3, #12]
}
    1596:	f107 070c 	add.w	r7, r7, #12
    159a:	46bd      	mov	sp, r7
    159c:	bc80      	pop	{r7}
    159e:	4770      	bx	lr

000015a0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    15a0:	b480      	push	{r7}
    15a2:	b085      	sub	sp, #20
    15a4:	af00      	add	r7, sp, #0
    15a6:	6078      	str	r0, [r7, #4]
    15a8:	460b      	mov	r3, r1
    15aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    15ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    15b0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    15b2:	887b      	ldrh	r3, [r7, #2]
    15b4:	68fa      	ldr	r2, [r7, #12]
    15b6:	4313      	orrs	r3, r2
    15b8:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    15ba:	687b      	ldr	r3, [r7, #4]
    15bc:	68fa      	ldr	r2, [r7, #12]
    15be:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    15c0:	887a      	ldrh	r2, [r7, #2]
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    15c6:	687b      	ldr	r3, [r7, #4]
    15c8:	68fa      	ldr	r2, [r7, #12]
    15ca:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	699b      	ldr	r3, [r3, #24]
    15d0:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	699b      	ldr	r3, [r3, #24]
    15d6:	60fb      	str	r3, [r7, #12]
}
    15d8:	f107 0714 	add.w	r7, r7, #20
    15dc:	46bd      	mov	sp, r7
    15de:	bc80      	pop	{r7}
    15e0:	4770      	bx	lr
    15e2:	bf00      	nop

000015e4 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15e4:	b480      	push	{r7}
    15e6:	b085      	sub	sp, #20
    15e8:	af00      	add	r7, sp, #0
    15ea:	4602      	mov	r2, r0
    15ec:	460b      	mov	r3, r1
    15ee:	71fa      	strb	r2, [r7, #7]
    15f0:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    15f2:	f04f 0300 	mov.w	r3, #0
    15f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    15f8:	f04f 0300 	mov.w	r3, #0
    15fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1600:	681b      	ldr	r3, [r3, #0]
    1602:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1604:	68fa      	ldr	r2, [r7, #12]
    1606:	f64f 7380 	movw	r3, #65408	; 0xff80
    160a:	4013      	ands	r3, r2
    160c:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    160e:	79fb      	ldrb	r3, [r7, #7]
    1610:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1614:	68fa      	ldr	r2, [r7, #12]
    1616:	4313      	orrs	r3, r2
    1618:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    161a:	79bb      	ldrb	r3, [r7, #6]
    161c:	68fa      	ldr	r2, [r7, #12]
    161e:	4313      	orrs	r3, r2
    1620:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    1622:	f04f 0300 	mov.w	r3, #0
    1626:	f2c4 0301 	movt	r3, #16385	; 0x4001
    162a:	68fa      	ldr	r2, [r7, #12]
    162c:	601a      	str	r2, [r3, #0]
}
    162e:	f107 0714 	add.w	r7, r7, #20
    1632:	46bd      	mov	sp, r7
    1634:	bc80      	pop	{r7}
    1636:	4770      	bx	lr

00001638 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    1638:	b480      	push	{r7}
    163a:	b083      	sub	sp, #12
    163c:	af00      	add	r7, sp, #0
    163e:	4603      	mov	r3, r0
    1640:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1642:	f04f 031c 	mov.w	r3, #28
    1646:	f2c4 2320 	movt	r3, #16928	; 0x4220
    164a:	79fa      	ldrb	r2, [r7, #7]
    164c:	601a      	str	r2, [r3, #0]
}
    164e:	f107 070c 	add.w	r7, r7, #12
    1652:	46bd      	mov	sp, r7
    1654:	bc80      	pop	{r7}
    1656:	4770      	bx	lr

00001658 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    1658:	b480      	push	{r7}
    165a:	b087      	sub	sp, #28
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
    1660:	460b      	mov	r3, r1
    1662:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1664:	f04f 0300 	mov.w	r3, #0
    1668:	613b      	str	r3, [r7, #16]
    166a:	f04f 0300 	mov.w	r3, #0
    166e:	60fb      	str	r3, [r7, #12]
    1670:	f04f 0300 	mov.w	r3, #0
    1674:	617b      	str	r3, [r7, #20]
    1676:	f04f 0300 	mov.w	r3, #0
    167a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	2b00      	cmp	r3, #0
    1680:	da06      	bge.n	1690 <GPIO_PinRemapConfig+0x38>
  {
    tmpreg = AFIO->MAPR2;
    1682:	f04f 0300 	mov.w	r3, #0
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	69db      	ldr	r3, [r3, #28]
    168c:	617b      	str	r3, [r7, #20]
    168e:	e005      	b.n	169c <GPIO_PinRemapConfig+0x44>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    1690:	f04f 0300 	mov.w	r3, #0
    1694:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1698:	685b      	ldr	r3, [r3, #4]
    169a:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    169c:	687b      	ldr	r3, [r7, #4]
    169e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    16a2:	ea4f 4313 	mov.w	r3, r3, lsr #16
    16a6:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	ea4f 4303 	mov.w	r3, r3, lsl #16
    16ae:	ea4f 4313 	mov.w	r3, r3, lsr #16
    16b2:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    16ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    16be:	d110      	bne.n	16e2 <GPIO_PinRemapConfig+0x8a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    16c0:	697b      	ldr	r3, [r7, #20]
    16c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    16c6:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    16c8:	f04f 0300 	mov.w	r3, #0
    16cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    16d0:	f04f 0200 	mov.w	r2, #0
    16d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    16d8:	6852      	ldr	r2, [r2, #4]
    16da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    16de:	605a      	str	r2, [r3, #4]
    16e0:	e026      	b.n	1730 <GPIO_PinRemapConfig+0xd8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    16e8:	2b00      	cmp	r3, #0
    16ea:	d010      	beq.n	170e <GPIO_PinRemapConfig+0xb6>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    16ec:	68bb      	ldr	r3, [r7, #8]
    16ee:	f04f 0203 	mov.w	r2, #3
    16f2:	fa02 f303 	lsl.w	r3, r2, r3
    16f6:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    16f8:	68fb      	ldr	r3, [r7, #12]
    16fa:	ea6f 0303 	mvn.w	r3, r3
    16fe:	697a      	ldr	r2, [r7, #20]
    1700:	4013      	ands	r3, r2
    1702:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1704:	697b      	ldr	r3, [r7, #20]
    1706:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    170a:	617b      	str	r3, [r7, #20]
    170c:	e010      	b.n	1730 <GPIO_PinRemapConfig+0xd8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1714:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1718:	693a      	ldr	r2, [r7, #16]
    171a:	fa02 f303 	lsl.w	r3, r2, r3
    171e:	ea6f 0303 	mvn.w	r3, r3
    1722:	697a      	ldr	r2, [r7, #20]
    1724:	4013      	ands	r3, r2
    1726:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1728:	697b      	ldr	r3, [r7, #20]
    172a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    172e:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1730:	78fb      	ldrb	r3, [r7, #3]
    1732:	2b00      	cmp	r3, #0
    1734:	d00a      	beq.n	174c <GPIO_PinRemapConfig+0xf4>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	ea4f 5353 	mov.w	r3, r3, lsr #21
    173c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1740:	693a      	ldr	r2, [r7, #16]
    1742:	fa02 f303 	lsl.w	r3, r2, r3
    1746:	697a      	ldr	r2, [r7, #20]
    1748:	4313      	orrs	r3, r2
    174a:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    174c:	687b      	ldr	r3, [r7, #4]
    174e:	2b00      	cmp	r3, #0
    1750:	da06      	bge.n	1760 <GPIO_PinRemapConfig+0x108>
  {
    AFIO->MAPR2 = tmpreg;
    1752:	f04f 0300 	mov.w	r3, #0
    1756:	f2c4 0301 	movt	r3, #16385	; 0x4001
    175a:	697a      	ldr	r2, [r7, #20]
    175c:	61da      	str	r2, [r3, #28]
    175e:	e005      	b.n	176c <GPIO_PinRemapConfig+0x114>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    1760:	f04f 0300 	mov.w	r3, #0
    1764:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1768:	697a      	ldr	r2, [r7, #20]
    176a:	605a      	str	r2, [r3, #4]
  }
}
    176c:	f107 071c 	add.w	r7, r7, #28
    1770:	46bd      	mov	sp, r7
    1772:	bc80      	pop	{r7}
    1774:	4770      	bx	lr
    1776:	bf00      	nop

00001778 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1778:	b490      	push	{r4, r7}
    177a:	b084      	sub	sp, #16
    177c:	af00      	add	r7, sp, #0
    177e:	4602      	mov	r2, r0
    1780:	460b      	mov	r3, r1
    1782:	71fa      	strb	r2, [r7, #7]
    1784:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    1786:	f04f 0300 	mov.w	r3, #0
    178a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    178c:	79bb      	ldrb	r3, [r7, #6]
    178e:	f003 0303 	and.w	r3, r3, #3
    1792:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1796:	f04f 020f 	mov.w	r2, #15
    179a:	fa02 f303 	lsl.w	r3, r2, r3
    179e:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    17a0:	f04f 0300 	mov.w	r3, #0
    17a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17a8:	79ba      	ldrb	r2, [r7, #6]
    17aa:	ea4f 0292 	mov.w	r2, r2, lsr #2
    17ae:	b2d2      	uxtb	r2, r2
    17b0:	4610      	mov	r0, r2
    17b2:	f04f 0200 	mov.w	r2, #0
    17b6:	f2c4 0201 	movt	r2, #16385	; 0x4001
    17ba:	79b9      	ldrb	r1, [r7, #6]
    17bc:	ea4f 0191 	mov.w	r1, r1, lsr #2
    17c0:	b2c9      	uxtb	r1, r1
    17c2:	f101 0102 	add.w	r1, r1, #2
    17c6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    17ca:	68fa      	ldr	r2, [r7, #12]
    17cc:	ea6f 0202 	mvn.w	r2, r2
    17d0:	4011      	ands	r1, r2
    17d2:	f100 0202 	add.w	r2, r0, #2
    17d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    17da:	f04f 0300 	mov.w	r3, #0
    17de:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17e2:	79ba      	ldrb	r2, [r7, #6]
    17e4:	ea4f 0292 	mov.w	r2, r2, lsr #2
    17e8:	b2d2      	uxtb	r2, r2
    17ea:	4610      	mov	r0, r2
    17ec:	f04f 0200 	mov.w	r2, #0
    17f0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    17f4:	79b9      	ldrb	r1, [r7, #6]
    17f6:	ea4f 0191 	mov.w	r1, r1, lsr #2
    17fa:	b2c9      	uxtb	r1, r1
    17fc:	f101 0102 	add.w	r1, r1, #2
    1800:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1804:	79fc      	ldrb	r4, [r7, #7]
    1806:	79ba      	ldrb	r2, [r7, #6]
    1808:	f002 0203 	and.w	r2, r2, #3
    180c:	ea4f 0282 	mov.w	r2, r2, lsl #2
    1810:	fa04 f202 	lsl.w	r2, r4, r2
    1814:	4311      	orrs	r1, r2
    1816:	f100 0202 	add.w	r2, r0, #2
    181a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    181e:	f107 0710 	add.w	r7, r7, #16
    1822:	46bd      	mov	sp, r7
    1824:	bc90      	pop	{r4, r7}
    1826:	4770      	bx	lr

00001828 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    1828:	b480      	push	{r7}
    182a:	b083      	sub	sp, #12
    182c:	af00      	add	r7, sp, #0
    182e:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1830:	f04f 03dc 	mov.w	r3, #220	; 0xdc
    1834:	f2c4 2320 	movt	r3, #16928	; 0x4220
    1838:	687a      	ldr	r2, [r7, #4]
    183a:	601a      	str	r2, [r3, #0]
}
    183c:	f107 070c 	add.w	r7, r7, #12
    1840:	46bd      	mov	sp, r7
    1842:	bc80      	pop	{r7}
    1844:	4770      	bx	lr
    1846:	bf00      	nop

00001848 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1848:	b580      	push	{r7, lr}
    184a:	b082      	sub	sp, #8
    184c:	af00      	add	r7, sp, #0
    184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1850:	687a      	ldr	r2, [r7, #4]
    1852:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1856:	f2c4 0301 	movt	r3, #16385	; 0x4001
    185a:	429a      	cmp	r2, r3
    185c:	d10c      	bne.n	1878 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    185e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1862:	f04f 0101 	mov.w	r1, #1
    1866:	f7ff fb61 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    186a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    186e:	f04f 0100 	mov.w	r1, #0
    1872:	f7ff fb5b 	bl	f2c <RCC_APB2PeriphResetCmd>
    1876:	e04e      	b.n	1916 <USART_DeInit+0xce>
  }
  else if (USARTx == USART2)
    1878:	687a      	ldr	r2, [r7, #4]
    187a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    187e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1882:	429a      	cmp	r2, r3
    1884:	d10c      	bne.n	18a0 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    1886:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    188a:	f04f 0101 	mov.w	r1, #1
    188e:	f7ff fb77 	bl	f80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    1892:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1896:	f04f 0100 	mov.w	r1, #0
    189a:	f7ff fb71 	bl	f80 <RCC_APB1PeriphResetCmd>
    189e:	e03a      	b.n	1916 <USART_DeInit+0xce>
  }
  else if (USARTx == USART3)
    18a0:	687a      	ldr	r2, [r7, #4]
    18a2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    18a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18aa:	429a      	cmp	r2, r3
    18ac:	d10c      	bne.n	18c8 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    18ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    18b2:	f04f 0101 	mov.w	r1, #1
    18b6:	f7ff fb63 	bl	f80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    18ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    18be:	f04f 0100 	mov.w	r1, #0
    18c2:	f7ff fb5d 	bl	f80 <RCC_APB1PeriphResetCmd>
    18c6:	e026      	b.n	1916 <USART_DeInit+0xce>
  }
  else if (USARTx == UART4)
    18c8:	687a      	ldr	r2, [r7, #4]
    18ca:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    18ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18d2:	429a      	cmp	r2, r3
    18d4:	d10c      	bne.n	18f0 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    18d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    18da:	f04f 0101 	mov.w	r1, #1
    18de:	f7ff fb4f 	bl	f80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    18e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    18e6:	f04f 0100 	mov.w	r1, #0
    18ea:	f7ff fb49 	bl	f80 <RCC_APB1PeriphResetCmd>
    18ee:	e012      	b.n	1916 <USART_DeInit+0xce>
  }
  else
  {
    if (USARTx == UART5)
    18f0:	687a      	ldr	r2, [r7, #4]
    18f2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    18f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18fa:	429a      	cmp	r2, r3
    18fc:	d10b      	bne.n	1916 <USART_DeInit+0xce>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    18fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1902:	f04f 0101 	mov.w	r1, #1
    1906:	f7ff fb3b 	bl	f80 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    190a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    190e:	f04f 0100 	mov.w	r1, #0
    1912:	f7ff fb35 	bl	f80 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1916:	f107 0708 	add.w	r7, r7, #8
    191a:	46bd      	mov	sp, r7
    191c:	bd80      	pop	{r7, pc}
    191e:	bf00      	nop

00001920 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1920:	b580      	push	{r7, lr}
    1922:	b08c      	sub	sp, #48	; 0x30
    1924:	af00      	add	r7, sp, #0
    1926:	6078      	str	r0, [r7, #4]
    1928:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    192a:	f04f 0300 	mov.w	r3, #0
    192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1930:	f04f 0300 	mov.w	r3, #0
    1934:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    1936:	f04f 0300 	mov.w	r3, #0
    193a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    193c:	f04f 0300 	mov.w	r3, #0
    1940:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1942:	f04f 0300 	mov.w	r3, #0
    1946:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1948:	687b      	ldr	r3, [r7, #4]
    194a:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    194c:	687b      	ldr	r3, [r7, #4]
    194e:	8a1b      	ldrh	r3, [r3, #16]
    1950:	b29b      	uxth	r3, r3
    1952:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1956:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    195a:	4013      	ands	r3, r2
    195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    195e:	683b      	ldr	r3, [r7, #0]
    1960:	88db      	ldrh	r3, [r3, #6]
    1962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1964:	4313      	orrs	r3, r2
    1966:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    196a:	b29a      	uxth	r2, r3
    196c:	687b      	ldr	r3, [r7, #4]
    196e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    1970:	687b      	ldr	r3, [r7, #4]
    1972:	899b      	ldrh	r3, [r3, #12]
    1974:	b29b      	uxth	r3, r3
    1976:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    197a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    197e:	4013      	ands	r3, r2
    1980:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1982:	683b      	ldr	r3, [r7, #0]
    1984:	889a      	ldrh	r2, [r3, #4]
    1986:	683b      	ldr	r3, [r7, #0]
    1988:	891b      	ldrh	r3, [r3, #8]
    198a:	4313      	orrs	r3, r2
    198c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    198e:	683b      	ldr	r3, [r7, #0]
    1990:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1992:	4313      	orrs	r3, r2
    1994:	b29b      	uxth	r3, r3
    1996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1998:	4313      	orrs	r3, r2
    199a:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    199e:	b29a      	uxth	r2, r3
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	8a9b      	ldrh	r3, [r3, #20]
    19a8:	b29b      	uxth	r3, r3
    19aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    19ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    19ae:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    19b2:	4013      	ands	r3, r2
    19b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    19b6:	683b      	ldr	r3, [r7, #0]
    19b8:	899b      	ldrh	r3, [r3, #12]
    19ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    19bc:	4313      	orrs	r3, r2
    19be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    19c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19c2:	b29a      	uxth	r2, r3
    19c4:	687b      	ldr	r3, [r7, #4]
    19c6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    19c8:	f107 0308 	add.w	r3, r7, #8
    19cc:	4618      	mov	r0, r3
    19ce:	f7ff f945 	bl	c5c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    19d2:	69fa      	ldr	r2, [r7, #28]
    19d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    19d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    19dc:	429a      	cmp	r2, r3
    19de:	d102      	bne.n	19e6 <USART_Init+0xc6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    19e0:	697b      	ldr	r3, [r7, #20]
    19e2:	62bb      	str	r3, [r7, #40]	; 0x28
    19e4:	e001      	b.n	19ea <USART_Init+0xca>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    19e6:	693b      	ldr	r3, [r7, #16]
    19e8:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    19ea:	687b      	ldr	r3, [r7, #4]
    19ec:	899b      	ldrh	r3, [r3, #12]
    19ee:	b29b      	uxth	r3, r3
    19f0:	b29b      	uxth	r3, r3
    19f2:	b21b      	sxth	r3, r3
    19f4:	2b00      	cmp	r3, #0
    19f6:	da0f      	bge.n	1a18 <USART_Init+0xf8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    19f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    19fa:	4613      	mov	r3, r2
    19fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a00:	189b      	adds	r3, r3, r2
    1a02:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1a06:	189a      	adds	r2, r3, r2
    1a08:	683b      	ldr	r3, [r7, #0]
    1a0a:	681b      	ldr	r3, [r3, #0]
    1a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1a10:	fbb2 f3f3 	udiv	r3, r2, r3
    1a14:	627b      	str	r3, [r7, #36]	; 0x24
    1a16:	e00e      	b.n	1a36 <USART_Init+0x116>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1a1a:	4613      	mov	r3, r2
    1a1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a20:	189b      	adds	r3, r3, r2
    1a22:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1a26:	189a      	adds	r2, r3, r2
    1a28:	683b      	ldr	r3, [r7, #0]
    1a2a:	681b      	ldr	r3, [r3, #0]
    1a2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a30:	fbb2 f3f3 	udiv	r3, r2, r3
    1a34:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a38:	f248 531f 	movw	r3, #34079	; 0x851f
    1a3c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1a40:	fba3 1302 	umull	r1, r3, r3, r2
    1a44:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1a48:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    1a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a50:	ea4f 1313 	mov.w	r3, r3, lsr #4
    1a54:	f04f 0264 	mov.w	r2, #100	; 0x64
    1a58:	fb02 f303 	mul.w	r3, r2, r3
    1a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a5e:	1ad3      	subs	r3, r2, r3
    1a60:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	899b      	ldrh	r3, [r3, #12]
    1a66:	b29b      	uxth	r3, r3
    1a68:	b29b      	uxth	r3, r3
    1a6a:	b21b      	sxth	r3, r3
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	da12      	bge.n	1a96 <USART_Init+0x176>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    1a70:	6a3b      	ldr	r3, [r7, #32]
    1a72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1a76:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1a7a:	f248 531f 	movw	r3, #34079	; 0x851f
    1a7e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1a82:	fba3 1302 	umull	r1, r3, r3, r2
    1a86:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1a8a:	f003 0307 	and.w	r3, r3, #7
    1a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1a90:	4313      	orrs	r3, r2
    1a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a94:	e011      	b.n	1aba <USART_Init+0x19a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    1a96:	6a3b      	ldr	r3, [r7, #32]
    1a98:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1a9c:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1aa0:	f248 531f 	movw	r3, #34079	; 0x851f
    1aa4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1aa8:	fba3 1302 	umull	r1, r3, r3, r2
    1aac:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1ab0:	f003 030f 	and.w	r3, r3, #15
    1ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ab6:	4313      	orrs	r3, r2
    1ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    1aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1abc:	b29a      	uxth	r2, r3
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	811a      	strh	r2, [r3, #8]
}
    1ac2:	f107 0730 	add.w	r7, r7, #48	; 0x30
    1ac6:	46bd      	mov	sp, r7
    1ac8:	bd80      	pop	{r7, pc}
    1aca:	bf00      	nop

00001acc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    1acc:	b480      	push	{r7}
    1ace:	b083      	sub	sp, #12
    1ad0:	af00      	add	r7, sp, #0
    1ad2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    1ad4:	687b      	ldr	r3, [r7, #4]
    1ad6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    1ada:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	f04f 0200 	mov.w	r2, #0
    1ae2:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	f04f 0200 	mov.w	r2, #0
    1aea:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	f04f 0200 	mov.w	r2, #0
    1af2:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	f04f 020c 	mov.w	r2, #12
    1afa:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	f04f 0200 	mov.w	r2, #0
    1b02:	819a      	strh	r2, [r3, #12]
}
    1b04:	f107 070c 	add.w	r7, r7, #12
    1b08:	46bd      	mov	sp, r7
    1b0a:	bc80      	pop	{r7}
    1b0c:	4770      	bx	lr
    1b0e:	bf00      	nop

00001b10 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1b10:	b480      	push	{r7}
    1b12:	b085      	sub	sp, #20
    1b14:	af00      	add	r7, sp, #0
    1b16:	6078      	str	r0, [r7, #4]
    1b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    1b1a:	f04f 0300 	mov.w	r3, #0
    1b1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	8a1b      	ldrh	r3, [r3, #16]
    1b24:	b29b      	uxth	r3, r3
    1b26:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    1b28:	68fa      	ldr	r2, [r7, #12]
    1b2a:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1b2e:	4013      	ands	r3, r2
    1b30:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1b32:	683b      	ldr	r3, [r7, #0]
    1b34:	881a      	ldrh	r2, [r3, #0]
    1b36:	683b      	ldr	r3, [r7, #0]
    1b38:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    1b3a:	4313      	orrs	r3, r2
    1b3c:	b29a      	uxth	r2, r3
    1b3e:	683b      	ldr	r3, [r7, #0]
    1b40:	889b      	ldrh	r3, [r3, #4]
    1b42:	4313      	orrs	r3, r2
    1b44:	b29a      	uxth	r2, r3
    1b46:	683b      	ldr	r3, [r7, #0]
    1b48:	88db      	ldrh	r3, [r3, #6]
    1b4a:	4313      	orrs	r3, r2
    1b4c:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1b4e:	68fa      	ldr	r2, [r7, #12]
    1b50:	4313      	orrs	r3, r2
    1b52:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1b54:	68fb      	ldr	r3, [r7, #12]
    1b56:	b29a      	uxth	r2, r3
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	821a      	strh	r2, [r3, #16]
}
    1b5c:	f107 0714 	add.w	r7, r7, #20
    1b60:	46bd      	mov	sp, r7
    1b62:	bc80      	pop	{r7}
    1b64:	4770      	bx	lr
    1b66:	bf00      	nop

00001b68 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1b68:	b480      	push	{r7}
    1b6a:	b083      	sub	sp, #12
    1b6c:	af00      	add	r7, sp, #0
    1b6e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1b70:	687b      	ldr	r3, [r7, #4]
    1b72:	f04f 0200 	mov.w	r2, #0
    1b76:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1b78:	687b      	ldr	r3, [r7, #4]
    1b7a:	f04f 0200 	mov.w	r2, #0
    1b7e:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	f04f 0200 	mov.w	r2, #0
    1b86:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	f04f 0200 	mov.w	r2, #0
    1b8e:	80da      	strh	r2, [r3, #6]
}
    1b90:	f107 070c 	add.w	r7, r7, #12
    1b94:	46bd      	mov	sp, r7
    1b96:	bc80      	pop	{r7}
    1b98:	4770      	bx	lr
    1b9a:	bf00      	nop

00001b9c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b9c:	b480      	push	{r7}
    1b9e:	b083      	sub	sp, #12
    1ba0:	af00      	add	r7, sp, #0
    1ba2:	6078      	str	r0, [r7, #4]
    1ba4:	460b      	mov	r3, r1
    1ba6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1ba8:	78fb      	ldrb	r3, [r7, #3]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d008      	beq.n	1bc0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	899b      	ldrh	r3, [r3, #12]
    1bb2:	b29b      	uxth	r3, r3
    1bb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1bb8:	b29a      	uxth	r2, r3
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	819a      	strh	r2, [r3, #12]
    1bbe:	e007      	b.n	1bd0 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1bc0:	687b      	ldr	r3, [r7, #4]
    1bc2:	899b      	ldrh	r3, [r3, #12]
    1bc4:	b29b      	uxth	r3, r3
    1bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1bca:	b29a      	uxth	r2, r3
    1bcc:	687b      	ldr	r3, [r7, #4]
    1bce:	819a      	strh	r2, [r3, #12]
  }
}
    1bd0:	f107 070c 	add.w	r7, r7, #12
    1bd4:	46bd      	mov	sp, r7
    1bd6:	bc80      	pop	{r7}
    1bd8:	4770      	bx	lr
    1bda:	bf00      	nop

00001bdc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    1bdc:	b480      	push	{r7}
    1bde:	b087      	sub	sp, #28
    1be0:	af00      	add	r7, sp, #0
    1be2:	6078      	str	r0, [r7, #4]
    1be4:	4613      	mov	r3, r2
    1be6:	460a      	mov	r2, r1
    1be8:	807a      	strh	r2, [r7, #2]
    1bea:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    1bec:	f04f 0300 	mov.w	r3, #0
    1bf0:	613b      	str	r3, [r7, #16]
    1bf2:	f04f 0300 	mov.w	r3, #0
    1bf6:	60fb      	str	r3, [r7, #12]
    1bf8:	f04f 0300 	mov.w	r3, #0
    1bfc:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    1bfe:	f04f 0300 	mov.w	r3, #0
    1c02:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1c04:	687b      	ldr	r3, [r7, #4]
    1c06:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1c08:	887b      	ldrh	r3, [r7, #2]
    1c0a:	b2db      	uxtb	r3, r3
    1c0c:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1c10:	b2db      	uxtb	r3, r3
    1c12:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    1c14:	887b      	ldrh	r3, [r7, #2]
    1c16:	f003 031f 	and.w	r3, r3, #31
    1c1a:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    1c1c:	68fb      	ldr	r3, [r7, #12]
    1c1e:	f04f 0201 	mov.w	r2, #1
    1c22:	fa02 f303 	lsl.w	r3, r2, r3
    1c26:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    1c28:	693b      	ldr	r3, [r7, #16]
    1c2a:	2b01      	cmp	r3, #1
    1c2c:	d104      	bne.n	1c38 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
    1c2e:	697b      	ldr	r3, [r7, #20]
    1c30:	f103 030c 	add.w	r3, r3, #12
    1c34:	617b      	str	r3, [r7, #20]
    1c36:	e00b      	b.n	1c50 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1c38:	693b      	ldr	r3, [r7, #16]
    1c3a:	2b02      	cmp	r3, #2
    1c3c:	d104      	bne.n	1c48 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
    1c3e:	697b      	ldr	r3, [r7, #20]
    1c40:	f103 0310 	add.w	r3, r3, #16
    1c44:	617b      	str	r3, [r7, #20]
    1c46:	e003      	b.n	1c50 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1c48:	697b      	ldr	r3, [r7, #20]
    1c4a:	f103 0314 	add.w	r3, r3, #20
    1c4e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1c50:	787b      	ldrb	r3, [r7, #1]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d006      	beq.n	1c64 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1c56:	697b      	ldr	r3, [r7, #20]
    1c58:	697a      	ldr	r2, [r7, #20]
    1c5a:	6811      	ldr	r1, [r2, #0]
    1c5c:	68ba      	ldr	r2, [r7, #8]
    1c5e:	430a      	orrs	r2, r1
    1c60:	601a      	str	r2, [r3, #0]
    1c62:	e007      	b.n	1c74 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1c64:	697b      	ldr	r3, [r7, #20]
    1c66:	697a      	ldr	r2, [r7, #20]
    1c68:	6811      	ldr	r1, [r2, #0]
    1c6a:	68ba      	ldr	r2, [r7, #8]
    1c6c:	ea6f 0202 	mvn.w	r2, r2
    1c70:	400a      	ands	r2, r1
    1c72:	601a      	str	r2, [r3, #0]
  }
}
    1c74:	f107 071c 	add.w	r7, r7, #28
    1c78:	46bd      	mov	sp, r7
    1c7a:	bc80      	pop	{r7}
    1c7c:	4770      	bx	lr
    1c7e:	bf00      	nop

00001c80 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1c80:	b480      	push	{r7}
    1c82:	b083      	sub	sp, #12
    1c84:	af00      	add	r7, sp, #0
    1c86:	6078      	str	r0, [r7, #4]
    1c88:	4613      	mov	r3, r2
    1c8a:	460a      	mov	r2, r1
    1c8c:	807a      	strh	r2, [r7, #2]
    1c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c90:	787b      	ldrb	r3, [r7, #1]
    1c92:	2b00      	cmp	r3, #0
    1c94:	d008      	beq.n	1ca8 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1c96:	687b      	ldr	r3, [r7, #4]
    1c98:	8a9b      	ldrh	r3, [r3, #20]
    1c9a:	b29a      	uxth	r2, r3
    1c9c:	887b      	ldrh	r3, [r7, #2]
    1c9e:	4313      	orrs	r3, r2
    1ca0:	b29a      	uxth	r2, r3
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	829a      	strh	r2, [r3, #20]
    1ca6:	e00a      	b.n	1cbe <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	8a9b      	ldrh	r3, [r3, #20]
    1cac:	b29a      	uxth	r2, r3
    1cae:	887b      	ldrh	r3, [r7, #2]
    1cb0:	ea6f 0303 	mvn.w	r3, r3
    1cb4:	b29b      	uxth	r3, r3
    1cb6:	4013      	ands	r3, r2
    1cb8:	b29a      	uxth	r2, r3
    1cba:	687b      	ldr	r3, [r7, #4]
    1cbc:	829a      	strh	r2, [r3, #20]
  }
}
    1cbe:	f107 070c 	add.w	r7, r7, #12
    1cc2:	46bd      	mov	sp, r7
    1cc4:	bc80      	pop	{r7}
    1cc6:	4770      	bx	lr

00001cc8 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1cc8:	b480      	push	{r7}
    1cca:	b083      	sub	sp, #12
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
    1cd0:	460b      	mov	r3, r1
    1cd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	8a1b      	ldrh	r3, [r3, #16]
    1cd8:	b29b      	uxth	r3, r3
    1cda:	f023 030f 	bic.w	r3, r3, #15
    1cde:	b29a      	uxth	r2, r3
    1ce0:	687b      	ldr	r3, [r7, #4]
    1ce2:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1ce4:	687b      	ldr	r3, [r7, #4]
    1ce6:	8a1b      	ldrh	r3, [r3, #16]
    1ce8:	b29a      	uxth	r2, r3
    1cea:	78fb      	ldrb	r3, [r7, #3]
    1cec:	b29b      	uxth	r3, r3
    1cee:	4313      	orrs	r3, r2
    1cf0:	b29a      	uxth	r2, r3
    1cf2:	687b      	ldr	r3, [r7, #4]
    1cf4:	821a      	strh	r2, [r3, #16]
}
    1cf6:	f107 070c 	add.w	r7, r7, #12
    1cfa:	46bd      	mov	sp, r7
    1cfc:	bc80      	pop	{r7}
    1cfe:	4770      	bx	lr

00001d00 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1d00:	b480      	push	{r7}
    1d02:	b083      	sub	sp, #12
    1d04:	af00      	add	r7, sp, #0
    1d06:	6078      	str	r0, [r7, #4]
    1d08:	460b      	mov	r3, r1
    1d0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	899b      	ldrh	r3, [r3, #12]
    1d10:	b29b      	uxth	r3, r3
    1d12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1d16:	b29a      	uxth	r2, r3
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	899b      	ldrh	r3, [r3, #12]
    1d20:	b29a      	uxth	r2, r3
    1d22:	887b      	ldrh	r3, [r7, #2]
    1d24:	4313      	orrs	r3, r2
    1d26:	b29a      	uxth	r2, r3
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	819a      	strh	r2, [r3, #12]
}
    1d2c:	f107 070c 	add.w	r7, r7, #12
    1d30:	46bd      	mov	sp, r7
    1d32:	bc80      	pop	{r7}
    1d34:	4770      	bx	lr
    1d36:	bf00      	nop

00001d38 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d38:	b480      	push	{r7}
    1d3a:	b083      	sub	sp, #12
    1d3c:	af00      	add	r7, sp, #0
    1d3e:	6078      	str	r0, [r7, #4]
    1d40:	460b      	mov	r3, r1
    1d42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d44:	78fb      	ldrb	r3, [r7, #3]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d008      	beq.n	1d5c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1d4a:	687b      	ldr	r3, [r7, #4]
    1d4c:	899b      	ldrh	r3, [r3, #12]
    1d4e:	b29b      	uxth	r3, r3
    1d50:	f043 0302 	orr.w	r3, r3, #2
    1d54:	b29a      	uxth	r2, r3
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	819a      	strh	r2, [r3, #12]
    1d5a:	e007      	b.n	1d6c <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1d5c:	687b      	ldr	r3, [r7, #4]
    1d5e:	899b      	ldrh	r3, [r3, #12]
    1d60:	b29b      	uxth	r3, r3
    1d62:	f023 0302 	bic.w	r3, r3, #2
    1d66:	b29a      	uxth	r2, r3
    1d68:	687b      	ldr	r3, [r7, #4]
    1d6a:	819a      	strh	r2, [r3, #12]
  }
}
    1d6c:	f107 070c 	add.w	r7, r7, #12
    1d70:	46bd      	mov	sp, r7
    1d72:	bc80      	pop	{r7}
    1d74:	4770      	bx	lr
    1d76:	bf00      	nop

00001d78 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1d78:	b480      	push	{r7}
    1d7a:	b083      	sub	sp, #12
    1d7c:	af00      	add	r7, sp, #0
    1d7e:	6078      	str	r0, [r7, #4]
    1d80:	460b      	mov	r3, r1
    1d82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	8a1b      	ldrh	r3, [r3, #16]
    1d88:	b29b      	uxth	r3, r3
    1d8a:	f023 0320 	bic.w	r3, r3, #32
    1d8e:	b29a      	uxth	r2, r3
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	8a1b      	ldrh	r3, [r3, #16]
    1d98:	b29a      	uxth	r2, r3
    1d9a:	887b      	ldrh	r3, [r7, #2]
    1d9c:	4313      	orrs	r3, r2
    1d9e:	b29a      	uxth	r2, r3
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	821a      	strh	r2, [r3, #16]
}
    1da4:	f107 070c 	add.w	r7, r7, #12
    1da8:	46bd      	mov	sp, r7
    1daa:	bc80      	pop	{r7}
    1dac:	4770      	bx	lr
    1dae:	bf00      	nop

00001db0 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1db0:	b480      	push	{r7}
    1db2:	b083      	sub	sp, #12
    1db4:	af00      	add	r7, sp, #0
    1db6:	6078      	str	r0, [r7, #4]
    1db8:	460b      	mov	r3, r1
    1dba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1dbc:	78fb      	ldrb	r3, [r7, #3]
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d008      	beq.n	1dd4 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	8a1b      	ldrh	r3, [r3, #16]
    1dc6:	b29b      	uxth	r3, r3
    1dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1dcc:	b29a      	uxth	r2, r3
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	821a      	strh	r2, [r3, #16]
    1dd2:	e007      	b.n	1de4 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	8a1b      	ldrh	r3, [r3, #16]
    1dd8:	b29b      	uxth	r3, r3
    1dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1dde:	b29a      	uxth	r2, r3
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	821a      	strh	r2, [r3, #16]
  }
}
    1de4:	f107 070c 	add.w	r7, r7, #12
    1de8:	46bd      	mov	sp, r7
    1dea:	bc80      	pop	{r7}
    1dec:	4770      	bx	lr
    1dee:	bf00      	nop

00001df0 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1df0:	b480      	push	{r7}
    1df2:	b083      	sub	sp, #12
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
    1df8:	460b      	mov	r3, r1
    1dfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1dfc:	887b      	ldrh	r3, [r7, #2]
    1dfe:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    1e02:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    1e06:	b29a      	uxth	r2, r3
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	809a      	strh	r2, [r3, #4]
}
    1e0c:	f107 070c 	add.w	r7, r7, #12
    1e10:	46bd      	mov	sp, r7
    1e12:	bc80      	pop	{r7}
    1e14:	4770      	bx	lr
    1e16:	bf00      	nop

00001e18 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1e18:	b480      	push	{r7}
    1e1a:	b083      	sub	sp, #12
    1e1c:	af00      	add	r7, sp, #0
    1e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1e20:	687b      	ldr	r3, [r7, #4]
    1e22:	889b      	ldrh	r3, [r3, #4]
    1e24:	b29b      	uxth	r3, r3
    1e26:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    1e2a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    1e2e:	b29b      	uxth	r3, r3
}
    1e30:	4618      	mov	r0, r3
    1e32:	f107 070c 	add.w	r7, r7, #12
    1e36:	46bd      	mov	sp, r7
    1e38:	bc80      	pop	{r7}
    1e3a:	4770      	bx	lr

00001e3c <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1e3c:	b480      	push	{r7}
    1e3e:	b083      	sub	sp, #12
    1e40:	af00      	add	r7, sp, #0
    1e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	899b      	ldrh	r3, [r3, #12]
    1e48:	b29b      	uxth	r3, r3
    1e4a:	f043 0301 	orr.w	r3, r3, #1
    1e4e:	b29a      	uxth	r2, r3
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	819a      	strh	r2, [r3, #12]
}
    1e54:	f107 070c 	add.w	r7, r7, #12
    1e58:	46bd      	mov	sp, r7
    1e5a:	bc80      	pop	{r7}
    1e5c:	4770      	bx	lr
    1e5e:	bf00      	nop

00001e60 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1e60:	b480      	push	{r7}
    1e62:	b083      	sub	sp, #12
    1e64:	af00      	add	r7, sp, #0
    1e66:	6078      	str	r0, [r7, #4]
    1e68:	460b      	mov	r3, r1
    1e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1e6c:	687b      	ldr	r3, [r7, #4]
    1e6e:	8b1b      	ldrh	r3, [r3, #24]
    1e70:	b29b      	uxth	r3, r3
    1e72:	b2db      	uxtb	r3, r3
    1e74:	b29a      	uxth	r2, r3
    1e76:	687b      	ldr	r3, [r7, #4]
    1e78:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	8b1b      	ldrh	r3, [r3, #24]
    1e7e:	b29a      	uxth	r2, r3
    1e80:	78fb      	ldrb	r3, [r7, #3]
    1e82:	b29b      	uxth	r3, r3
    1e84:	ea4f 2303 	mov.w	r3, r3, lsl #8
    1e88:	b29b      	uxth	r3, r3
    1e8a:	4313      	orrs	r3, r2
    1e8c:	b29a      	uxth	r2, r3
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	831a      	strh	r2, [r3, #24]
}
    1e92:	f107 070c 	add.w	r7, r7, #12
    1e96:	46bd      	mov	sp, r7
    1e98:	bc80      	pop	{r7}
    1e9a:	4770      	bx	lr

00001e9c <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1e9c:	b480      	push	{r7}
    1e9e:	b083      	sub	sp, #12
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	6078      	str	r0, [r7, #4]
    1ea4:	460b      	mov	r3, r1
    1ea6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	8b1b      	ldrh	r3, [r3, #24]
    1eac:	b29b      	uxth	r3, r3
    1eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1eb2:	b29a      	uxth	r2, r3
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	8b1b      	ldrh	r3, [r3, #24]
    1ebc:	b29a      	uxth	r2, r3
    1ebe:	78fb      	ldrb	r3, [r7, #3]
    1ec0:	b29b      	uxth	r3, r3
    1ec2:	4313      	orrs	r3, r2
    1ec4:	b29a      	uxth	r2, r3
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	831a      	strh	r2, [r3, #24]
}
    1eca:	f107 070c 	add.w	r7, r7, #12
    1ece:	46bd      	mov	sp, r7
    1ed0:	bc80      	pop	{r7}
    1ed2:	4770      	bx	lr

00001ed4 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1ed4:	b480      	push	{r7}
    1ed6:	b083      	sub	sp, #12
    1ed8:	af00      	add	r7, sp, #0
    1eda:	6078      	str	r0, [r7, #4]
    1edc:	460b      	mov	r3, r1
    1ede:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1ee0:	78fb      	ldrb	r3, [r7, #3]
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	d008      	beq.n	1ef8 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	8a9b      	ldrh	r3, [r3, #20]
    1eea:	b29b      	uxth	r3, r3
    1eec:	f043 0320 	orr.w	r3, r3, #32
    1ef0:	b29a      	uxth	r2, r3
    1ef2:	687b      	ldr	r3, [r7, #4]
    1ef4:	829a      	strh	r2, [r3, #20]
    1ef6:	e007      	b.n	1f08 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1ef8:	687b      	ldr	r3, [r7, #4]
    1efa:	8a9b      	ldrh	r3, [r3, #20]
    1efc:	b29b      	uxth	r3, r3
    1efe:	f023 0320 	bic.w	r3, r3, #32
    1f02:	b29a      	uxth	r2, r3
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	829a      	strh	r2, [r3, #20]
  }
}
    1f08:	f107 070c 	add.w	r7, r7, #12
    1f0c:	46bd      	mov	sp, r7
    1f0e:	bc80      	pop	{r7}
    1f10:	4770      	bx	lr
    1f12:	bf00      	nop

00001f14 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f14:	b480      	push	{r7}
    1f16:	b083      	sub	sp, #12
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
    1f1c:	460b      	mov	r3, r1
    1f1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1f20:	78fb      	ldrb	r3, [r7, #3]
    1f22:	2b00      	cmp	r3, #0
    1f24:	d008      	beq.n	1f38 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1f26:	687b      	ldr	r3, [r7, #4]
    1f28:	8a9b      	ldrh	r3, [r3, #20]
    1f2a:	b29b      	uxth	r3, r3
    1f2c:	f043 0310 	orr.w	r3, r3, #16
    1f30:	b29a      	uxth	r2, r3
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	829a      	strh	r2, [r3, #20]
    1f36:	e007      	b.n	1f48 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	8a9b      	ldrh	r3, [r3, #20]
    1f3c:	b29b      	uxth	r3, r3
    1f3e:	f023 0310 	bic.w	r3, r3, #16
    1f42:	b29a      	uxth	r2, r3
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	829a      	strh	r2, [r3, #20]
  }
}
    1f48:	f107 070c 	add.w	r7, r7, #12
    1f4c:	46bd      	mov	sp, r7
    1f4e:	bc80      	pop	{r7}
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f54:	b480      	push	{r7}
    1f56:	b083      	sub	sp, #12
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1f60:	78fb      	ldrb	r3, [r7, #3]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d008      	beq.n	1f78 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1f66:	687b      	ldr	r3, [r7, #4]
    1f68:	8a9b      	ldrh	r3, [r3, #20]
    1f6a:	b29b      	uxth	r3, r3
    1f6c:	f043 0308 	orr.w	r3, r3, #8
    1f70:	b29a      	uxth	r2, r3
    1f72:	687b      	ldr	r3, [r7, #4]
    1f74:	829a      	strh	r2, [r3, #20]
    1f76:	e007      	b.n	1f88 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	8a9b      	ldrh	r3, [r3, #20]
    1f7c:	b29b      	uxth	r3, r3
    1f7e:	f023 0308 	bic.w	r3, r3, #8
    1f82:	b29a      	uxth	r2, r3
    1f84:	687b      	ldr	r3, [r7, #4]
    1f86:	829a      	strh	r2, [r3, #20]
  }
}
    1f88:	f107 070c 	add.w	r7, r7, #12
    1f8c:	46bd      	mov	sp, r7
    1f8e:	bc80      	pop	{r7}
    1f90:	4770      	bx	lr
    1f92:	bf00      	nop

00001f94 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f94:	b480      	push	{r7}
    1f96:	b083      	sub	sp, #12
    1f98:	af00      	add	r7, sp, #0
    1f9a:	6078      	str	r0, [r7, #4]
    1f9c:	460b      	mov	r3, r1
    1f9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1fa0:	78fb      	ldrb	r3, [r7, #3]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d00a      	beq.n	1fbc <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1fa6:	687b      	ldr	r3, [r7, #4]
    1fa8:	899b      	ldrh	r3, [r3, #12]
    1faa:	b29b      	uxth	r3, r3
    1fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1fb4:	b29a      	uxth	r2, r3
    1fb6:	687b      	ldr	r3, [r7, #4]
    1fb8:	819a      	strh	r2, [r3, #12]
    1fba:	e009      	b.n	1fd0 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	899b      	ldrh	r3, [r3, #12]
    1fc0:	b29b      	uxth	r3, r3
    1fc2:	ea4f 4343 	mov.w	r3, r3, lsl #17
    1fc6:	ea4f 4353 	mov.w	r3, r3, lsr #17
    1fca:	b29a      	uxth	r2, r3
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	819a      	strh	r2, [r3, #12]
  }
}
    1fd0:	f107 070c 	add.w	r7, r7, #12
    1fd4:	46bd      	mov	sp, r7
    1fd6:	bc80      	pop	{r7}
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1fdc:	b480      	push	{r7}
    1fde:	b083      	sub	sp, #12
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
    1fe4:	460b      	mov	r3, r1
    1fe6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1fe8:	78fb      	ldrb	r3, [r7, #3]
    1fea:	2b00      	cmp	r3, #0
    1fec:	d008      	beq.n	2000 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1fee:	687b      	ldr	r3, [r7, #4]
    1ff0:	8a9b      	ldrh	r3, [r3, #20]
    1ff2:	b29b      	uxth	r3, r3
    1ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1ff8:	b29a      	uxth	r2, r3
    1ffa:	687b      	ldr	r3, [r7, #4]
    1ffc:	829a      	strh	r2, [r3, #20]
    1ffe:	e007      	b.n	2010 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    2000:	687b      	ldr	r3, [r7, #4]
    2002:	8a9b      	ldrh	r3, [r3, #20]
    2004:	b29b      	uxth	r3, r3
    2006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    200a:	b29a      	uxth	r2, r3
    200c:	687b      	ldr	r3, [r7, #4]
    200e:	829a      	strh	r2, [r3, #20]
  }
}
    2010:	f107 070c 	add.w	r7, r7, #12
    2014:	46bd      	mov	sp, r7
    2016:	bc80      	pop	{r7}
    2018:	4770      	bx	lr
    201a:	bf00      	nop

0000201c <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    201c:	b480      	push	{r7}
    201e:	b083      	sub	sp, #12
    2020:	af00      	add	r7, sp, #0
    2022:	6078      	str	r0, [r7, #4]
    2024:	460b      	mov	r3, r1
    2026:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    2028:	687b      	ldr	r3, [r7, #4]
    202a:	8a9b      	ldrh	r3, [r3, #20]
    202c:	b29b      	uxth	r3, r3
    202e:	f023 0304 	bic.w	r3, r3, #4
    2032:	b29a      	uxth	r2, r3
    2034:	687b      	ldr	r3, [r7, #4]
    2036:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    2038:	687b      	ldr	r3, [r7, #4]
    203a:	8a9b      	ldrh	r3, [r3, #20]
    203c:	b29a      	uxth	r2, r3
    203e:	887b      	ldrh	r3, [r7, #2]
    2040:	4313      	orrs	r3, r2
    2042:	b29a      	uxth	r2, r3
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	829a      	strh	r2, [r3, #20]
}
    2048:	f107 070c 	add.w	r7, r7, #12
    204c:	46bd      	mov	sp, r7
    204e:	bc80      	pop	{r7}
    2050:	4770      	bx	lr
    2052:	bf00      	nop

00002054 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2054:	b480      	push	{r7}
    2056:	b083      	sub	sp, #12
    2058:	af00      	add	r7, sp, #0
    205a:	6078      	str	r0, [r7, #4]
    205c:	460b      	mov	r3, r1
    205e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2060:	78fb      	ldrb	r3, [r7, #3]
    2062:	2b00      	cmp	r3, #0
    2064:	d008      	beq.n	2078 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	8a9b      	ldrh	r3, [r3, #20]
    206a:	b29b      	uxth	r3, r3
    206c:	f043 0302 	orr.w	r3, r3, #2
    2070:	b29a      	uxth	r2, r3
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	829a      	strh	r2, [r3, #20]
    2076:	e007      	b.n	2088 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	8a9b      	ldrh	r3, [r3, #20]
    207c:	b29b      	uxth	r3, r3
    207e:	f023 0302 	bic.w	r3, r3, #2
    2082:	b29a      	uxth	r2, r3
    2084:	687b      	ldr	r3, [r7, #4]
    2086:	829a      	strh	r2, [r3, #20]
  }
}
    2088:	f107 070c 	add.w	r7, r7, #12
    208c:	46bd      	mov	sp, r7
    208e:	bc80      	pop	{r7}
    2090:	4770      	bx	lr
    2092:	bf00      	nop

00002094 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    2094:	b480      	push	{r7}
    2096:	b085      	sub	sp, #20
    2098:	af00      	add	r7, sp, #0
    209a:	6078      	str	r0, [r7, #4]
    209c:	460b      	mov	r3, r1
    209e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    20a0:	f04f 0300 	mov.w	r3, #0
    20a4:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	881b      	ldrh	r3, [r3, #0]
    20aa:	b29a      	uxth	r2, r3
    20ac:	887b      	ldrh	r3, [r7, #2]
    20ae:	4013      	ands	r3, r2
    20b0:	b29b      	uxth	r3, r3
    20b2:	2b00      	cmp	r3, #0
    20b4:	d003      	beq.n	20be <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
    20b6:	f04f 0301 	mov.w	r3, #1
    20ba:	73fb      	strb	r3, [r7, #15]
    20bc:	e002      	b.n	20c4 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    20be:	f04f 0300 	mov.w	r3, #0
    20c2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    20c4:	7bfb      	ldrb	r3, [r7, #15]
}
    20c6:	4618      	mov	r0, r3
    20c8:	f107 0714 	add.w	r7, r7, #20
    20cc:	46bd      	mov	sp, r7
    20ce:	bc80      	pop	{r7}
    20d0:	4770      	bx	lr
    20d2:	bf00      	nop

000020d4 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    20d4:	b480      	push	{r7}
    20d6:	b083      	sub	sp, #12
    20d8:	af00      	add	r7, sp, #0
    20da:	6078      	str	r0, [r7, #4]
    20dc:	460b      	mov	r3, r1
    20de:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    20e0:	887b      	ldrh	r3, [r7, #2]
    20e2:	ea6f 0303 	mvn.w	r3, r3
    20e6:	b29a      	uxth	r2, r3
    20e8:	687b      	ldr	r3, [r7, #4]
    20ea:	801a      	strh	r2, [r3, #0]
}
    20ec:	f107 070c 	add.w	r7, r7, #12
    20f0:	46bd      	mov	sp, r7
    20f2:	bc80      	pop	{r7}
    20f4:	4770      	bx	lr
    20f6:	bf00      	nop

000020f8 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    20f8:	b480      	push	{r7}
    20fa:	b087      	sub	sp, #28
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
    2100:	460b      	mov	r3, r1
    2102:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    2104:	f04f 0300 	mov.w	r3, #0
    2108:	60fb      	str	r3, [r7, #12]
    210a:	f04f 0300 	mov.w	r3, #0
    210e:	617b      	str	r3, [r7, #20]
    2110:	f04f 0300 	mov.w	r3, #0
    2114:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    2116:	f04f 0300 	mov.w	r3, #0
    211a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    211c:	887b      	ldrh	r3, [r7, #2]
    211e:	b2db      	uxtb	r3, r3
    2120:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2124:	b2db      	uxtb	r3, r3
    2126:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    2128:	887b      	ldrh	r3, [r7, #2]
    212a:	f003 031f 	and.w	r3, r3, #31
    212e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    2130:	697b      	ldr	r3, [r7, #20]
    2132:	f04f 0201 	mov.w	r2, #1
    2136:	fa02 f303 	lsl.w	r3, r2, r3
    213a:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    213c:	68bb      	ldr	r3, [r7, #8]
    213e:	2b01      	cmp	r3, #1
    2140:	d106      	bne.n	2150 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	899b      	ldrh	r3, [r3, #12]
    2146:	b29b      	uxth	r3, r3
    2148:	697a      	ldr	r2, [r7, #20]
    214a:	4013      	ands	r3, r2
    214c:	617b      	str	r3, [r7, #20]
    214e:	e00f      	b.n	2170 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    2150:	68bb      	ldr	r3, [r7, #8]
    2152:	2b02      	cmp	r3, #2
    2154:	d106      	bne.n	2164 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	8a1b      	ldrh	r3, [r3, #16]
    215a:	b29b      	uxth	r3, r3
    215c:	697a      	ldr	r2, [r7, #20]
    215e:	4013      	ands	r3, r2
    2160:	617b      	str	r3, [r7, #20]
    2162:	e005      	b.n	2170 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	8a9b      	ldrh	r3, [r3, #20]
    2168:	b29b      	uxth	r3, r3
    216a:	697a      	ldr	r2, [r7, #20]
    216c:	4013      	ands	r3, r2
    216e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    2170:	887b      	ldrh	r3, [r7, #2]
    2172:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2176:	b29b      	uxth	r3, r3
    2178:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    217a:	68fb      	ldr	r3, [r7, #12]
    217c:	f04f 0201 	mov.w	r2, #1
    2180:	fa02 f303 	lsl.w	r3, r2, r3
    2184:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    2186:	687b      	ldr	r3, [r7, #4]
    2188:	881b      	ldrh	r3, [r3, #0]
    218a:	b29b      	uxth	r3, r3
    218c:	68fa      	ldr	r2, [r7, #12]
    218e:	4013      	ands	r3, r2
    2190:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    2192:	697b      	ldr	r3, [r7, #20]
    2194:	2b00      	cmp	r3, #0
    2196:	d006      	beq.n	21a6 <USART_GetITStatus+0xae>
    2198:	68fb      	ldr	r3, [r7, #12]
    219a:	2b00      	cmp	r3, #0
    219c:	d003      	beq.n	21a6 <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
    219e:	f04f 0301 	mov.w	r3, #1
    21a2:	74fb      	strb	r3, [r7, #19]
    21a4:	e002      	b.n	21ac <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
    21a6:	f04f 0300 	mov.w	r3, #0
    21aa:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    21ac:	7cfb      	ldrb	r3, [r7, #19]
}
    21ae:	4618      	mov	r0, r3
    21b0:	f107 071c 	add.w	r7, r7, #28
    21b4:	46bd      	mov	sp, r7
    21b6:	bc80      	pop	{r7}
    21b8:	4770      	bx	lr
    21ba:	bf00      	nop

000021bc <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    21bc:	b480      	push	{r7}
    21be:	b085      	sub	sp, #20
    21c0:	af00      	add	r7, sp, #0
    21c2:	6078      	str	r0, [r7, #4]
    21c4:	460b      	mov	r3, r1
    21c6:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    21c8:	f04f 0300 	mov.w	r3, #0
    21cc:	81fb      	strh	r3, [r7, #14]
    21ce:	f04f 0300 	mov.w	r3, #0
    21d2:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    21d4:	887b      	ldrh	r3, [r7, #2]
    21d6:	ea4f 2313 	mov.w	r3, r3, lsr #8
    21da:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    21dc:	89fb      	ldrh	r3, [r7, #14]
    21de:	f04f 0201 	mov.w	r2, #1
    21e2:	fa02 f303 	lsl.w	r3, r2, r3
    21e6:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    21e8:	89bb      	ldrh	r3, [r7, #12]
    21ea:	ea6f 0303 	mvn.w	r3, r3
    21ee:	b29a      	uxth	r2, r3
    21f0:	687b      	ldr	r3, [r7, #4]
    21f2:	801a      	strh	r2, [r3, #0]
}
    21f4:	f107 0714 	add.w	r7, r7, #20
    21f8:	46bd      	mov	sp, r7
    21fa:	bc80      	pop	{r7}
    21fc:	4770      	bx	lr
    21fe:	bf00      	nop

00002200 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    2200:	b480      	push	{r7}
    2202:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    2204:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2208:	f2c4 0301 	movt	r3, #16385	; 0x4001
    220c:	f04f 0200 	mov.w	r2, #0
    2210:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    2212:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2216:	f2c4 0301 	movt	r3, #16385	; 0x4001
    221a:	f04f 0200 	mov.w	r2, #0
    221e:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    2220:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2224:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2228:	f04f 0200 	mov.w	r2, #0
    222c:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    222e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2232:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2236:	f04f 0200 	mov.w	r2, #0
    223a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    223c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2240:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2244:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2248:	f2c0 020f 	movt	r2, #15
    224c:	615a      	str	r2, [r3, #20]
}
    224e:	46bd      	mov	sp, r7
    2250:	bc80      	pop	{r7}
    2252:	4770      	bx	lr

00002254 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2254:	b480      	push	{r7}
    2256:	b085      	sub	sp, #20
    2258:	af00      	add	r7, sp, #0
    225a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    225c:	f04f 0300 	mov.w	r3, #0
    2260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    2262:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2266:	f2c4 0301 	movt	r3, #16385	; 0x4001
    226a:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	799b      	ldrb	r3, [r3, #6]
    2270:	2b00      	cmp	r3, #0
    2272:	d078      	beq.n	2366 <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    2274:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2278:	f2c4 0301 	movt	r3, #16385	; 0x4001
    227c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2280:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2284:	6811      	ldr	r1, [r2, #0]
    2286:	687a      	ldr	r2, [r7, #4]
    2288:	6812      	ldr	r2, [r2, #0]
    228a:	ea6f 0202 	mvn.w	r2, r2
    228e:	400a      	ands	r2, r1
    2290:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2292:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2296:	f2c4 0301 	movt	r3, #16385	; 0x4001
    229a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    229e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    22a2:	6851      	ldr	r1, [r2, #4]
    22a4:	687a      	ldr	r2, [r7, #4]
    22a6:	6812      	ldr	r2, [r2, #0]
    22a8:	ea6f 0202 	mvn.w	r2, r2
    22ac:	400a      	ands	r2, r1
    22ae:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    22b0:	687b      	ldr	r3, [r7, #4]
    22b2:	791b      	ldrb	r3, [r3, #4]
    22b4:	68fa      	ldr	r2, [r7, #12]
    22b6:	18d3      	adds	r3, r2, r3
    22b8:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    22ba:	68fb      	ldr	r3, [r7, #12]
    22bc:	68fa      	ldr	r2, [r7, #12]
    22be:	6811      	ldr	r1, [r2, #0]
    22c0:	687a      	ldr	r2, [r7, #4]
    22c2:	6812      	ldr	r2, [r2, #0]
    22c4:	430a      	orrs	r2, r1
    22c6:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    22c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    22cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    22d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    22d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    22d8:	6891      	ldr	r1, [r2, #8]
    22da:	687a      	ldr	r2, [r7, #4]
    22dc:	6812      	ldr	r2, [r2, #0]
    22de:	ea6f 0202 	mvn.w	r2, r2
    22e2:	400a      	ands	r2, r1
    22e4:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    22e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    22ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
    22ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    22f2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    22f6:	68d1      	ldr	r1, [r2, #12]
    22f8:	687a      	ldr	r2, [r7, #4]
    22fa:	6812      	ldr	r2, [r2, #0]
    22fc:	ea6f 0202 	mvn.w	r2, r2
    2300:	400a      	ands	r2, r1
    2302:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2304:	687b      	ldr	r3, [r7, #4]
    2306:	795b      	ldrb	r3, [r3, #5]
    2308:	2b10      	cmp	r3, #16
    230a:	d11a      	bne.n	2342 <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    230c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2310:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2314:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2318:	f2c4 0201 	movt	r2, #16385	; 0x4001
    231c:	6891      	ldr	r1, [r2, #8]
    231e:	687a      	ldr	r2, [r7, #4]
    2320:	6812      	ldr	r2, [r2, #0]
    2322:	430a      	orrs	r2, r1
    2324:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    2326:	f44f 6380 	mov.w	r3, #1024	; 0x400
    232a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    232e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2332:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2336:	68d1      	ldr	r1, [r2, #12]
    2338:	687a      	ldr	r2, [r7, #4]
    233a:	6812      	ldr	r2, [r2, #0]
    233c:	430a      	orrs	r2, r1
    233e:	60da      	str	r2, [r3, #12]
    2340:	e01f      	b.n	2382 <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    2342:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2346:	f2c4 0301 	movt	r3, #16385	; 0x4001
    234a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    234c:	687b      	ldr	r3, [r7, #4]
    234e:	795b      	ldrb	r3, [r3, #5]
    2350:	68fa      	ldr	r2, [r7, #12]
    2352:	18d3      	adds	r3, r2, r3
    2354:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    2356:	68fb      	ldr	r3, [r7, #12]
    2358:	68fa      	ldr	r2, [r7, #12]
    235a:	6811      	ldr	r1, [r2, #0]
    235c:	687a      	ldr	r2, [r7, #4]
    235e:	6812      	ldr	r2, [r2, #0]
    2360:	430a      	orrs	r2, r1
    2362:	601a      	str	r2, [r3, #0]
    2364:	e00d      	b.n	2382 <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	791b      	ldrb	r3, [r3, #4]
    236a:	68fa      	ldr	r2, [r7, #12]
    236c:	18d3      	adds	r3, r2, r3
    236e:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    2370:	68fb      	ldr	r3, [r7, #12]
    2372:	68fa      	ldr	r2, [r7, #12]
    2374:	6811      	ldr	r1, [r2, #0]
    2376:	687a      	ldr	r2, [r7, #4]
    2378:	6812      	ldr	r2, [r2, #0]
    237a:	ea6f 0202 	mvn.w	r2, r2
    237e:	400a      	ands	r2, r1
    2380:	601a      	str	r2, [r3, #0]
  }
}
    2382:	f107 0714 	add.w	r7, r7, #20
    2386:	46bd      	mov	sp, r7
    2388:	bc80      	pop	{r7}
    238a:	4770      	bx	lr

0000238c <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    238c:	b480      	push	{r7}
    238e:	b083      	sub	sp, #12
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	f04f 0200 	mov.w	r2, #0
    239a:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	f04f 0200 	mov.w	r2, #0
    23a2:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	f04f 020c 	mov.w	r2, #12
    23aa:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	f04f 0200 	mov.w	r2, #0
    23b2:	719a      	strb	r2, [r3, #6]
}
    23b4:	f107 070c 	add.w	r7, r7, #12
    23b8:	46bd      	mov	sp, r7
    23ba:	bc80      	pop	{r7}
    23bc:	4770      	bx	lr
    23be:	bf00      	nop

000023c0 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    23c0:	b480      	push	{r7}
    23c2:	b083      	sub	sp, #12
    23c4:	af00      	add	r7, sp, #0
    23c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    23c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    23d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    23d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    23d8:	6911      	ldr	r1, [r2, #16]
    23da:	687a      	ldr	r2, [r7, #4]
    23dc:	430a      	orrs	r2, r1
    23de:	611a      	str	r2, [r3, #16]
}
    23e0:	f107 070c 	add.w	r7, r7, #12
    23e4:	46bd      	mov	sp, r7
    23e6:	bc80      	pop	{r7}
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    23ec:	b480      	push	{r7}
    23ee:	b085      	sub	sp, #20
    23f0:	af00      	add	r7, sp, #0
    23f2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    23f4:	f04f 0300 	mov.w	r3, #0
    23f8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    23fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2402:	695a      	ldr	r2, [r3, #20]
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	4013      	ands	r3, r2
    2408:	2b00      	cmp	r3, #0
    240a:	d003      	beq.n	2414 <EXTI_GetFlagStatus+0x28>
  {
    bitstatus = SET;
    240c:	f04f 0301 	mov.w	r3, #1
    2410:	73fb      	strb	r3, [r7, #15]
    2412:	e002      	b.n	241a <EXTI_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
    2414:	f04f 0300 	mov.w	r3, #0
    2418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    241a:	7bfb      	ldrb	r3, [r7, #15]
}
    241c:	4618      	mov	r0, r3
    241e:	f107 0714 	add.w	r7, r7, #20
    2422:	46bd      	mov	sp, r7
    2424:	bc80      	pop	{r7}
    2426:	4770      	bx	lr

00002428 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2428:	b480      	push	{r7}
    242a:	b083      	sub	sp, #12
    242c:	af00      	add	r7, sp, #0
    242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2430:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2434:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2438:	687a      	ldr	r2, [r7, #4]
    243a:	615a      	str	r2, [r3, #20]
}
    243c:	f107 070c 	add.w	r7, r7, #12
    2440:	46bd      	mov	sp, r7
    2442:	bc80      	pop	{r7}
    2444:	4770      	bx	lr
    2446:	bf00      	nop

00002448 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    2448:	b480      	push	{r7}
    244a:	b085      	sub	sp, #20
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    2450:	f04f 0300 	mov.w	r3, #0
    2454:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    2456:	f04f 0300 	mov.w	r3, #0
    245a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    245c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2460:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2464:	681a      	ldr	r2, [r3, #0]
    2466:	687b      	ldr	r3, [r7, #4]
    2468:	4013      	ands	r3, r2
    246a:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    246c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2470:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2474:	695a      	ldr	r2, [r3, #20]
    2476:	687b      	ldr	r3, [r7, #4]
    2478:	4013      	ands	r3, r2
    247a:	2b00      	cmp	r3, #0
    247c:	d006      	beq.n	248c <EXTI_GetITStatus+0x44>
    247e:	68bb      	ldr	r3, [r7, #8]
    2480:	2b00      	cmp	r3, #0
    2482:	d003      	beq.n	248c <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
    2484:	f04f 0301 	mov.w	r3, #1
    2488:	73fb      	strb	r3, [r7, #15]
    248a:	e002      	b.n	2492 <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
    248c:	f04f 0300 	mov.w	r3, #0
    2490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2492:	7bfb      	ldrb	r3, [r7, #15]
}
    2494:	4618      	mov	r0, r3
    2496:	f107 0714 	add.w	r7, r7, #20
    249a:	46bd      	mov	sp, r7
    249c:	bc80      	pop	{r7}
    249e:	4770      	bx	lr

000024a0 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    24a0:	b480      	push	{r7}
    24a2:	b083      	sub	sp, #12
    24a4:	af00      	add	r7, sp, #0
    24a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    24a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    24ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    24b0:	687a      	ldr	r2, [r7, #4]
    24b2:	615a      	str	r2, [r3, #20]
}
    24b4:	f107 070c 	add.w	r7, r7, #12
    24b8:	46bd      	mov	sp, r7
    24ba:	bc80      	pop	{r7}
    24bc:	4770      	bx	lr
    24be:	bf00      	nop

000024c0 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    24c0:	b480      	push	{r7}
    24c2:	b083      	sub	sp, #12
    24c4:	af00      	add	r7, sp, #0
    24c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    24c8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    24cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    24d0:	687a      	ldr	r2, [r7, #4]
    24d2:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
    24d6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    24da:	60da      	str	r2, [r3, #12]
}
    24dc:	f107 070c 	add.w	r7, r7, #12
    24e0:	46bd      	mov	sp, r7
    24e2:	bc80      	pop	{r7}
    24e4:	4770      	bx	lr
    24e6:	bf00      	nop

000024e8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    24e8:	b480      	push	{r7}
    24ea:	b087      	sub	sp, #28
    24ec:	af00      	add	r7, sp, #0
    24ee:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    24f0:	f04f 0300 	mov.w	r3, #0
    24f4:	617b      	str	r3, [r7, #20]
    24f6:	f04f 0300 	mov.w	r3, #0
    24fa:	613b      	str	r3, [r7, #16]
    24fc:	f04f 030f 	mov.w	r3, #15
    2500:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2502:	687b      	ldr	r3, [r7, #4]
    2504:	78db      	ldrb	r3, [r3, #3]
    2506:	2b00      	cmp	r3, #0
    2508:	d047      	beq.n	259a <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    250a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    250e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2512:	68db      	ldr	r3, [r3, #12]
    2514:	ea6f 0303 	mvn.w	r3, r3
    2518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    251c:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2520:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2522:	697b      	ldr	r3, [r7, #20]
    2524:	f1c3 0304 	rsb	r3, r3, #4
    2528:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    252a:	697b      	ldr	r3, [r7, #20]
    252c:	68fa      	ldr	r2, [r7, #12]
    252e:	fa22 f303 	lsr.w	r3, r2, r3
    2532:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2534:	687b      	ldr	r3, [r7, #4]
    2536:	785b      	ldrb	r3, [r3, #1]
    2538:	461a      	mov	r2, r3
    253a:	693b      	ldr	r3, [r7, #16]
    253c:	fa02 f303 	lsl.w	r3, r2, r3
    2540:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    2542:	687b      	ldr	r3, [r7, #4]
    2544:	789b      	ldrb	r3, [r3, #2]
    2546:	461a      	mov	r2, r3
    2548:	68fb      	ldr	r3, [r7, #12]
    254a:	4013      	ands	r3, r2
    254c:	697a      	ldr	r2, [r7, #20]
    254e:	4313      	orrs	r3, r2
    2550:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    2552:	697b      	ldr	r3, [r7, #20]
    2554:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2558:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    255a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    255e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2562:	687a      	ldr	r2, [r7, #4]
    2564:	7812      	ldrb	r2, [r2, #0]
    2566:	4611      	mov	r1, r2
    2568:	697a      	ldr	r2, [r7, #20]
    256a:	b2d2      	uxtb	r2, r2
    256c:	185b      	adds	r3, r3, r1
    256e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2572:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    2576:	f2ce 0300 	movt	r3, #57344	; 0xe000
    257a:	687a      	ldr	r2, [r7, #4]
    257c:	7812      	ldrb	r2, [r2, #0]
    257e:	ea4f 1252 	mov.w	r2, r2, lsr #5
    2582:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2584:	6879      	ldr	r1, [r7, #4]
    2586:	7809      	ldrb	r1, [r1, #0]
    2588:	f001 011f 	and.w	r1, r1, #31
    258c:	f04f 0001 	mov.w	r0, #1
    2590:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2598:	e014      	b.n	25c4 <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    259a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    259e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    25a2:	687a      	ldr	r2, [r7, #4]
    25a4:	7812      	ldrb	r2, [r2, #0]
    25a6:	ea4f 1252 	mov.w	r2, r2, lsr #5
    25aa:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    25ac:	6879      	ldr	r1, [r7, #4]
    25ae:	7809      	ldrb	r1, [r1, #0]
    25b0:	f001 011f 	and.w	r1, r1, #31
    25b4:	f04f 0001 	mov.w	r0, #1
    25b8:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    25bc:	f102 0220 	add.w	r2, r2, #32
    25c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    25c4:	f107 071c 	add.w	r7, r7, #28
    25c8:	46bd      	mov	sp, r7
    25ca:	bc80      	pop	{r7}
    25cc:	4770      	bx	lr
    25ce:	bf00      	nop

000025d0 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    25d0:	b480      	push	{r7}
    25d2:	b083      	sub	sp, #12
    25d4:	af00      	add	r7, sp, #0
    25d6:	6078      	str	r0, [r7, #4]
    25d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    25da:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    25de:	f2ce 0300 	movt	r3, #57344	; 0xe000
    25e2:	683a      	ldr	r2, [r7, #0]
    25e4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    25e8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    25ec:	6879      	ldr	r1, [r7, #4]
    25ee:	430a      	orrs	r2, r1
    25f0:	609a      	str	r2, [r3, #8]
}
    25f2:	f107 070c 	add.w	r7, r7, #12
    25f6:	46bd      	mov	sp, r7
    25f8:	bc80      	pop	{r7}
    25fa:	4770      	bx	lr

000025fc <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    25fc:	b480      	push	{r7}
    25fe:	b083      	sub	sp, #12
    2600:	af00      	add	r7, sp, #0
    2602:	4602      	mov	r2, r0
    2604:	460b      	mov	r3, r1
    2606:	71fa      	strb	r2, [r7, #7]
    2608:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    260a:	79bb      	ldrb	r3, [r7, #6]
    260c:	2b00      	cmp	r3, #0
    260e:	d00c      	beq.n	262a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2610:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2614:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2618:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    261c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2620:	6911      	ldr	r1, [r2, #16]
    2622:	79fa      	ldrb	r2, [r7, #7]
    2624:	430a      	orrs	r2, r1
    2626:	611a      	str	r2, [r3, #16]
    2628:	e00d      	b.n	2646 <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    262a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    262e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2632:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2636:	f2ce 0200 	movt	r2, #57344	; 0xe000
    263a:	6911      	ldr	r1, [r2, #16]
    263c:	79fa      	ldrb	r2, [r7, #7]
    263e:	ea6f 0202 	mvn.w	r2, r2
    2642:	400a      	ands	r2, r1
    2644:	611a      	str	r2, [r3, #16]
  }
}
    2646:	f107 070c 	add.w	r7, r7, #12
    264a:	46bd      	mov	sp, r7
    264c:	bc80      	pop	{r7}
    264e:	4770      	bx	lr

00002650 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    2650:	b480      	push	{r7}
    2652:	b083      	sub	sp, #12
    2654:	af00      	add	r7, sp, #0
    2656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    2658:	687b      	ldr	r3, [r7, #4]
    265a:	2b04      	cmp	r3, #4
    265c:	d10c      	bne.n	2678 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    265e:	f24e 0310 	movw	r3, #57360	; 0xe010
    2662:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2666:	f24e 0210 	movw	r2, #57360	; 0xe010
    266a:	f2ce 0200 	movt	r2, #57344	; 0xe000
    266e:	6812      	ldr	r2, [r2, #0]
    2670:	f042 0204 	orr.w	r2, r2, #4
    2674:	601a      	str	r2, [r3, #0]
    2676:	e00b      	b.n	2690 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    2678:	f24e 0310 	movw	r3, #57360	; 0xe010
    267c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2680:	f24e 0210 	movw	r2, #57360	; 0xe010
    2684:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2688:	6812      	ldr	r2, [r2, #0]
    268a:	f022 0204 	bic.w	r2, r2, #4
    268e:	601a      	str	r2, [r3, #0]
  }
}
    2690:	f107 070c 	add.w	r7, r7, #12
    2694:	46bd      	mov	sp, r7
    2696:	bc80      	pop	{r7}
    2698:	4770      	bx	lr
    269a:	bf00      	nop

0000269c <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    269c:	b580      	push	{r7, lr}
    269e:	b086      	sub	sp, #24
    26a0:	af00      	add	r7, sp, #0
    26a2:	60f8      	str	r0, [r7, #12]
    26a4:	60b9      	str	r1, [r7, #8]
    26a6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    26a8:	f04f 0038 	mov.w	r0, #56	; 0x38
    26ac:	f002 fbc4 	bl	4e38 <pvPortMalloc>
    26b0:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    26b2:	693b      	ldr	r3, [r7, #16]
    26b4:	2b00      	cmp	r3, #0
    26b6:	d061      	beq.n	277c <xCoRoutineCreate+0xe0>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    26b8:	f240 03ac 	movw	r3, #172	; 0xac
    26bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26c0:	681b      	ldr	r3, [r3, #0]
    26c2:	2b00      	cmp	r3, #0
    26c4:	d107      	bne.n	26d6 <xCoRoutineCreate+0x3a>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    26c6:	f240 03ac 	movw	r3, #172	; 0xac
    26ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ce:	693a      	ldr	r2, [r7, #16]
    26d0:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    26d2:	f000 fa35 	bl	2b40 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    26d6:	68bb      	ldr	r3, [r7, #8]
    26d8:	2b01      	cmp	r3, #1
    26da:	d902      	bls.n	26e2 <xCoRoutineCreate+0x46>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    26dc:	f04f 0301 	mov.w	r3, #1
    26e0:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    26e2:	693b      	ldr	r3, [r7, #16]
    26e4:	f04f 0200 	mov.w	r2, #0
    26e8:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    26ea:	693b      	ldr	r3, [r7, #16]
    26ec:	68ba      	ldr	r2, [r7, #8]
    26ee:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    26f0:	693b      	ldr	r3, [r7, #16]
    26f2:	687a      	ldr	r2, [r7, #4]
    26f4:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    26f6:	693b      	ldr	r3, [r7, #16]
    26f8:	68fa      	ldr	r2, [r7, #12]
    26fa:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    26fc:	693b      	ldr	r3, [r7, #16]
    26fe:	f103 0304 	add.w	r3, r3, #4
    2702:	4618      	mov	r0, r3
    2704:	f000 fab2 	bl	2c6c <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2708:	693b      	ldr	r3, [r7, #16]
    270a:	f103 0318 	add.w	r3, r3, #24
    270e:	4618      	mov	r0, r3
    2710:	f000 faac 	bl	2c6c <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    2714:	693b      	ldr	r3, [r7, #16]
    2716:	693a      	ldr	r2, [r7, #16]
    2718:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    271a:	693b      	ldr	r3, [r7, #16]
    271c:	693a      	ldr	r2, [r7, #16]
    271e:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2720:	68bb      	ldr	r3, [r7, #8]
    2722:	f1c3 0205 	rsb	r2, r3, #5
    2726:	693b      	ldr	r3, [r7, #16]
    2728:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    272a:	693b      	ldr	r3, [r7, #16]
    272c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    272e:	f240 03b0 	movw	r3, #176	; 0xb0
    2732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2736:	681b      	ldr	r3, [r3, #0]
    2738:	429a      	cmp	r2, r3
    273a:	d906      	bls.n	274a <xCoRoutineCreate+0xae>
    273c:	693b      	ldr	r3, [r7, #16]
    273e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2740:	f240 03b0 	movw	r3, #176	; 0xb0
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	601a      	str	r2, [r3, #0]
    274a:	693b      	ldr	r3, [r7, #16]
    274c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    274e:	4613      	mov	r3, r2
    2750:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2754:	189b      	adds	r3, r3, r2
    2756:	ea4f 0383 	mov.w	r3, r3, lsl #2
    275a:	461a      	mov	r2, r3
    275c:	f240 0340 	movw	r3, #64	; 0x40
    2760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2764:	18d2      	adds	r2, r2, r3
    2766:	693b      	ldr	r3, [r7, #16]
    2768:	f103 0304 	add.w	r3, r3, #4
    276c:	4610      	mov	r0, r2
    276e:	4619      	mov	r1, r3
    2770:	f000 fa8a 	bl	2c88 <vListInsertEnd>

		xReturn = pdPASS;
    2774:	f04f 0301 	mov.w	r3, #1
    2778:	617b      	str	r3, [r7, #20]
    277a:	e002      	b.n	2782 <xCoRoutineCreate+0xe6>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    277c:	f04f 33ff 	mov.w	r3, #4294967295
    2780:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    2782:	697b      	ldr	r3, [r7, #20]
}
    2784:	4618      	mov	r0, r3
    2786:	f107 0718 	add.w	r7, r7, #24
    278a:	46bd      	mov	sp, r7
    278c:	bd80      	pop	{r7, pc}
    278e:	bf00      	nop

00002790 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    2790:	b580      	push	{r7, lr}
    2792:	b084      	sub	sp, #16
    2794:	af00      	add	r7, sp, #0
    2796:	6078      	str	r0, [r7, #4]
    2798:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    279a:	f240 03b4 	movw	r3, #180	; 0xb4
    279e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27a2:	681a      	ldr	r2, [r3, #0]
    27a4:	687b      	ldr	r3, [r7, #4]
    27a6:	18d3      	adds	r3, r2, r3
    27a8:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    27aa:	f240 03ac 	movw	r3, #172	; 0xac
    27ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27b2:	681b      	ldr	r3, [r3, #0]
    27b4:	f103 0304 	add.w	r3, r3, #4
    27b8:	4618      	mov	r0, r3
    27ba:	f000 fac7 	bl	2d4c <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    27be:	f240 03ac 	movw	r3, #172	; 0xac
    27c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27c6:	681b      	ldr	r3, [r3, #0]
    27c8:	68fa      	ldr	r2, [r7, #12]
    27ca:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    27cc:	f240 03b4 	movw	r3, #180	; 0xb4
    27d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27d4:	681b      	ldr	r3, [r3, #0]
    27d6:	68fa      	ldr	r2, [r7, #12]
    27d8:	429a      	cmp	r2, r3
    27da:	d210      	bcs.n	27fe <vCoRoutineAddToDelayedList+0x6e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    27dc:	f240 0394 	movw	r3, #148	; 0x94
    27e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27e4:	681a      	ldr	r2, [r3, #0]
    27e6:	f240 03ac 	movw	r3, #172	; 0xac
    27ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27ee:	681b      	ldr	r3, [r3, #0]
    27f0:	f103 0304 	add.w	r3, r3, #4
    27f4:	4610      	mov	r0, r2
    27f6:	4619      	mov	r1, r3
    27f8:	f000 fa6e 	bl	2cd8 <vListInsert>
    27fc:	e00f      	b.n	281e <vCoRoutineAddToDelayedList+0x8e>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    27fe:	f240 0390 	movw	r3, #144	; 0x90
    2802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2806:	681a      	ldr	r2, [r3, #0]
    2808:	f240 03ac 	movw	r3, #172	; 0xac
    280c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2810:	681b      	ldr	r3, [r3, #0]
    2812:	f103 0304 	add.w	r3, r3, #4
    2816:	4610      	mov	r0, r2
    2818:	4619      	mov	r1, r3
    281a:	f000 fa5d 	bl	2cd8 <vListInsert>
	}

	if( pxEventList )
    281e:	683b      	ldr	r3, [r7, #0]
    2820:	2b00      	cmp	r3, #0
    2822:	d00a      	beq.n	283a <vCoRoutineAddToDelayedList+0xaa>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2824:	f240 03ac 	movw	r3, #172	; 0xac
    2828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    282c:	681b      	ldr	r3, [r3, #0]
    282e:	f103 0318 	add.w	r3, r3, #24
    2832:	6838      	ldr	r0, [r7, #0]
    2834:	4619      	mov	r1, r3
    2836:	f000 fa4f 	bl	2cd8 <vListInsert>
	}
}
    283a:	f107 0710 	add.w	r7, r7, #16
    283e:	46bd      	mov	sp, r7
    2840:	bd80      	pop	{r7, pc}
    2842:	bf00      	nop

00002844 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2844:	b580      	push	{r7, lr}
    2846:	b082      	sub	sp, #8
    2848:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    284a:	e03f      	b.n	28cc <prvCheckPendingReadyList+0x88>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    284c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2850:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2854:	f240 0398 	movw	r3, #152	; 0x98
    2858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    285c:	68db      	ldr	r3, [r3, #12]
    285e:	68db      	ldr	r3, [r3, #12]
    2860:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2862:	687b      	ldr	r3, [r7, #4]
    2864:	f103 0318 	add.w	r3, r3, #24
    2868:	4618      	mov	r0, r3
    286a:	f000 fa6f 	bl	2d4c <vListRemove>
		}
		portENABLE_INTERRUPTS();
    286e:	f04f 0000 	mov.w	r0, #0
    2872:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	f103 0304 	add.w	r3, r3, #4
    287c:	4618      	mov	r0, r3
    287e:	f000 fa65 	bl	2d4c <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    2882:	687b      	ldr	r3, [r7, #4]
    2884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2886:	f240 03b0 	movw	r3, #176	; 0xb0
    288a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    288e:	681b      	ldr	r3, [r3, #0]
    2890:	429a      	cmp	r2, r3
    2892:	d906      	bls.n	28a2 <prvCheckPendingReadyList+0x5e>
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2898:	f240 03b0 	movw	r3, #176	; 0xb0
    289c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a0:	601a      	str	r2, [r3, #0]
    28a2:	687b      	ldr	r3, [r7, #4]
    28a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28a6:	4613      	mov	r3, r2
    28a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    28ac:	189b      	adds	r3, r3, r2
    28ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    28b2:	461a      	mov	r2, r3
    28b4:	f240 0340 	movw	r3, #64	; 0x40
    28b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28bc:	18d2      	adds	r2, r2, r3
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	f103 0304 	add.w	r3, r3, #4
    28c4:	4610      	mov	r0, r2
    28c6:	4619      	mov	r1, r3
    28c8:	f000 f9de 	bl	2c88 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    28cc:	f240 0398 	movw	r3, #152	; 0x98
    28d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28d4:	681b      	ldr	r3, [r3, #0]
    28d6:	2b00      	cmp	r3, #0
    28d8:	d1b8      	bne.n	284c <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    28da:	f107 0708 	add.w	r7, r7, #8
    28de:	46bd      	mov	sp, r7
    28e0:	bd80      	pop	{r7, pc}
    28e2:	bf00      	nop

000028e4 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    28e4:	b580      	push	{r7, lr}
    28e6:	b082      	sub	sp, #8
    28e8:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    28ea:	f001 fb8d 	bl	4008 <xTaskGetTickCount>
    28ee:	4602      	mov	r2, r0
    28f0:	f240 03b8 	movw	r3, #184	; 0xb8
    28f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28f8:	681b      	ldr	r3, [r3, #0]
    28fa:	1ad2      	subs	r2, r2, r3
    28fc:	f240 03bc 	movw	r3, #188	; 0xbc
    2900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2904:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2906:	e08f      	b.n	2a28 <prvCheckDelayedList+0x144>
	{
		xCoRoutineTickCount++;
    2908:	f240 03b4 	movw	r3, #180	; 0xb4
    290c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2910:	681b      	ldr	r3, [r3, #0]
    2912:	f103 0201 	add.w	r2, r3, #1
    2916:	f240 03b4 	movw	r3, #180	; 0xb4
    291a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    291e:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    2920:	f240 03bc 	movw	r3, #188	; 0xbc
    2924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2928:	681b      	ldr	r3, [r3, #0]
    292a:	f103 32ff 	add.w	r2, r3, #4294967295
    292e:	f240 03bc 	movw	r3, #188	; 0xbc
    2932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2936:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2938:	f240 03b4 	movw	r3, #180	; 0xb4
    293c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2940:	681b      	ldr	r3, [r3, #0]
    2942:	2b00      	cmp	r3, #0
    2944:	d165      	bne.n	2a12 <prvCheckDelayedList+0x12e>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    2946:	f240 0390 	movw	r3, #144	; 0x90
    294a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    294e:	681b      	ldr	r3, [r3, #0]
    2950:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    2952:	f240 0394 	movw	r3, #148	; 0x94
    2956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    295a:	681a      	ldr	r2, [r3, #0]
    295c:	f240 0390 	movw	r3, #144	; 0x90
    2960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2964:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    2966:	f240 0394 	movw	r3, #148	; 0x94
    296a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    296e:	687a      	ldr	r2, [r7, #4]
    2970:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2972:	e04e      	b.n	2a12 <prvCheckDelayedList+0x12e>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    2974:	f240 0390 	movw	r3, #144	; 0x90
    2978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    297c:	681b      	ldr	r3, [r3, #0]
    297e:	68db      	ldr	r3, [r3, #12]
    2980:	68db      	ldr	r3, [r3, #12]
    2982:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    2984:	683b      	ldr	r3, [r7, #0]
    2986:	685a      	ldr	r2, [r3, #4]
    2988:	f240 03b4 	movw	r3, #180	; 0xb4
    298c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2990:	681b      	ldr	r3, [r3, #0]
    2992:	429a      	cmp	r2, r3
    2994:	d847      	bhi.n	2a26 <prvCheckDelayedList+0x142>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    2996:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    299a:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    299e:	683b      	ldr	r3, [r7, #0]
    29a0:	f103 0304 	add.w	r3, r3, #4
    29a4:	4618      	mov	r0, r3
    29a6:	f000 f9d1 	bl	2d4c <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    29aa:	683b      	ldr	r3, [r7, #0]
    29ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29ae:	2b00      	cmp	r3, #0
    29b0:	d005      	beq.n	29be <prvCheckDelayedList+0xda>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    29b2:	683b      	ldr	r3, [r7, #0]
    29b4:	f103 0318 	add.w	r3, r3, #24
    29b8:	4618      	mov	r0, r3
    29ba:	f000 f9c7 	bl	2d4c <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    29be:	f04f 0000 	mov.w	r0, #0
    29c2:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    29c6:	683b      	ldr	r3, [r7, #0]
    29c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29ca:	f240 03b0 	movw	r3, #176	; 0xb0
    29ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29d2:	681b      	ldr	r3, [r3, #0]
    29d4:	429a      	cmp	r2, r3
    29d6:	d906      	bls.n	29e6 <prvCheckDelayedList+0x102>
    29d8:	683b      	ldr	r3, [r7, #0]
    29da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29dc:	f240 03b0 	movw	r3, #176	; 0xb0
    29e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29e4:	601a      	str	r2, [r3, #0]
    29e6:	683b      	ldr	r3, [r7, #0]
    29e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29ea:	4613      	mov	r3, r2
    29ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    29f0:	189b      	adds	r3, r3, r2
    29f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    29f6:	461a      	mov	r2, r3
    29f8:	f240 0340 	movw	r3, #64	; 0x40
    29fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a00:	18d2      	adds	r2, r2, r3
    2a02:	683b      	ldr	r3, [r7, #0]
    2a04:	f103 0304 	add.w	r3, r3, #4
    2a08:	4610      	mov	r0, r2
    2a0a:	4619      	mov	r1, r3
    2a0c:	f000 f93c 	bl	2c88 <vListInsertEnd>
    2a10:	e000      	b.n	2a14 <prvCheckDelayedList+0x130>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2a12:	bf00      	nop
    2a14:	f240 0390 	movw	r3, #144	; 0x90
    2a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	681b      	ldr	r3, [r3, #0]
    2a20:	2b00      	cmp	r3, #0
    2a22:	d1a7      	bne.n	2974 <prvCheckDelayedList+0x90>
    2a24:	e000      	b.n	2a28 <prvCheckDelayedList+0x144>
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
			{			
				/* Timeout not yet expired. */																			
				break;																				
    2a26:	bf00      	nop
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2a28:	f240 03bc 	movw	r3, #188	; 0xbc
    2a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a30:	681b      	ldr	r3, [r3, #0]
    2a32:	2b00      	cmp	r3, #0
    2a34:	f47f af68 	bne.w	2908 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2a38:	f240 03b4 	movw	r3, #180	; 0xb4
    2a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a40:	681a      	ldr	r2, [r3, #0]
    2a42:	f240 03b8 	movw	r3, #184	; 0xb8
    2a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a4a:	601a      	str	r2, [r3, #0]
}
    2a4c:	f107 0708 	add.w	r7, r7, #8
    2a50:	46bd      	mov	sp, r7
    2a52:	bd80      	pop	{r7, pc}

00002a54 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    2a54:	b580      	push	{r7, lr}
    2a56:	b082      	sub	sp, #8
    2a58:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2a5a:	f7ff fef3 	bl	2844 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2a5e:	f7ff ff41 	bl	28e4 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2a62:	e012      	b.n	2a8a <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    2a64:	f240 03b0 	movw	r3, #176	; 0xb0
    2a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a6c:	681b      	ldr	r3, [r3, #0]
    2a6e:	2b00      	cmp	r3, #0
    2a70:	d060      	beq.n	2b34 <vCoRoutineSchedule+0xe0>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    2a72:	f240 03b0 	movw	r3, #176	; 0xb0
    2a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7a:	681b      	ldr	r3, [r3, #0]
    2a7c:	f103 32ff 	add.w	r2, r3, #4294967295
    2a80:	f240 03b0 	movw	r3, #176	; 0xb0
    2a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a88:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2a8a:	f240 03b0 	movw	r3, #176	; 0xb0
    2a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a92:	681a      	ldr	r2, [r3, #0]
    2a94:	4613      	mov	r3, r2
    2a96:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2a9a:	189b      	adds	r3, r3, r2
    2a9c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2aa0:	461a      	mov	r2, r3
    2aa2:	f240 0340 	movw	r3, #64	; 0x40
    2aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2aaa:	18d3      	adds	r3, r2, r3
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	2b00      	cmp	r3, #0
    2ab0:	d0d8      	beq.n	2a64 <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    2ab2:	f240 03b0 	movw	r3, #176	; 0xb0
    2ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2aba:	681a      	ldr	r2, [r3, #0]
    2abc:	4613      	mov	r3, r2
    2abe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ac2:	189b      	adds	r3, r3, r2
    2ac4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ac8:	461a      	mov	r2, r3
    2aca:	f240 0340 	movw	r3, #64	; 0x40
    2ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ad2:	18d3      	adds	r3, r2, r3
    2ad4:	607b      	str	r3, [r7, #4]
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	685b      	ldr	r3, [r3, #4]
    2ada:	685a      	ldr	r2, [r3, #4]
    2adc:	687b      	ldr	r3, [r7, #4]
    2ade:	605a      	str	r2, [r3, #4]
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	685a      	ldr	r2, [r3, #4]
    2ae4:	687b      	ldr	r3, [r7, #4]
    2ae6:	f103 0308 	add.w	r3, r3, #8
    2aea:	429a      	cmp	r2, r3
    2aec:	d104      	bne.n	2af8 <vCoRoutineSchedule+0xa4>
    2aee:	687b      	ldr	r3, [r7, #4]
    2af0:	685b      	ldr	r3, [r3, #4]
    2af2:	685a      	ldr	r2, [r3, #4]
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	605a      	str	r2, [r3, #4]
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	685b      	ldr	r3, [r3, #4]
    2afc:	68da      	ldr	r2, [r3, #12]
    2afe:	f240 03ac 	movw	r3, #172	; 0xac
    2b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b06:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2b08:	f240 03ac 	movw	r3, #172	; 0xac
    2b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b10:	681b      	ldr	r3, [r3, #0]
    2b12:	681a      	ldr	r2, [r3, #0]
    2b14:	f240 03ac 	movw	r3, #172	; 0xac
    2b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b1c:	6819      	ldr	r1, [r3, #0]
    2b1e:	f240 03ac 	movw	r3, #172	; 0xac
    2b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b26:	681b      	ldr	r3, [r3, #0]
    2b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b2a:	4608      	mov	r0, r1
    2b2c:	4619      	mov	r1, r3
    2b2e:	4790      	blx	r2

	return;
    2b30:	bf00      	nop
    2b32:	e000      	b.n	2b36 <vCoRoutineSchedule+0xe2>
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
		{
			/* No more co-routines to check. */
			return;
    2b34:	bf00      	nop

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );

	return;
}
    2b36:	f107 0708 	add.w	r7, r7, #8
    2b3a:	46bd      	mov	sp, r7
    2b3c:	bd80      	pop	{r7, pc}
    2b3e:	bf00      	nop

00002b40 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2b40:	b580      	push	{r7, lr}
    2b42:	b082      	sub	sp, #8
    2b44:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2b46:	f04f 0300 	mov.w	r3, #0
    2b4a:	607b      	str	r3, [r7, #4]
    2b4c:	e013      	b.n	2b76 <prvInitialiseCoRoutineLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2b4e:	687a      	ldr	r2, [r7, #4]
    2b50:	4613      	mov	r3, r2
    2b52:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b56:	189b      	adds	r3, r3, r2
    2b58:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b5c:	461a      	mov	r2, r3
    2b5e:	f240 0340 	movw	r3, #64	; 0x40
    2b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b66:	18d3      	adds	r3, r2, r3
    2b68:	4618      	mov	r0, r3
    2b6a:	f000 f85f 	bl	2c2c <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	f103 0301 	add.w	r3, r3, #1
    2b74:	607b      	str	r3, [r7, #4]
    2b76:	687b      	ldr	r3, [r7, #4]
    2b78:	2b01      	cmp	r3, #1
    2b7a:	d9e8      	bls.n	2b4e <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2b7c:	f240 0068 	movw	r0, #104	; 0x68
    2b80:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b84:	f000 f852 	bl	2c2c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2b88:	f240 007c 	movw	r0, #124	; 0x7c
    2b8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b90:	f000 f84c 	bl	2c2c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    2b94:	f240 0098 	movw	r0, #152	; 0x98
    2b98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b9c:	f000 f846 	bl	2c2c <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    2ba0:	f240 0390 	movw	r3, #144	; 0x90
    2ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ba8:	f240 0268 	movw	r2, #104	; 0x68
    2bac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2bb0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    2bb2:	f240 0394 	movw	r3, #148	; 0x94
    2bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bba:	f240 027c 	movw	r2, #124	; 0x7c
    2bbe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2bc2:	601a      	str	r2, [r3, #0]
}
    2bc4:	f107 0708 	add.w	r7, r7, #8
    2bc8:	46bd      	mov	sp, r7
    2bca:	bd80      	pop	{r7, pc}

00002bcc <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2bcc:	b580      	push	{r7, lr}
    2bce:	b084      	sub	sp, #16
    2bd0:	af00      	add	r7, sp, #0
    2bd2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2bd4:	687b      	ldr	r3, [r7, #4]
    2bd6:	68db      	ldr	r3, [r3, #12]
    2bd8:	68db      	ldr	r3, [r3, #12]
    2bda:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2bdc:	68bb      	ldr	r3, [r7, #8]
    2bde:	f103 0318 	add.w	r3, r3, #24
    2be2:	4618      	mov	r0, r3
    2be4:	f000 f8b2 	bl	2d4c <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    2be8:	68bb      	ldr	r3, [r7, #8]
    2bea:	f103 0318 	add.w	r3, r3, #24
    2bee:	f240 0098 	movw	r0, #152	; 0x98
    2bf2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2bf6:	4619      	mov	r1, r3
    2bf8:	f000 f846 	bl	2c88 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    2bfc:	68bb      	ldr	r3, [r7, #8]
    2bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2c00:	f240 03ac 	movw	r3, #172	; 0xac
    2c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c08:	681b      	ldr	r3, [r3, #0]
    2c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c0c:	429a      	cmp	r2, r3
    2c0e:	d303      	bcc.n	2c18 <xCoRoutineRemoveFromEventList+0x4c>
	{
		xReturn = pdTRUE;
    2c10:	f04f 0301 	mov.w	r3, #1
    2c14:	60fb      	str	r3, [r7, #12]
    2c16:	e002      	b.n	2c1e <xCoRoutineRemoveFromEventList+0x52>
	}
	else
	{
		xReturn = pdFALSE;
    2c18:	f04f 0300 	mov.w	r3, #0
    2c1c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    2c1e:	68fb      	ldr	r3, [r7, #12]
}
    2c20:	4618      	mov	r0, r3
    2c22:	f107 0710 	add.w	r7, r7, #16
    2c26:	46bd      	mov	sp, r7
    2c28:	bd80      	pop	{r7, pc}
    2c2a:	bf00      	nop

00002c2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2c2c:	b480      	push	{r7}
    2c2e:	b083      	sub	sp, #12
    2c30:	af00      	add	r7, sp, #0
    2c32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2c34:	687b      	ldr	r3, [r7, #4]
    2c36:	f103 0208 	add.w	r2, r3, #8
    2c3a:	687b      	ldr	r3, [r7, #4]
    2c3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	f04f 32ff 	mov.w	r2, #4294967295
    2c44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2c46:	687b      	ldr	r3, [r7, #4]
    2c48:	f103 0208 	add.w	r2, r3, #8
    2c4c:	687b      	ldr	r3, [r7, #4]
    2c4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	f103 0208 	add.w	r2, r3, #8
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	f04f 0200 	mov.w	r2, #0
    2c60:	601a      	str	r2, [r3, #0]
}
    2c62:	f107 070c 	add.w	r7, r7, #12
    2c66:	46bd      	mov	sp, r7
    2c68:	bc80      	pop	{r7}
    2c6a:	4770      	bx	lr

00002c6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2c6c:	b480      	push	{r7}
    2c6e:	b083      	sub	sp, #12
    2c70:	af00      	add	r7, sp, #0
    2c72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	f04f 0200 	mov.w	r2, #0
    2c7a:	611a      	str	r2, [r3, #16]
}
    2c7c:	f107 070c 	add.w	r7, r7, #12
    2c80:	46bd      	mov	sp, r7
    2c82:	bc80      	pop	{r7}
    2c84:	4770      	bx	lr
    2c86:	bf00      	nop

00002c88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2c88:	b480      	push	{r7}
    2c8a:	b085      	sub	sp, #20
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	6078      	str	r0, [r7, #4]
    2c90:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	685b      	ldr	r3, [r3, #4]
    2c96:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2c98:	68fb      	ldr	r3, [r7, #12]
    2c9a:	685a      	ldr	r2, [r3, #4]
    2c9c:	683b      	ldr	r3, [r7, #0]
    2c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	685a      	ldr	r2, [r3, #4]
    2ca4:	683b      	ldr	r3, [r7, #0]
    2ca6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2ca8:	68fb      	ldr	r3, [r7, #12]
    2caa:	685b      	ldr	r3, [r3, #4]
    2cac:	683a      	ldr	r2, [r7, #0]
    2cae:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cb0:	68fb      	ldr	r3, [r7, #12]
    2cb2:	683a      	ldr	r2, [r7, #0]
    2cb4:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	683a      	ldr	r2, [r7, #0]
    2cba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2cbc:	683b      	ldr	r3, [r7, #0]
    2cbe:	687a      	ldr	r2, [r7, #4]
    2cc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	f103 0201 	add.w	r2, r3, #1
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	601a      	str	r2, [r3, #0]
}
    2cce:	f107 0714 	add.w	r7, r7, #20
    2cd2:	46bd      	mov	sp, r7
    2cd4:	bc80      	pop	{r7}
    2cd6:	4770      	bx	lr

00002cd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2cd8:	b480      	push	{r7}
    2cda:	b085      	sub	sp, #20
    2cdc:	af00      	add	r7, sp, #0
    2cde:	6078      	str	r0, [r7, #4]
    2ce0:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2ce2:	683b      	ldr	r3, [r7, #0]
    2ce4:	681b      	ldr	r3, [r3, #0]
    2ce6:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2ce8:	68bb      	ldr	r3, [r7, #8]
    2cea:	f1b3 3fff 	cmp.w	r3, #4294967295
    2cee:	d103      	bne.n	2cf8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	691b      	ldr	r3, [r3, #16]
    2cf4:	60fb      	str	r3, [r7, #12]
    2cf6:	e00d      	b.n	2d14 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2cf8:	687b      	ldr	r3, [r7, #4]
    2cfa:	f103 0308 	add.w	r3, r3, #8
    2cfe:	60fb      	str	r3, [r7, #12]
    2d00:	e002      	b.n	2d08 <vListInsert+0x30>
    2d02:	68fb      	ldr	r3, [r7, #12]
    2d04:	685b      	ldr	r3, [r3, #4]
    2d06:	60fb      	str	r3, [r7, #12]
    2d08:	68fb      	ldr	r3, [r7, #12]
    2d0a:	685b      	ldr	r3, [r3, #4]
    2d0c:	681a      	ldr	r2, [r3, #0]
    2d0e:	68bb      	ldr	r3, [r7, #8]
    2d10:	429a      	cmp	r2, r3
    2d12:	d9f6      	bls.n	2d02 <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2d14:	68fb      	ldr	r3, [r7, #12]
    2d16:	685a      	ldr	r2, [r3, #4]
    2d18:	683b      	ldr	r3, [r7, #0]
    2d1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2d1c:	683b      	ldr	r3, [r7, #0]
    2d1e:	685b      	ldr	r3, [r3, #4]
    2d20:	683a      	ldr	r2, [r7, #0]
    2d22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2d24:	683b      	ldr	r3, [r7, #0]
    2d26:	68fa      	ldr	r2, [r7, #12]
    2d28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2d2a:	68fb      	ldr	r3, [r7, #12]
    2d2c:	683a      	ldr	r2, [r7, #0]
    2d2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2d30:	683b      	ldr	r3, [r7, #0]
    2d32:	687a      	ldr	r2, [r7, #4]
    2d34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	681b      	ldr	r3, [r3, #0]
    2d3a:	f103 0201 	add.w	r2, r3, #1
    2d3e:	687b      	ldr	r3, [r7, #4]
    2d40:	601a      	str	r2, [r3, #0]
}
    2d42:	f107 0714 	add.w	r7, r7, #20
    2d46:	46bd      	mov	sp, r7
    2d48:	bc80      	pop	{r7}
    2d4a:	4770      	bx	lr

00002d4c <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2d4c:	b480      	push	{r7}
    2d4e:	b085      	sub	sp, #20
    2d50:	af00      	add	r7, sp, #0
    2d52:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2d54:	687b      	ldr	r3, [r7, #4]
    2d56:	685b      	ldr	r3, [r3, #4]
    2d58:	687a      	ldr	r2, [r7, #4]
    2d5a:	6892      	ldr	r2, [r2, #8]
    2d5c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2d5e:	687b      	ldr	r3, [r7, #4]
    2d60:	689b      	ldr	r3, [r3, #8]
    2d62:	687a      	ldr	r2, [r7, #4]
    2d64:	6852      	ldr	r2, [r2, #4]
    2d66:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2d68:	687b      	ldr	r3, [r7, #4]
    2d6a:	691b      	ldr	r3, [r3, #16]
    2d6c:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2d6e:	68fb      	ldr	r3, [r7, #12]
    2d70:	685a      	ldr	r2, [r3, #4]
    2d72:	687b      	ldr	r3, [r7, #4]
    2d74:	429a      	cmp	r2, r3
    2d76:	d103      	bne.n	2d80 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2d78:	687b      	ldr	r3, [r7, #4]
    2d7a:	689a      	ldr	r2, [r3, #8]
    2d7c:	68fb      	ldr	r3, [r7, #12]
    2d7e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2d80:	687b      	ldr	r3, [r7, #4]
    2d82:	f04f 0200 	mov.w	r2, #0
    2d86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2d88:	68fb      	ldr	r3, [r7, #12]
    2d8a:	681b      	ldr	r3, [r3, #0]
    2d8c:	f103 32ff 	add.w	r2, r3, #4294967295
    2d90:	68fb      	ldr	r3, [r7, #12]
    2d92:	601a      	str	r2, [r3, #0]
}
    2d94:	f107 0714 	add.w	r7, r7, #20
    2d98:	46bd      	mov	sp, r7
    2d9a:	bc80      	pop	{r7}
    2d9c:	4770      	bx	lr
    2d9e:	bf00      	nop

00002da0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2da0:	b580      	push	{r7, lr}
    2da2:	b084      	sub	sp, #16
    2da4:	af00      	add	r7, sp, #0
    2da6:	6078      	str	r0, [r7, #4]
    2da8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2daa:	f04f 0301 	mov.w	r3, #1
    2dae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2db0:	683b      	ldr	r3, [r7, #0]
    2db2:	2b01      	cmp	r3, #1
    2db4:	d00d      	beq.n	2dd2 <xQueueGenericReset+0x32>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2db6:	687b      	ldr	r3, [r7, #4]
    2db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2dba:	2b00      	cmp	r3, #0
    2dbc:	d002      	beq.n	2dc4 <xQueueGenericReset+0x24>
		{
			xReturn = pdFAIL;
    2dbe:	f04f 0300 	mov.w	r3, #0
    2dc2:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2dc4:	687b      	ldr	r3, [r7, #4]
    2dc6:	691b      	ldr	r3, [r3, #16]
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d002      	beq.n	2dd2 <xQueueGenericReset+0x32>
		{
			xReturn = pdFAIL;
    2dcc:	f04f 0300 	mov.w	r3, #0
    2dd0:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	2b01      	cmp	r3, #1
    2dd6:	d133      	bne.n	2e40 <xQueueGenericReset+0xa0>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2dd8:	687b      	ldr	r3, [r7, #4]
    2dda:	681a      	ldr	r2, [r3, #0]
    2ddc:	687b      	ldr	r3, [r7, #4]
    2dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2de0:	6879      	ldr	r1, [r7, #4]
    2de2:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2de4:	fb01 f303 	mul.w	r3, r1, r3
    2de8:	18d2      	adds	r2, r2, r3
    2dea:	687b      	ldr	r3, [r7, #4]
    2dec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2dee:	687b      	ldr	r3, [r7, #4]
    2df0:	f04f 0200 	mov.w	r2, #0
    2df4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	681a      	ldr	r2, [r3, #0]
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	681a      	ldr	r2, [r3, #0]
    2e02:	687b      	ldr	r3, [r7, #4]
    2e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2e06:	f103 33ff 	add.w	r3, r3, #4294967295
    2e0a:	6879      	ldr	r1, [r7, #4]
    2e0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2e0e:	fb01 f303 	mul.w	r3, r1, r3
    2e12:	18d2      	adds	r2, r2, r3
    2e14:	687b      	ldr	r3, [r7, #4]
    2e16:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	f04f 32ff 	mov.w	r2, #4294967295
    2e1e:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2e20:	687b      	ldr	r3, [r7, #4]
    2e22:	f04f 32ff 	mov.w	r2, #4294967295
    2e26:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2e28:	687b      	ldr	r3, [r7, #4]
    2e2a:	f103 0310 	add.w	r3, r3, #16
    2e2e:	4618      	mov	r0, r3
    2e30:	f7ff fefc 	bl	2c2c <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	f103 0324 	add.w	r3, r3, #36	; 0x24
    2e3a:	4618      	mov	r0, r3
    2e3c:	f7ff fef6 	bl	2c2c <vListInitialise>
	}

	return xReturn;
    2e40:	68fb      	ldr	r3, [r7, #12]
}
    2e42:	4618      	mov	r0, r3
    2e44:	f107 0710 	add.w	r7, r7, #16
    2e48:	46bd      	mov	sp, r7
    2e4a:	bd80      	pop	{r7, pc}

00002e4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2e4c:	b580      	push	{r7, lr}
    2e4e:	b088      	sub	sp, #32
    2e50:	af00      	add	r7, sp, #0
    2e52:	60f8      	str	r0, [r7, #12]
    2e54:	60b9      	str	r1, [r7, #8]
    2e56:	4613      	mov	r3, r2
    2e58:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2e5a:	f04f 0300 	mov.w	r3, #0
    2e5e:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2e60:	68fb      	ldr	r3, [r7, #12]
    2e62:	2b00      	cmp	r3, #0
    2e64:	d02d      	beq.n	2ec2 <xQueueGenericCreate+0x76>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2e66:	f04f 0050 	mov.w	r0, #80	; 0x50
    2e6a:	f001 ffe5 	bl	4e38 <pvPortMalloc>
    2e6e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2e70:	69bb      	ldr	r3, [r7, #24]
    2e72:	2b00      	cmp	r3, #0
    2e74:	d025      	beq.n	2ec2 <xQueueGenericCreate+0x76>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2e76:	68fb      	ldr	r3, [r7, #12]
    2e78:	68ba      	ldr	r2, [r7, #8]
    2e7a:	fb02 f303 	mul.w	r3, r2, r3
    2e7e:	f103 0301 	add.w	r3, r3, #1
    2e82:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2e84:	6978      	ldr	r0, [r7, #20]
    2e86:	f001 ffd7 	bl	4e38 <pvPortMalloc>
    2e8a:	4602      	mov	r2, r0
    2e8c:	69bb      	ldr	r3, [r7, #24]
    2e8e:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2e90:	69bb      	ldr	r3, [r7, #24]
    2e92:	681b      	ldr	r3, [r3, #0]
    2e94:	2b00      	cmp	r3, #0
    2e96:	d011      	beq.n	2ebc <xQueueGenericCreate+0x70>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2e98:	69bb      	ldr	r3, [r7, #24]
    2e9a:	68fa      	ldr	r2, [r7, #12]
    2e9c:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2e9e:	69bb      	ldr	r3, [r7, #24]
    2ea0:	68ba      	ldr	r2, [r7, #8]
    2ea2:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2ea4:	69b8      	ldr	r0, [r7, #24]
    2ea6:	f04f 0101 	mov.w	r1, #1
    2eaa:	f7ff ff79 	bl	2da0 <xQueueGenericReset>
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
    2eae:	69bb      	ldr	r3, [r7, #24]
    2eb0:	79fa      	ldrb	r2, [r7, #7]
    2eb2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2eb6:	69bb      	ldr	r3, [r7, #24]
    2eb8:	61fb      	str	r3, [r7, #28]
    2eba:	e002      	b.n	2ec2 <xQueueGenericCreate+0x76>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2ebc:	69b8      	ldr	r0, [r7, #24]
    2ebe:	f002 f807 	bl	4ed0 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2ec2:	69fb      	ldr	r3, [r7, #28]
}
    2ec4:	4618      	mov	r0, r3
    2ec6:	f107 0720 	add.w	r7, r7, #32
    2eca:	46bd      	mov	sp, r7
    2ecc:	bd80      	pop	{r7, pc}
    2ece:	bf00      	nop

00002ed0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2ed0:	b580      	push	{r7, lr}
    2ed2:	b084      	sub	sp, #16
    2ed4:	af00      	add	r7, sp, #0
    2ed6:	4603      	mov	r3, r0
    2ed8:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2eda:	f04f 0050 	mov.w	r0, #80	; 0x50
    2ede:	f001 ffab 	bl	4e38 <pvPortMalloc>
    2ee2:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2ee4:	68fb      	ldr	r3, [r7, #12]
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d03c      	beq.n	2f64 <xQueueCreateMutex+0x94>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2eea:	68fb      	ldr	r3, [r7, #12]
    2eec:	f04f 0200 	mov.w	r2, #0
    2ef0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2ef2:	68fb      	ldr	r3, [r7, #12]
    2ef4:	f04f 0200 	mov.w	r2, #0
    2ef8:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2efa:	68fb      	ldr	r3, [r7, #12]
    2efc:	f04f 0200 	mov.w	r2, #0
    2f00:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2f02:	68fb      	ldr	r3, [r7, #12]
    2f04:	f04f 0200 	mov.w	r2, #0
    2f08:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2f0a:	68fb      	ldr	r3, [r7, #12]
    2f0c:	f04f 0200 	mov.w	r2, #0
    2f10:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2f12:	68fb      	ldr	r3, [r7, #12]
    2f14:	f04f 0201 	mov.w	r2, #1
    2f18:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2f1a:	68fb      	ldr	r3, [r7, #12]
    2f1c:	f04f 0200 	mov.w	r2, #0
    2f20:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    2f22:	68fb      	ldr	r3, [r7, #12]
    2f24:	f04f 32ff 	mov.w	r2, #4294967295
    2f28:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    2f2a:	68fb      	ldr	r3, [r7, #12]
    2f2c:	f04f 32ff 	mov.w	r2, #4294967295
    2f30:	649a      	str	r2, [r3, #72]	; 0x48

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
    2f32:	68fb      	ldr	r3, [r7, #12]
    2f34:	79fa      	ldrb	r2, [r7, #7]
    2f36:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2f3a:	68fb      	ldr	r3, [r7, #12]
    2f3c:	f103 0310 	add.w	r3, r3, #16
    2f40:	4618      	mov	r0, r3
    2f42:	f7ff fe73 	bl	2c2c <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2f46:	68fb      	ldr	r3, [r7, #12]
    2f48:	f103 0324 	add.w	r3, r3, #36	; 0x24
    2f4c:	4618      	mov	r0, r3
    2f4e:	f7ff fe6d 	bl	2c2c <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2f52:	68f8      	ldr	r0, [r7, #12]
    2f54:	f04f 0100 	mov.w	r1, #0
    2f58:	f04f 0200 	mov.w	r2, #0
    2f5c:	f04f 0300 	mov.w	r3, #0
    2f60:	f000 f820 	bl	2fa4 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2f64:	68fb      	ldr	r3, [r7, #12]
	}
    2f66:	4618      	mov	r0, r3
    2f68:	f107 0710 	add.w	r7, r7, #16
    2f6c:	46bd      	mov	sp, r7
    2f6e:	bd80      	pop	{r7, pc}

00002f70 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2f70:	b580      	push	{r7, lr}
    2f72:	b084      	sub	sp, #16
    2f74:	af00      	add	r7, sp, #0
    2f76:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2f78:	f001 feda 	bl	4d30 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	681b      	ldr	r3, [r3, #0]
    2f80:	2b00      	cmp	r3, #0
    2f82:	d103      	bne.n	2f8c <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2f84:	687b      	ldr	r3, [r7, #4]
    2f86:	685b      	ldr	r3, [r3, #4]
    2f88:	60fb      	str	r3, [r7, #12]
    2f8a:	e002      	b.n	2f92 <xQueueGetMutexHolder+0x22>
			}
			else
			{
				pxReturn = NULL;
    2f8c:	f04f 0300 	mov.w	r3, #0
    2f90:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2f92:	f001 fee3 	bl	4d5c <vPortExitCritical>
		
		return pxReturn;
    2f96:	68fb      	ldr	r3, [r7, #12]
	}
    2f98:	4618      	mov	r0, r3
    2f9a:	f107 0710 	add.w	r7, r7, #16
    2f9e:	46bd      	mov	sp, r7
    2fa0:	bd80      	pop	{r7, pc}
    2fa2:	bf00      	nop

00002fa4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2fa4:	b580      	push	{r7, lr}
    2fa6:	b088      	sub	sp, #32
    2fa8:	af00      	add	r7, sp, #0
    2faa:	60f8      	str	r0, [r7, #12]
    2fac:	60b9      	str	r1, [r7, #8]
    2fae:	607a      	str	r2, [r7, #4]
    2fb0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2fb2:	f04f 0300 	mov.w	r3, #0
    2fb6:	61fb      	str	r3, [r7, #28]
    2fb8:	e000      	b.n	2fbc <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2fba:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2fbc:	f001 feb8 	bl	4d30 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2fc0:	68fb      	ldr	r3, [r7, #12]
    2fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2fc4:	68fb      	ldr	r3, [r7, #12]
    2fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2fc8:	429a      	cmp	r2, r3
    2fca:	d218      	bcs.n	2ffe <xQueueGenericSend+0x5a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2fcc:	68f8      	ldr	r0, [r7, #12]
    2fce:	68b9      	ldr	r1, [r7, #8]
    2fd0:	683a      	ldr	r2, [r7, #0]
    2fd2:	f000 fa29 	bl	3428 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2fd6:	68fb      	ldr	r3, [r7, #12]
    2fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2fda:	2b00      	cmp	r3, #0
    2fdc:	d00a      	beq.n	2ff4 <xQueueGenericSend+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2fde:	68fb      	ldr	r3, [r7, #12]
    2fe0:	f103 0324 	add.w	r3, r3, #36	; 0x24
    2fe4:	4618      	mov	r0, r3
    2fe6:	f001 fa61 	bl	44ac <xTaskRemoveFromEventList>
    2fea:	4603      	mov	r3, r0
    2fec:	2b01      	cmp	r3, #1
    2fee:	d101      	bne.n	2ff4 <xQueueGenericSend+0x50>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2ff0:	f001 fe92 	bl	4d18 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2ff4:	f001 feb2 	bl	4d5c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2ff8:	f04f 0301 	mov.w	r3, #1
    2ffc:	e05d      	b.n	30ba <xQueueGenericSend+0x116>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	2b00      	cmp	r3, #0
    3002:	d104      	bne.n	300e <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3004:	f001 feaa 	bl	4d5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3008:	f04f 0300 	mov.w	r3, #0
    300c:	e055      	b.n	30ba <xQueueGenericSend+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
    300e:	69fb      	ldr	r3, [r7, #28]
    3010:	2b00      	cmp	r3, #0
    3012:	d107      	bne.n	3024 <xQueueGenericSend+0x80>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3014:	f107 0314 	add.w	r3, r7, #20
    3018:	4618      	mov	r0, r3
    301a:	f001 faa9 	bl	4570 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    301e:	f04f 0301 	mov.w	r3, #1
    3022:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    3024:	f001 fe9a 	bl	4d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3028:	f000 ff32 	bl	3e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    302c:	f001 fe80 	bl	4d30 <vPortEnterCritical>
    3030:	68fb      	ldr	r3, [r7, #12]
    3032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3034:	f1b3 3fff 	cmp.w	r3, #4294967295
    3038:	d103      	bne.n	3042 <xQueueGenericSend+0x9e>
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	f04f 0200 	mov.w	r2, #0
    3040:	645a      	str	r2, [r3, #68]	; 0x44
    3042:	68fb      	ldr	r3, [r7, #12]
    3044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3046:	f1b3 3fff 	cmp.w	r3, #4294967295
    304a:	d103      	bne.n	3054 <xQueueGenericSend+0xb0>
    304c:	68fb      	ldr	r3, [r7, #12]
    304e:	f04f 0200 	mov.w	r2, #0
    3052:	649a      	str	r2, [r3, #72]	; 0x48
    3054:	f001 fe82 	bl	4d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3058:	f107 0314 	add.w	r3, r7, #20
    305c:	4618      	mov	r0, r3
    305e:	f107 0304 	add.w	r3, r7, #4
    3062:	4619      	mov	r1, r3
    3064:	f001 fa9c 	bl	45a0 <xTaskCheckForTimeOut>
    3068:	4603      	mov	r3, r0
    306a:	2b00      	cmp	r3, #0
    306c:	d11e      	bne.n	30ac <xQueueGenericSend+0x108>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    306e:	68f8      	ldr	r0, [r7, #12]
    3070:	f000 fadc 	bl	362c <prvIsQueueFull>
    3074:	4603      	mov	r3, r0
    3076:	2b00      	cmp	r3, #0
    3078:	d012      	beq.n	30a0 <xQueueGenericSend+0xfc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    307a:	68fb      	ldr	r3, [r7, #12]
    307c:	f103 0210 	add.w	r2, r3, #16
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	4610      	mov	r0, r2
    3084:	4619      	mov	r1, r3
    3086:	f001 f9d5 	bl	4434 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    308a:	68f8      	ldr	r0, [r7, #12]
    308c:	f000 fa56 	bl	353c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3090:	f000 ff10 	bl	3eb4 <xTaskResumeAll>
    3094:	4603      	mov	r3, r0
    3096:	2b00      	cmp	r3, #0
    3098:	d18f      	bne.n	2fba <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    309a:	f001 fe3d 	bl	4d18 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    309e:	e78c      	b.n	2fba <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    30a0:	68f8      	ldr	r0, [r7, #12]
    30a2:	f000 fa4b 	bl	353c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    30a6:	f000 ff05 	bl	3eb4 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    30aa:	e786      	b.n	2fba <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    30ac:	68f8      	ldr	r0, [r7, #12]
    30ae:	f000 fa45 	bl	353c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    30b2:	f000 feff 	bl	3eb4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    30b6:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    30ba:	4618      	mov	r0, r3
    30bc:	f107 0720 	add.w	r7, r7, #32
    30c0:	46bd      	mov	sp, r7
    30c2:	bd80      	pop	{r7, pc}

000030c4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    30c4:	b580      	push	{r7, lr}
    30c6:	b086      	sub	sp, #24
    30c8:	af00      	add	r7, sp, #0
    30ca:	60f8      	str	r0, [r7, #12]
    30cc:	60b9      	str	r1, [r7, #8]
    30ce:	607a      	str	r2, [r7, #4]
    30d0:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    30d2:	f04f 0300 	mov.w	r3, #0
    30d6:	613b      	str	r3, [r7, #16]
    30d8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    30dc:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    30e0:	68fb      	ldr	r3, [r7, #12]
    30e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    30e4:	68fb      	ldr	r3, [r7, #12]
    30e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    30e8:	429a      	cmp	r2, r3
    30ea:	d225      	bcs.n	3138 <xQueueGenericSendFromISR+0x74>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    30ec:	68f8      	ldr	r0, [r7, #12]
    30ee:	68b9      	ldr	r1, [r7, #8]
    30f0:	683a      	ldr	r2, [r7, #0]
    30f2:	f000 f999 	bl	3428 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    30f6:	68fb      	ldr	r3, [r7, #12]
    30f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    30fa:	f1b3 3fff 	cmp.w	r3, #4294967295
    30fe:	d111      	bne.n	3124 <xQueueGenericSendFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3100:	68fb      	ldr	r3, [r7, #12]
    3102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3104:	2b00      	cmp	r3, #0
    3106:	d013      	beq.n	3130 <xQueueGenericSendFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3108:	68fb      	ldr	r3, [r7, #12]
    310a:	f103 0324 	add.w	r3, r3, #36	; 0x24
    310e:	4618      	mov	r0, r3
    3110:	f001 f9cc 	bl	44ac <xTaskRemoveFromEventList>
    3114:	4603      	mov	r3, r0
    3116:	2b00      	cmp	r3, #0
    3118:	d00a      	beq.n	3130 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	f04f 0201 	mov.w	r2, #1
    3120:	601a      	str	r2, [r3, #0]
    3122:	e005      	b.n	3130 <xQueueGenericSendFromISR+0x6c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3124:	68fb      	ldr	r3, [r7, #12]
    3126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3128:	f103 0201 	add.w	r2, r3, #1
    312c:	68fb      	ldr	r3, [r7, #12]
    312e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    3130:	f04f 0301 	mov.w	r3, #1
    3134:	617b      	str	r3, [r7, #20]
    3136:	e002      	b.n	313e <xQueueGenericSendFromISR+0x7a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3138:	f04f 0300 	mov.w	r3, #0
    313c:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    313e:	f04f 0000 	mov.w	r0, #0
    3142:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3146:	697b      	ldr	r3, [r7, #20]
}
    3148:	4618      	mov	r0, r3
    314a:	f107 0718 	add.w	r7, r7, #24
    314e:	46bd      	mov	sp, r7
    3150:	bd80      	pop	{r7, pc}
    3152:	bf00      	nop

00003154 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    3154:	b580      	push	{r7, lr}
    3156:	b088      	sub	sp, #32
    3158:	af00      	add	r7, sp, #0
    315a:	60f8      	str	r0, [r7, #12]
    315c:	60b9      	str	r1, [r7, #8]
    315e:	607a      	str	r2, [r7, #4]
    3160:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3162:	f04f 0300 	mov.w	r3, #0
    3166:	61fb      	str	r3, [r7, #28]
    3168:	e000      	b.n	316c <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    316a:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    316c:	f001 fde0 	bl	4d30 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3170:	68fb      	ldr	r3, [r7, #12]
    3172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3174:	2b00      	cmp	r3, #0
    3176:	d03f      	beq.n	31f8 <xQueueGenericReceive+0xa4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    3178:	68fb      	ldr	r3, [r7, #12]
    317a:	68db      	ldr	r3, [r3, #12]
    317c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    317e:	68f8      	ldr	r0, [r7, #12]
    3180:	68b9      	ldr	r1, [r7, #8]
    3182:	f000 f9b3 	bl	34ec <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    3186:	683b      	ldr	r3, [r7, #0]
    3188:	2b00      	cmp	r3, #0
    318a:	d11e      	bne.n	31ca <xQueueGenericReceive+0x76>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    318c:	68fb      	ldr	r3, [r7, #12]
    318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3190:	f103 32ff 	add.w	r2, r3, #4294967295
    3194:	68fb      	ldr	r3, [r7, #12]
    3196:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3198:	68fb      	ldr	r3, [r7, #12]
    319a:	681b      	ldr	r3, [r3, #0]
    319c:	2b00      	cmp	r3, #0
    319e:	d104      	bne.n	31aa <xQueueGenericReceive+0x56>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    31a0:	f001 fc7e 	bl	4aa0 <xTaskGetCurrentTaskHandle>
    31a4:	4602      	mov	r2, r0
    31a6:	68fb      	ldr	r3, [r7, #12]
    31a8:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    31aa:	68fb      	ldr	r3, [r7, #12]
    31ac:	691b      	ldr	r3, [r3, #16]
    31ae:	2b00      	cmp	r3, #0
    31b0:	d01d      	beq.n	31ee <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    31b2:	68fb      	ldr	r3, [r7, #12]
    31b4:	f103 0310 	add.w	r3, r3, #16
    31b8:	4618      	mov	r0, r3
    31ba:	f001 f977 	bl	44ac <xTaskRemoveFromEventList>
    31be:	4603      	mov	r3, r0
    31c0:	2b01      	cmp	r3, #1
    31c2:	d114      	bne.n	31ee <xQueueGenericReceive+0x9a>
						{
							portYIELD_WITHIN_API();
    31c4:	f001 fda8 	bl	4d18 <vPortYieldFromISR>
    31c8:	e011      	b.n	31ee <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    31ca:	68fb      	ldr	r3, [r7, #12]
    31cc:	69ba      	ldr	r2, [r7, #24]
    31ce:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31d0:	68fb      	ldr	r3, [r7, #12]
    31d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31d4:	2b00      	cmp	r3, #0
    31d6:	d00a      	beq.n	31ee <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31d8:	68fb      	ldr	r3, [r7, #12]
    31da:	f103 0324 	add.w	r3, r3, #36	; 0x24
    31de:	4618      	mov	r0, r3
    31e0:	f001 f964 	bl	44ac <xTaskRemoveFromEventList>
    31e4:	4603      	mov	r3, r0
    31e6:	2b00      	cmp	r3, #0
    31e8:	d001      	beq.n	31ee <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    31ea:	f001 fd95 	bl	4d18 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    31ee:	f001 fdb5 	bl	4d5c <vPortExitCritical>
				return pdPASS;
    31f2:	f04f 0301 	mov.w	r3, #1
    31f6:	e06b      	b.n	32d0 <xQueueGenericReceive+0x17c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	2b00      	cmp	r3, #0
    31fc:	d104      	bne.n	3208 <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    31fe:	f001 fdad 	bl	4d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3202:	f04f 0300 	mov.w	r3, #0
    3206:	e063      	b.n	32d0 <xQueueGenericReceive+0x17c>
				}
				else if( xEntryTimeSet == pdFALSE )
    3208:	69fb      	ldr	r3, [r7, #28]
    320a:	2b00      	cmp	r3, #0
    320c:	d107      	bne.n	321e <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    320e:	f107 0310 	add.w	r3, r7, #16
    3212:	4618      	mov	r0, r3
    3214:	f001 f9ac 	bl	4570 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3218:	f04f 0301 	mov.w	r3, #1
    321c:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    321e:	f001 fd9d 	bl	4d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3222:	f000 fe35 	bl	3e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3226:	f001 fd83 	bl	4d30 <vPortEnterCritical>
    322a:	68fb      	ldr	r3, [r7, #12]
    322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    322e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3232:	d103      	bne.n	323c <xQueueGenericReceive+0xe8>
    3234:	68fb      	ldr	r3, [r7, #12]
    3236:	f04f 0200 	mov.w	r2, #0
    323a:	645a      	str	r2, [r3, #68]	; 0x44
    323c:	68fb      	ldr	r3, [r7, #12]
    323e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3240:	f1b3 3fff 	cmp.w	r3, #4294967295
    3244:	d103      	bne.n	324e <xQueueGenericReceive+0xfa>
    3246:	68fb      	ldr	r3, [r7, #12]
    3248:	f04f 0200 	mov.w	r2, #0
    324c:	649a      	str	r2, [r3, #72]	; 0x48
    324e:	f001 fd85 	bl	4d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3252:	f107 0310 	add.w	r3, r7, #16
    3256:	4618      	mov	r0, r3
    3258:	f107 0304 	add.w	r3, r7, #4
    325c:	4619      	mov	r1, r3
    325e:	f001 f99f 	bl	45a0 <xTaskCheckForTimeOut>
    3262:	4603      	mov	r3, r0
    3264:	2b00      	cmp	r3, #0
    3266:	d12c      	bne.n	32c2 <xQueueGenericReceive+0x16e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3268:	68f8      	ldr	r0, [r7, #12]
    326a:	f000 f9b7 	bl	35dc <prvIsQueueEmpty>
    326e:	4603      	mov	r3, r0
    3270:	2b00      	cmp	r3, #0
    3272:	d020      	beq.n	32b6 <xQueueGenericReceive+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3274:	68fb      	ldr	r3, [r7, #12]
    3276:	681b      	ldr	r3, [r3, #0]
    3278:	2b00      	cmp	r3, #0
    327a:	d108      	bne.n	328e <xQueueGenericReceive+0x13a>
					{
						portENTER_CRITICAL();
    327c:	f001 fd58 	bl	4d30 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3280:	68fb      	ldr	r3, [r7, #12]
    3282:	685b      	ldr	r3, [r3, #4]
    3284:	4618      	mov	r0, r3
    3286:	f001 fc1b 	bl	4ac0 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    328a:	f001 fd67 	bl	4d5c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    328e:	68fb      	ldr	r3, [r7, #12]
    3290:	f103 0224 	add.w	r2, r3, #36	; 0x24
    3294:	687b      	ldr	r3, [r7, #4]
    3296:	4610      	mov	r0, r2
    3298:	4619      	mov	r1, r3
    329a:	f001 f8cb 	bl	4434 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    329e:	68f8      	ldr	r0, [r7, #12]
    32a0:	f000 f94c 	bl	353c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    32a4:	f000 fe06 	bl	3eb4 <xTaskResumeAll>
    32a8:	4603      	mov	r3, r0
    32aa:	2b00      	cmp	r3, #0
    32ac:	f47f af5d 	bne.w	316a <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
    32b0:	f001 fd32 	bl	4d18 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    32b4:	e759      	b.n	316a <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    32b6:	68f8      	ldr	r0, [r7, #12]
    32b8:	f000 f940 	bl	353c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    32bc:	f000 fdfa 	bl	3eb4 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    32c0:	e753      	b.n	316a <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    32c2:	68f8      	ldr	r0, [r7, #12]
    32c4:	f000 f93a 	bl	353c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    32c8:	f000 fdf4 	bl	3eb4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    32cc:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    32d0:	4618      	mov	r0, r3
    32d2:	f107 0720 	add.w	r7, r7, #32
    32d6:	46bd      	mov	sp, r7
    32d8:	bd80      	pop	{r7, pc}
    32da:	bf00      	nop

000032dc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    32dc:	b580      	push	{r7, lr}
    32de:	b086      	sub	sp, #24
    32e0:	af00      	add	r7, sp, #0
    32e2:	60f8      	str	r0, [r7, #12]
    32e4:	60b9      	str	r1, [r7, #8]
    32e6:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    32e8:	f04f 0300 	mov.w	r3, #0
    32ec:	613b      	str	r3, [r7, #16]
    32ee:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    32f2:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    32f6:	68fb      	ldr	r3, [r7, #12]
    32f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32fa:	2b00      	cmp	r3, #0
    32fc:	d02a      	beq.n	3354 <xQueueReceiveFromISR+0x78>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    32fe:	68f8      	ldr	r0, [r7, #12]
    3300:	68b9      	ldr	r1, [r7, #8]
    3302:	f000 f8f3 	bl	34ec <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    3306:	68fb      	ldr	r3, [r7, #12]
    3308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    330a:	f103 32ff 	add.w	r2, r3, #4294967295
    330e:	68fb      	ldr	r3, [r7, #12]
    3310:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    3312:	68fb      	ldr	r3, [r7, #12]
    3314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3316:	f1b3 3fff 	cmp.w	r3, #4294967295
    331a:	d111      	bne.n	3340 <xQueueReceiveFromISR+0x64>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    331c:	68fb      	ldr	r3, [r7, #12]
    331e:	691b      	ldr	r3, [r3, #16]
    3320:	2b00      	cmp	r3, #0
    3322:	d013      	beq.n	334c <xQueueReceiveFromISR+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3324:	68fb      	ldr	r3, [r7, #12]
    3326:	f103 0310 	add.w	r3, r3, #16
    332a:	4618      	mov	r0, r3
    332c:	f001 f8be 	bl	44ac <xTaskRemoveFromEventList>
    3330:	4603      	mov	r3, r0
    3332:	2b00      	cmp	r3, #0
    3334:	d00a      	beq.n	334c <xQueueReceiveFromISR+0x70>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3336:	687b      	ldr	r3, [r7, #4]
    3338:	f04f 0201 	mov.w	r2, #1
    333c:	601a      	str	r2, [r3, #0]
    333e:	e005      	b.n	334c <xQueueReceiveFromISR+0x70>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3340:	68fb      	ldr	r3, [r7, #12]
    3342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3344:	f103 0201 	add.w	r2, r3, #1
    3348:	68fb      	ldr	r3, [r7, #12]
    334a:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    334c:	f04f 0301 	mov.w	r3, #1
    3350:	617b      	str	r3, [r7, #20]
    3352:	e002      	b.n	335a <xQueueReceiveFromISR+0x7e>
		}
		else
		{
			xReturn = pdFAIL;
    3354:	f04f 0300 	mov.w	r3, #0
    3358:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    335a:	f04f 0000 	mov.w	r0, #0
    335e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3362:	697b      	ldr	r3, [r7, #20]
}
    3364:	4618      	mov	r0, r3
    3366:	f107 0718 	add.w	r7, r7, #24
    336a:	46bd      	mov	sp, r7
    336c:	bd80      	pop	{r7, pc}
    336e:	bf00      	nop

00003370 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    3370:	b580      	push	{r7, lr}
    3372:	b084      	sub	sp, #16
    3374:	af00      	add	r7, sp, #0
    3376:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3378:	f001 fcda 	bl	4d30 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    337c:	687b      	ldr	r3, [r7, #4]
    337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3380:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    3382:	f001 fceb 	bl	4d5c <vPortExitCritical>

	return uxReturn;
    3386:	68fb      	ldr	r3, [r7, #12]
}
    3388:	4618      	mov	r0, r3
    338a:	f107 0710 	add.w	r7, r7, #16
    338e:	46bd      	mov	sp, r7
    3390:	bd80      	pop	{r7, pc}
    3392:	bf00      	nop

00003394 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    3394:	b480      	push	{r7}
    3396:	b085      	sub	sp, #20
    3398:	af00      	add	r7, sp, #0
    339a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    339c:	687b      	ldr	r3, [r7, #4]
    339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    33a0:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    33a2:	68fb      	ldr	r3, [r7, #12]
}
    33a4:	4618      	mov	r0, r3
    33a6:	f107 0714 	add.w	r7, r7, #20
    33aa:	46bd      	mov	sp, r7
    33ac:	bc80      	pop	{r7}
    33ae:	4770      	bx	lr

000033b0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    33b0:	b580      	push	{r7, lr}
    33b2:	b082      	sub	sp, #8
    33b4:	af00      	add	r7, sp, #0
    33b6:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    33b8:	687b      	ldr	r3, [r7, #4]
    33ba:	681b      	ldr	r3, [r3, #0]
    33bc:	4618      	mov	r0, r3
    33be:	f001 fd87 	bl	4ed0 <vPortFree>
	vPortFree( pxQueue );
    33c2:	6878      	ldr	r0, [r7, #4]
    33c4:	f001 fd84 	bl	4ed0 <vPortFree>
}
    33c8:	f107 0708 	add.w	r7, r7, #8
    33cc:	46bd      	mov	sp, r7
    33ce:	bd80      	pop	{r7, pc}

000033d0 <ucQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueNumber( xQueueHandle pxQueue )
	{
    33d0:	b480      	push	{r7}
    33d2:	b083      	sub	sp, #12
    33d4:	af00      	add	r7, sp, #0
    33d6:	6078      	str	r0, [r7, #4]
		return pxQueue->ucQueueNumber;
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    33de:	4618      	mov	r0, r3
    33e0:	f107 070c 	add.w	r7, r7, #12
    33e4:	46bd      	mov	sp, r7
    33e6:	bc80      	pop	{r7}
    33e8:	4770      	bx	lr
    33ea:	bf00      	nop

000033ec <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( xQueueHandle pxQueue, unsigned char ucQueueNumber )
	{
    33ec:	b480      	push	{r7}
    33ee:	b083      	sub	sp, #12
    33f0:	af00      	add	r7, sp, #0
    33f2:	6078      	str	r0, [r7, #4]
    33f4:	460b      	mov	r3, r1
    33f6:	70fb      	strb	r3, [r7, #3]
		pxQueue->ucQueueNumber = ucQueueNumber;
    33f8:	687b      	ldr	r3, [r7, #4]
    33fa:	78fa      	ldrb	r2, [r7, #3]
    33fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}
    3400:	f107 070c 	add.w	r7, r7, #12
    3404:	46bd      	mov	sp, r7
    3406:	bc80      	pop	{r7}
    3408:	4770      	bx	lr
    340a:	bf00      	nop

0000340c <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueType( xQueueHandle pxQueue )
	{
    340c:	b480      	push	{r7}
    340e:	b083      	sub	sp, #12
    3410:	af00      	add	r7, sp, #0
    3412:	6078      	str	r0, [r7, #4]
		return pxQueue->ucQueueType;
    3414:	687b      	ldr	r3, [r7, #4]
    3416:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
	}
    341a:	4618      	mov	r0, r3
    341c:	f107 070c 	add.w	r7, r7, #12
    3420:	46bd      	mov	sp, r7
    3422:	bc80      	pop	{r7}
    3424:	4770      	bx	lr
    3426:	bf00      	nop

00003428 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    3428:	b580      	push	{r7, lr}
    342a:	b084      	sub	sp, #16
    342c:	af00      	add	r7, sp, #0
    342e:	60f8      	str	r0, [r7, #12]
    3430:	60b9      	str	r1, [r7, #8]
    3432:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    3434:	68fb      	ldr	r3, [r7, #12]
    3436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3438:	2b00      	cmp	r3, #0
    343a:	d10d      	bne.n	3458 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    343c:	68fb      	ldr	r3, [r7, #12]
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	2b00      	cmp	r3, #0
    3442:	d148      	bne.n	34d6 <prvCopyDataToQueue+0xae>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3444:	68fb      	ldr	r3, [r7, #12]
    3446:	685b      	ldr	r3, [r3, #4]
    3448:	4618      	mov	r0, r3
    344a:	f001 fba5 	bl	4b98 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    344e:	68fb      	ldr	r3, [r7, #12]
    3450:	f04f 0200 	mov.w	r2, #0
    3454:	605a      	str	r2, [r3, #4]
    3456:	e03e      	b.n	34d6 <prvCopyDataToQueue+0xae>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	2b00      	cmp	r3, #0
    345c:	d11a      	bne.n	3494 <prvCopyDataToQueue+0x6c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    345e:	68fb      	ldr	r3, [r7, #12]
    3460:	689a      	ldr	r2, [r3, #8]
    3462:	68fb      	ldr	r3, [r7, #12]
    3464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3466:	4610      	mov	r0, r2
    3468:	68b9      	ldr	r1, [r7, #8]
    346a:	461a      	mov	r2, r3
    346c:	f002 fff2 	bl	6454 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3470:	68fb      	ldr	r3, [r7, #12]
    3472:	689a      	ldr	r2, [r3, #8]
    3474:	68fb      	ldr	r3, [r7, #12]
    3476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3478:	18d2      	adds	r2, r2, r3
    347a:	68fb      	ldr	r3, [r7, #12]
    347c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    347e:	68fb      	ldr	r3, [r7, #12]
    3480:	689a      	ldr	r2, [r3, #8]
    3482:	68fb      	ldr	r3, [r7, #12]
    3484:	685b      	ldr	r3, [r3, #4]
    3486:	429a      	cmp	r2, r3
    3488:	d325      	bcc.n	34d6 <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    348a:	68fb      	ldr	r3, [r7, #12]
    348c:	681a      	ldr	r2, [r3, #0]
    348e:	68fb      	ldr	r3, [r7, #12]
    3490:	609a      	str	r2, [r3, #8]
    3492:	e020      	b.n	34d6 <prvCopyDataToQueue+0xae>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3494:	68fb      	ldr	r3, [r7, #12]
    3496:	68da      	ldr	r2, [r3, #12]
    3498:	68fb      	ldr	r3, [r7, #12]
    349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    349c:	4610      	mov	r0, r2
    349e:	68b9      	ldr	r1, [r7, #8]
    34a0:	461a      	mov	r2, r3
    34a2:	f002 ffd7 	bl	6454 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    34a6:	68fb      	ldr	r3, [r7, #12]
    34a8:	68da      	ldr	r2, [r3, #12]
    34aa:	68fb      	ldr	r3, [r7, #12]
    34ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    34ae:	f1c3 0300 	rsb	r3, r3, #0
    34b2:	18d2      	adds	r2, r2, r3
    34b4:	68fb      	ldr	r3, [r7, #12]
    34b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    34b8:	68fb      	ldr	r3, [r7, #12]
    34ba:	68da      	ldr	r2, [r3, #12]
    34bc:	68fb      	ldr	r3, [r7, #12]
    34be:	681b      	ldr	r3, [r3, #0]
    34c0:	429a      	cmp	r2, r3
    34c2:	d208      	bcs.n	34d6 <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    34c4:	68fb      	ldr	r3, [r7, #12]
    34c6:	685a      	ldr	r2, [r3, #4]
    34c8:	68fb      	ldr	r3, [r7, #12]
    34ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    34cc:	f1c3 0300 	rsb	r3, r3, #0
    34d0:	18d2      	adds	r2, r2, r3
    34d2:	68fb      	ldr	r3, [r7, #12]
    34d4:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    34d6:	68fb      	ldr	r3, [r7, #12]
    34d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    34da:	f103 0201 	add.w	r2, r3, #1
    34de:	68fb      	ldr	r3, [r7, #12]
    34e0:	639a      	str	r2, [r3, #56]	; 0x38
}
    34e2:	f107 0710 	add.w	r7, r7, #16
    34e6:	46bd      	mov	sp, r7
    34e8:	bd80      	pop	{r7, pc}
    34ea:	bf00      	nop

000034ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    34ec:	b580      	push	{r7, lr}
    34ee:	b082      	sub	sp, #8
    34f0:	af00      	add	r7, sp, #0
    34f2:	6078      	str	r0, [r7, #4]
    34f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    34f6:	687b      	ldr	r3, [r7, #4]
    34f8:	681b      	ldr	r3, [r3, #0]
    34fa:	2b00      	cmp	r3, #0
    34fc:	d019      	beq.n	3532 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    34fe:	687b      	ldr	r3, [r7, #4]
    3500:	68da      	ldr	r2, [r3, #12]
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3506:	18d2      	adds	r2, r2, r3
    3508:	687b      	ldr	r3, [r7, #4]
    350a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	68da      	ldr	r2, [r3, #12]
    3510:	687b      	ldr	r3, [r7, #4]
    3512:	685b      	ldr	r3, [r3, #4]
    3514:	429a      	cmp	r2, r3
    3516:	d303      	bcc.n	3520 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    3518:	687b      	ldr	r3, [r7, #4]
    351a:	681a      	ldr	r2, [r3, #0]
    351c:	687b      	ldr	r3, [r7, #4]
    351e:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    3520:	687b      	ldr	r3, [r7, #4]
    3522:	68da      	ldr	r2, [r3, #12]
    3524:	687b      	ldr	r3, [r7, #4]
    3526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3528:	6838      	ldr	r0, [r7, #0]
    352a:	4611      	mov	r1, r2
    352c:	461a      	mov	r2, r3
    352e:	f002 ff91 	bl	6454 <memcpy>
	}
}
    3532:	f107 0708 	add.w	r7, r7, #8
    3536:	46bd      	mov	sp, r7
    3538:	bd80      	pop	{r7, pc}
    353a:	bf00      	nop

0000353c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    353c:	b580      	push	{r7, lr}
    353e:	b082      	sub	sp, #8
    3540:	af00      	add	r7, sp, #0
    3542:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3544:	f001 fbf4 	bl	4d30 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3548:	e014      	b.n	3574 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    354e:	2b00      	cmp	r3, #0
    3550:	d015      	beq.n	357e <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3552:	687b      	ldr	r3, [r7, #4]
    3554:	f103 0324 	add.w	r3, r3, #36	; 0x24
    3558:	4618      	mov	r0, r3
    355a:	f000 ffa7 	bl	44ac <xTaskRemoveFromEventList>
    355e:	4603      	mov	r3, r0
    3560:	2b00      	cmp	r3, #0
    3562:	d001      	beq.n	3568 <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3564:	f001 f86e 	bl	4644 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    3568:	687b      	ldr	r3, [r7, #4]
    356a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    356c:	f103 32ff 	add.w	r2, r3, #4294967295
    3570:	687b      	ldr	r3, [r7, #4]
    3572:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3574:	687b      	ldr	r3, [r7, #4]
    3576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3578:	2b00      	cmp	r3, #0
    357a:	dce6      	bgt.n	354a <prvUnlockQueue+0xe>
    357c:	e000      	b.n	3580 <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
    357e:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3580:	687b      	ldr	r3, [r7, #4]
    3582:	f04f 32ff 	mov.w	r2, #4294967295
    3586:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    3588:	f001 fbe8 	bl	4d5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    358c:	f001 fbd0 	bl	4d30 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3590:	e014      	b.n	35bc <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3592:	687b      	ldr	r3, [r7, #4]
    3594:	691b      	ldr	r3, [r3, #16]
    3596:	2b00      	cmp	r3, #0
    3598:	d015      	beq.n	35c6 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    359a:	687b      	ldr	r3, [r7, #4]
    359c:	f103 0310 	add.w	r3, r3, #16
    35a0:	4618      	mov	r0, r3
    35a2:	f000 ff83 	bl	44ac <xTaskRemoveFromEventList>
    35a6:	4603      	mov	r3, r0
    35a8:	2b00      	cmp	r3, #0
    35aa:	d001      	beq.n	35b0 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
    35ac:	f001 f84a 	bl	4644 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    35b0:	687b      	ldr	r3, [r7, #4]
    35b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    35b4:	f103 32ff 	add.w	r2, r3, #4294967295
    35b8:	687b      	ldr	r3, [r7, #4]
    35ba:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    35bc:	687b      	ldr	r3, [r7, #4]
    35be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    35c0:	2b00      	cmp	r3, #0
    35c2:	dce6      	bgt.n	3592 <prvUnlockQueue+0x56>
    35c4:	e000      	b.n	35c8 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
    35c6:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    35c8:	687b      	ldr	r3, [r7, #4]
    35ca:	f04f 32ff 	mov.w	r2, #4294967295
    35ce:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    35d0:	f001 fbc4 	bl	4d5c <vPortExitCritical>
}
    35d4:	f107 0708 	add.w	r7, r7, #8
    35d8:	46bd      	mov	sp, r7
    35da:	bd80      	pop	{r7, pc}

000035dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    35dc:	b580      	push	{r7, lr}
    35de:	b084      	sub	sp, #16
    35e0:	af00      	add	r7, sp, #0
    35e2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    35e4:	f001 fba4 	bl	4d30 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    35ec:	2b00      	cmp	r3, #0
    35ee:	bf14      	ite	ne
    35f0:	2300      	movne	r3, #0
    35f2:	2301      	moveq	r3, #1
    35f4:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    35f6:	f001 fbb1 	bl	4d5c <vPortExitCritical>

	return xReturn;
    35fa:	68fb      	ldr	r3, [r7, #12]
}
    35fc:	4618      	mov	r0, r3
    35fe:	f107 0710 	add.w	r7, r7, #16
    3602:	46bd      	mov	sp, r7
    3604:	bd80      	pop	{r7, pc}
    3606:	bf00      	nop

00003608 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    3608:	b480      	push	{r7}
    360a:	b085      	sub	sp, #20
    360c:	af00      	add	r7, sp, #0
    360e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3610:	687b      	ldr	r3, [r7, #4]
    3612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3614:	2b00      	cmp	r3, #0
    3616:	bf14      	ite	ne
    3618:	2300      	movne	r3, #0
    361a:	2301      	moveq	r3, #1
    361c:	60fb      	str	r3, [r7, #12]

	return xReturn;
    361e:	68fb      	ldr	r3, [r7, #12]
}
    3620:	4618      	mov	r0, r3
    3622:	f107 0714 	add.w	r7, r7, #20
    3626:	46bd      	mov	sp, r7
    3628:	bc80      	pop	{r7}
    362a:	4770      	bx	lr

0000362c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    362c:	b580      	push	{r7, lr}
    362e:	b084      	sub	sp, #16
    3630:	af00      	add	r7, sp, #0
    3632:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3634:	f001 fb7c 	bl	4d30 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3638:	687b      	ldr	r3, [r7, #4]
    363a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    363c:	687b      	ldr	r3, [r7, #4]
    363e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3640:	429a      	cmp	r2, r3
    3642:	bf14      	ite	ne
    3644:	2300      	movne	r3, #0
    3646:	2301      	moveq	r3, #1
    3648:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    364a:	f001 fb87 	bl	4d5c <vPortExitCritical>

	return xReturn;
    364e:	68fb      	ldr	r3, [r7, #12]
}
    3650:	4618      	mov	r0, r3
    3652:	f107 0710 	add.w	r7, r7, #16
    3656:	46bd      	mov	sp, r7
    3658:	bd80      	pop	{r7, pc}
    365a:	bf00      	nop

0000365c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    365c:	b480      	push	{r7}
    365e:	b085      	sub	sp, #20
    3660:	af00      	add	r7, sp, #0
    3662:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3664:	687b      	ldr	r3, [r7, #4]
    3666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3668:	687b      	ldr	r3, [r7, #4]
    366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    366c:	429a      	cmp	r2, r3
    366e:	bf14      	ite	ne
    3670:	2300      	movne	r3, #0
    3672:	2301      	moveq	r3, #1
    3674:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3676:	68fb      	ldr	r3, [r7, #12]
}
    3678:	4618      	mov	r0, r3
    367a:	f107 0714 	add.w	r7, r7, #20
    367e:	46bd      	mov	sp, r7
    3680:	bc80      	pop	{r7}
    3682:	4770      	bx	lr

00003684 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3684:	b580      	push	{r7, lr}
    3686:	b08a      	sub	sp, #40	; 0x28
    3688:	af02      	add	r7, sp, #8
    368a:	60f8      	str	r0, [r7, #12]
    368c:	60b9      	str	r1, [r7, #8]
    368e:	603b      	str	r3, [r7, #0]
    3690:	4613      	mov	r3, r2
    3692:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3694:	88fb      	ldrh	r3, [r7, #6]
    3696:	4618      	mov	r0, r3
    3698:	6b39      	ldr	r1, [r7, #48]	; 0x30
    369a:	f001 f93b 	bl	4914 <prvAllocateTCBAndStack>
    369e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    36a0:	69bb      	ldr	r3, [r7, #24]
    36a2:	2b00      	cmp	r3, #0
    36a4:	f000 80ac 	beq.w	3800 <xTaskGenericCreate+0x17c>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    36a8:	69bb      	ldr	r3, [r7, #24]
    36aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    36ac:	88fb      	ldrh	r3, [r7, #6]
    36ae:	f103 33ff 	add.w	r3, r3, #4294967295
    36b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    36b6:	18d3      	adds	r3, r2, r3
    36b8:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    36ba:	697b      	ldr	r3, [r7, #20]
    36bc:	f023 0307 	bic.w	r3, r3, #7
    36c0:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    36c2:	88fb      	ldrh	r3, [r7, #6]
    36c4:	9300      	str	r3, [sp, #0]
    36c6:	69b8      	ldr	r0, [r7, #24]
    36c8:	68b9      	ldr	r1, [r7, #8]
    36ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    36cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36ce:	f001 f801 	bl	46d4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    36d2:	6978      	ldr	r0, [r7, #20]
    36d4:	68f9      	ldr	r1, [r7, #12]
    36d6:	683a      	ldr	r2, [r7, #0]
    36d8:	f001 faa6 	bl	4c28 <pxPortInitialiseStack>
    36dc:	4602      	mov	r2, r0
    36de:	69bb      	ldr	r3, [r7, #24]
    36e0:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    36e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36e4:	2b00      	cmp	r3, #0
    36e6:	d002      	beq.n	36ee <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    36e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36ea:	69ba      	ldr	r2, [r7, #24]
    36ec:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    36ee:	f001 fb1f 	bl	4d30 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    36f2:	f240 1398 	movw	r3, #408	; 0x198
    36f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36fa:	681b      	ldr	r3, [r3, #0]
    36fc:	f103 0201 	add.w	r2, r3, #1
    3700:	f240 1398 	movw	r3, #408	; 0x198
    3704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3708:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    370a:	f240 03c0 	movw	r3, #192	; 0xc0
    370e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3712:	681b      	ldr	r3, [r3, #0]
    3714:	2b00      	cmp	r3, #0
    3716:	d10f      	bne.n	3738 <xTaskGenericCreate+0xb4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    3718:	f240 03c0 	movw	r3, #192	; 0xc0
    371c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3720:	69ba      	ldr	r2, [r7, #24]
    3722:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    3724:	f240 1398 	movw	r3, #408	; 0x198
    3728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    372c:	681b      	ldr	r3, [r3, #0]
    372e:	2b01      	cmp	r3, #1
    3730:	d118      	bne.n	3764 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3732:	f001 f80b 	bl	474c <prvInitialiseTaskLists>
    3736:	e015      	b.n	3764 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    3738:	f240 13a8 	movw	r3, #424	; 0x1a8
    373c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3740:	681b      	ldr	r3, [r3, #0]
    3742:	2b00      	cmp	r3, #0
    3744:	d10e      	bne.n	3764 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3746:	f240 03c0 	movw	r3, #192	; 0xc0
    374a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    374e:	681b      	ldr	r3, [r3, #0]
    3750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3752:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3754:	429a      	cmp	r2, r3
    3756:	d805      	bhi.n	3764 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
    3758:	f240 03c0 	movw	r3, #192	; 0xc0
    375c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3760:	69ba      	ldr	r2, [r7, #24]
    3762:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    3764:	69bb      	ldr	r3, [r7, #24]
    3766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3768:	f240 13a0 	movw	r3, #416	; 0x1a0
    376c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3770:	681b      	ldr	r3, [r3, #0]
    3772:	429a      	cmp	r2, r3
    3774:	d906      	bls.n	3784 <xTaskGenericCreate+0x100>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3776:	69bb      	ldr	r3, [r7, #24]
    3778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    377a:	f240 13a0 	movw	r3, #416	; 0x1a0
    377e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3782:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
    3784:	f240 13bc 	movw	r3, #444	; 0x1bc
    3788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    378c:	681a      	ldr	r2, [r3, #0]
    378e:	69bb      	ldr	r3, [r7, #24]
    3790:	645a      	str	r2, [r3, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
    3792:	f240 13bc 	movw	r3, #444	; 0x1bc
    3796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    379a:	681b      	ldr	r3, [r3, #0]
    379c:	f103 0201 	add.w	r2, r3, #1
    37a0:	f240 13bc 	movw	r3, #444	; 0x1bc
    37a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37a8:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    37aa:	69bb      	ldr	r3, [r7, #24]
    37ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37ae:	f240 13a4 	movw	r3, #420	; 0x1a4
    37b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37b6:	681b      	ldr	r3, [r3, #0]
    37b8:	429a      	cmp	r2, r3
    37ba:	d906      	bls.n	37ca <xTaskGenericCreate+0x146>
    37bc:	69bb      	ldr	r3, [r7, #24]
    37be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37c0:	f240 13a4 	movw	r3, #420	; 0x1a4
    37c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37c8:	601a      	str	r2, [r3, #0]
    37ca:	69bb      	ldr	r3, [r7, #24]
    37cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37ce:	4613      	mov	r3, r2
    37d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    37d4:	189b      	adds	r3, r3, r2
    37d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    37da:	461a      	mov	r2, r3
    37dc:	f240 03c4 	movw	r3, #196	; 0xc4
    37e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37e4:	18d2      	adds	r2, r2, r3
    37e6:	69bb      	ldr	r3, [r7, #24]
    37e8:	f103 0304 	add.w	r3, r3, #4
    37ec:	4610      	mov	r0, r2
    37ee:	4619      	mov	r1, r3
    37f0:	f7ff fa4a 	bl	2c88 <vListInsertEnd>

			xReturn = pdPASS;
    37f4:	f04f 0301 	mov.w	r3, #1
    37f8:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    37fa:	f001 faaf 	bl	4d5c <vPortExitCritical>
    37fe:	e002      	b.n	3806 <xTaskGenericCreate+0x182>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3800:	f04f 33ff 	mov.w	r3, #4294967295
    3804:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    3806:	69fb      	ldr	r3, [r7, #28]
    3808:	2b01      	cmp	r3, #1
    380a:	d111      	bne.n	3830 <xTaskGenericCreate+0x1ac>
	{
		if( xSchedulerRunning != pdFALSE )
    380c:	f240 13a8 	movw	r3, #424	; 0x1a8
    3810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3814:	681b      	ldr	r3, [r3, #0]
    3816:	2b00      	cmp	r3, #0
    3818:	d00a      	beq.n	3830 <xTaskGenericCreate+0x1ac>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    381a:	f240 03c0 	movw	r3, #192	; 0xc0
    381e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3822:	681b      	ldr	r3, [r3, #0]
    3824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3826:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3828:	429a      	cmp	r2, r3
    382a:	d201      	bcs.n	3830 <xTaskGenericCreate+0x1ac>
			{
				portYIELD_WITHIN_API();
    382c:	f001 fa74 	bl	4d18 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    3830:	69fb      	ldr	r3, [r7, #28]
}
    3832:	4618      	mov	r0, r3
    3834:	f107 0720 	add.w	r7, r7, #32
    3838:	46bd      	mov	sp, r7
    383a:	bd80      	pop	{r7, pc}

0000383c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    383c:	b580      	push	{r7, lr}
    383e:	b084      	sub	sp, #16
    3840:	af00      	add	r7, sp, #0
    3842:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3844:	f001 fa74 	bl	4d30 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3848:	f240 03c0 	movw	r3, #192	; 0xc0
    384c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3850:	681b      	ldr	r3, [r3, #0]
    3852:	687a      	ldr	r2, [r7, #4]
    3854:	429a      	cmp	r2, r3
    3856:	d102      	bne.n	385e <vTaskDelete+0x22>
			{
				pxTaskToDelete = NULL;
    3858:	f04f 0300 	mov.w	r3, #0
    385c:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    385e:	687b      	ldr	r3, [r7, #4]
    3860:	2b00      	cmp	r3, #0
    3862:	d105      	bne.n	3870 <vTaskDelete+0x34>
    3864:	f240 03c0 	movw	r3, #192	; 0xc0
    3868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    386c:	681b      	ldr	r3, [r3, #0]
    386e:	e000      	b.n	3872 <vTaskDelete+0x36>
    3870:	687b      	ldr	r3, [r7, #4]
    3872:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3874:	68fb      	ldr	r3, [r7, #12]
    3876:	f103 0304 	add.w	r3, r3, #4
    387a:	4618      	mov	r0, r3
    387c:	f7ff fa66 	bl	2d4c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3880:	68fb      	ldr	r3, [r7, #12]
    3882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3884:	2b00      	cmp	r3, #0
    3886:	d005      	beq.n	3894 <vTaskDelete+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3888:	68fb      	ldr	r3, [r7, #12]
    388a:	f103 0318 	add.w	r3, r3, #24
    388e:	4618      	mov	r0, r3
    3890:	f7ff fa5c 	bl	2d4c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3894:	68fb      	ldr	r3, [r7, #12]
    3896:	f103 0304 	add.w	r3, r3, #4
    389a:	f240 106c 	movw	r0, #364	; 0x16c
    389e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    38a2:	4619      	mov	r1, r3
    38a4:	f7ff f9f0 	bl	2c88 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    38a8:	f240 1380 	movw	r3, #384	; 0x180
    38ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38b0:	681b      	ldr	r3, [r3, #0]
    38b2:	f103 0201 	add.w	r2, r3, #1
    38b6:	f240 1380 	movw	r3, #384	; 0x180
    38ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38be:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    38c0:	f240 13bc 	movw	r3, #444	; 0x1bc
    38c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38c8:	681b      	ldr	r3, [r3, #0]
    38ca:	f103 0201 	add.w	r2, r3, #1
    38ce:	f240 13bc 	movw	r3, #444	; 0x1bc
    38d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38d6:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    38d8:	f001 fa40 	bl	4d5c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    38dc:	f240 13a8 	movw	r3, #424	; 0x1a8
    38e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38e4:	681b      	ldr	r3, [r3, #0]
    38e6:	2b00      	cmp	r3, #0
    38e8:	d004      	beq.n	38f4 <vTaskDelete+0xb8>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    38ea:	687b      	ldr	r3, [r7, #4]
    38ec:	2b00      	cmp	r3, #0
    38ee:	d101      	bne.n	38f4 <vTaskDelete+0xb8>
			{
				portYIELD_WITHIN_API();
    38f0:	f001 fa12 	bl	4d18 <vPortYieldFromISR>
			}
		}
	}
    38f4:	f107 0710 	add.w	r7, r7, #16
    38f8:	46bd      	mov	sp, r7
    38fa:	bd80      	pop	{r7, pc}

000038fc <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    38fc:	b580      	push	{r7, lr}
    38fe:	b086      	sub	sp, #24
    3900:	af00      	add	r7, sp, #0
    3902:	6078      	str	r0, [r7, #4]
    3904:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    3906:	f04f 0300 	mov.w	r3, #0
    390a:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    390c:	f000 fac0 	bl	3e90 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3910:	687b      	ldr	r3, [r7, #4]
    3912:	681a      	ldr	r2, [r3, #0]
    3914:	683b      	ldr	r3, [r7, #0]
    3916:	18d3      	adds	r3, r2, r3
    3918:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    391a:	687b      	ldr	r3, [r7, #4]
    391c:	681a      	ldr	r2, [r3, #0]
    391e:	f240 139c 	movw	r3, #412	; 0x19c
    3922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3926:	681b      	ldr	r3, [r3, #0]
    3928:	429a      	cmp	r2, r3
    392a:	d910      	bls.n	394e <vTaskDelayUntil+0x52>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    392c:	687b      	ldr	r3, [r7, #4]
    392e:	681a      	ldr	r2, [r3, #0]
    3930:	693b      	ldr	r3, [r7, #16]
    3932:	429a      	cmp	r2, r3
    3934:	d91b      	bls.n	396e <vTaskDelayUntil+0x72>
    3936:	f240 139c 	movw	r3, #412	; 0x19c
    393a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    393e:	681b      	ldr	r3, [r3, #0]
    3940:	693a      	ldr	r2, [r7, #16]
    3942:	429a      	cmp	r2, r3
    3944:	d913      	bls.n	396e <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
    3946:	f04f 0301 	mov.w	r3, #1
    394a:	617b      	str	r3, [r7, #20]
    394c:	e00f      	b.n	396e <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    394e:	687b      	ldr	r3, [r7, #4]
    3950:	681a      	ldr	r2, [r3, #0]
    3952:	693b      	ldr	r3, [r7, #16]
    3954:	429a      	cmp	r2, r3
    3956:	d807      	bhi.n	3968 <vTaskDelayUntil+0x6c>
    3958:	f240 139c 	movw	r3, #412	; 0x19c
    395c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3960:	681b      	ldr	r3, [r3, #0]
    3962:	693a      	ldr	r2, [r7, #16]
    3964:	429a      	cmp	r2, r3
    3966:	d902      	bls.n	396e <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
    3968:	f04f 0301 	mov.w	r3, #1
    396c:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    396e:	687b      	ldr	r3, [r7, #4]
    3970:	693a      	ldr	r2, [r7, #16]
    3972:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    3974:	697b      	ldr	r3, [r7, #20]
    3976:	2b00      	cmp	r3, #0
    3978:	d00c      	beq.n	3994 <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    397a:	f240 03c0 	movw	r3, #192	; 0xc0
    397e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3982:	681b      	ldr	r3, [r3, #0]
    3984:	f103 0304 	add.w	r3, r3, #4
    3988:	4618      	mov	r0, r3
    398a:	f7ff f9df 	bl	2d4c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    398e:	6938      	ldr	r0, [r7, #16]
    3990:	f000 ff7a 	bl	4888 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3994:	f000 fa8e 	bl	3eb4 <xTaskResumeAll>
    3998:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    399a:	68fb      	ldr	r3, [r7, #12]
    399c:	2b00      	cmp	r3, #0
    399e:	d101      	bne.n	39a4 <vTaskDelayUntil+0xa8>
		{
			portYIELD_WITHIN_API();
    39a0:	f001 f9ba 	bl	4d18 <vPortYieldFromISR>
		}
	}
    39a4:	f107 0718 	add.w	r7, r7, #24
    39a8:	46bd      	mov	sp, r7
    39aa:	bd80      	pop	{r7, pc}

000039ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    39ac:	b580      	push	{r7, lr}
    39ae:	b084      	sub	sp, #16
    39b0:	af00      	add	r7, sp, #0
    39b2:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    39b4:	f04f 0300 	mov.w	r3, #0
    39b8:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    39ba:	687b      	ldr	r3, [r7, #4]
    39bc:	2b00      	cmp	r3, #0
    39be:	d019      	beq.n	39f4 <vTaskDelay+0x48>
		{
			vTaskSuspendAll();
    39c0:	f000 fa66 	bl	3e90 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    39c4:	f240 139c 	movw	r3, #412	; 0x19c
    39c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39cc:	681a      	ldr	r2, [r3, #0]
    39ce:	687b      	ldr	r3, [r7, #4]
    39d0:	18d3      	adds	r3, r2, r3
    39d2:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    39d4:	f240 03c0 	movw	r3, #192	; 0xc0
    39d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39dc:	681b      	ldr	r3, [r3, #0]
    39de:	f103 0304 	add.w	r3, r3, #4
    39e2:	4618      	mov	r0, r3
    39e4:	f7ff f9b2 	bl	2d4c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    39e8:	68b8      	ldr	r0, [r7, #8]
    39ea:	f000 ff4d 	bl	4888 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    39ee:	f000 fa61 	bl	3eb4 <xTaskResumeAll>
    39f2:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    39f4:	68fb      	ldr	r3, [r7, #12]
    39f6:	2b00      	cmp	r3, #0
    39f8:	d101      	bne.n	39fe <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    39fa:	f001 f98d 	bl	4d18 <vPortYieldFromISR>
		}
	}
    39fe:	f107 0710 	add.w	r7, r7, #16
    3a02:	46bd      	mov	sp, r7
    3a04:	bd80      	pop	{r7, pc}
    3a06:	bf00      	nop

00003a08 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    3a08:	b580      	push	{r7, lr}
    3a0a:	b084      	sub	sp, #16
    3a0c:	af00      	add	r7, sp, #0
    3a0e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    3a10:	f001 f98e 	bl	4d30 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3a14:	687b      	ldr	r3, [r7, #4]
    3a16:	2b00      	cmp	r3, #0
    3a18:	d105      	bne.n	3a26 <uxTaskPriorityGet+0x1e>
    3a1a:	f240 03c0 	movw	r3, #192	; 0xc0
    3a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a22:	681b      	ldr	r3, [r3, #0]
    3a24:	e000      	b.n	3a28 <uxTaskPriorityGet+0x20>
    3a26:	687b      	ldr	r3, [r7, #4]
    3a28:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    3a2a:	68fb      	ldr	r3, [r7, #12]
    3a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a2e:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    3a30:	f001 f994 	bl	4d5c <vPortExitCritical>

		return uxReturn;
    3a34:	68bb      	ldr	r3, [r7, #8]
	}
    3a36:	4618      	mov	r0, r3
    3a38:	f107 0710 	add.w	r7, r7, #16
    3a3c:	46bd      	mov	sp, r7
    3a3e:	bd80      	pop	{r7, pc}

00003a40 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    3a40:	b580      	push	{r7, lr}
    3a42:	b086      	sub	sp, #24
    3a44:	af00      	add	r7, sp, #0
    3a46:	6078      	str	r0, [r7, #4]
    3a48:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    3a4a:	f04f 0300 	mov.w	r3, #0
    3a4e:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    3a50:	683b      	ldr	r3, [r7, #0]
    3a52:	2b04      	cmp	r3, #4
    3a54:	d902      	bls.n	3a5c <vTaskPrioritySet+0x1c>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    3a56:	f04f 0304 	mov.w	r3, #4
    3a5a:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    3a5c:	f001 f968 	bl	4d30 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    3a60:	f240 03c0 	movw	r3, #192	; 0xc0
    3a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a68:	681b      	ldr	r3, [r3, #0]
    3a6a:	687a      	ldr	r2, [r7, #4]
    3a6c:	429a      	cmp	r2, r3
    3a6e:	d102      	bne.n	3a76 <vTaskPrioritySet+0x36>
			{
				pxTask = NULL;
    3a70:	f04f 0300 	mov.w	r3, #0
    3a74:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3a76:	687b      	ldr	r3, [r7, #4]
    3a78:	2b00      	cmp	r3, #0
    3a7a:	d105      	bne.n	3a88 <vTaskPrioritySet+0x48>
    3a7c:	f240 03c0 	movw	r3, #192	; 0xc0
    3a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a84:	681b      	ldr	r3, [r3, #0]
    3a86:	e000      	b.n	3a8a <vTaskPrioritySet+0x4a>
    3a88:	687b      	ldr	r3, [r7, #4]
    3a8a:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    3a8c:	693b      	ldr	r3, [r7, #16]
    3a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3a90:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3a92:	68fa      	ldr	r2, [r7, #12]
    3a94:	683b      	ldr	r3, [r7, #0]
    3a96:	429a      	cmp	r2, r3
    3a98:	d062      	beq.n	3b60 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    3a9a:	683a      	ldr	r2, [r7, #0]
    3a9c:	68fb      	ldr	r3, [r7, #12]
    3a9e:	429a      	cmp	r2, r3
    3aa0:	d906      	bls.n	3ab0 <vTaskPrioritySet+0x70>
				{
					if( pxTask != NULL )
    3aa2:	687b      	ldr	r3, [r7, #4]
    3aa4:	2b00      	cmp	r3, #0
    3aa6:	d009      	beq.n	3abc <vTaskPrioritySet+0x7c>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    3aa8:	f04f 0301 	mov.w	r3, #1
    3aac:	617b      	str	r3, [r7, #20]
    3aae:	e005      	b.n	3abc <vTaskPrioritySet+0x7c>
					}
				}
				else if( pxTask == NULL )
    3ab0:	687b      	ldr	r3, [r7, #4]
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	d102      	bne.n	3abc <vTaskPrioritySet+0x7c>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    3ab6:	f04f 0301 	mov.w	r3, #1
    3aba:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3abc:	693b      	ldr	r3, [r7, #16]
    3abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3ac0:	693b      	ldr	r3, [r7, #16]
    3ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ac4:	429a      	cmp	r2, r3
    3ac6:	d102      	bne.n	3ace <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
    3ac8:	693b      	ldr	r3, [r7, #16]
    3aca:	683a      	ldr	r2, [r7, #0]
    3acc:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3ace:	693b      	ldr	r3, [r7, #16]
    3ad0:	683a      	ldr	r2, [r7, #0]
    3ad2:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3ad4:	683b      	ldr	r3, [r7, #0]
    3ad6:	f1c3 0205 	rsb	r2, r3, #5
    3ada:	693b      	ldr	r3, [r7, #16]
    3adc:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3ade:	693b      	ldr	r3, [r7, #16]
    3ae0:	6959      	ldr	r1, [r3, #20]
    3ae2:	68fa      	ldr	r2, [r7, #12]
    3ae4:	4613      	mov	r3, r2
    3ae6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3aea:	189b      	adds	r3, r3, r2
    3aec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3af0:	461a      	mov	r2, r3
    3af2:	f240 03c4 	movw	r3, #196	; 0xc4
    3af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3afa:	18d3      	adds	r3, r2, r3
    3afc:	4299      	cmp	r1, r3
    3afe:	d12a      	bne.n	3b56 <vTaskPrioritySet+0x116>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3b00:	693b      	ldr	r3, [r7, #16]
    3b02:	f103 0304 	add.w	r3, r3, #4
    3b06:	4618      	mov	r0, r3
    3b08:	f7ff f920 	bl	2d4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3b0c:	693b      	ldr	r3, [r7, #16]
    3b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3b10:	f240 13a4 	movw	r3, #420	; 0x1a4
    3b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b18:	681b      	ldr	r3, [r3, #0]
    3b1a:	429a      	cmp	r2, r3
    3b1c:	d906      	bls.n	3b2c <vTaskPrioritySet+0xec>
    3b1e:	693b      	ldr	r3, [r7, #16]
    3b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3b22:	f240 13a4 	movw	r3, #420	; 0x1a4
    3b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b2a:	601a      	str	r2, [r3, #0]
    3b2c:	693b      	ldr	r3, [r7, #16]
    3b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3b30:	4613      	mov	r3, r2
    3b32:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3b36:	189b      	adds	r3, r3, r2
    3b38:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3b3c:	461a      	mov	r2, r3
    3b3e:	f240 03c4 	movw	r3, #196	; 0xc4
    3b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b46:	18d2      	adds	r2, r2, r3
    3b48:	693b      	ldr	r3, [r7, #16]
    3b4a:	f103 0304 	add.w	r3, r3, #4
    3b4e:	4610      	mov	r0, r2
    3b50:	4619      	mov	r1, r3
    3b52:	f7ff f899 	bl	2c88 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    3b56:	697b      	ldr	r3, [r7, #20]
    3b58:	2b01      	cmp	r3, #1
    3b5a:	d101      	bne.n	3b60 <vTaskPrioritySet+0x120>
				{
					portYIELD_WITHIN_API();
    3b5c:	f001 f8dc 	bl	4d18 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    3b60:	f001 f8fc 	bl	4d5c <vPortExitCritical>
	}
    3b64:	f107 0718 	add.w	r7, r7, #24
    3b68:	46bd      	mov	sp, r7
    3b6a:	bd80      	pop	{r7, pc}

00003b6c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    3b6c:	b580      	push	{r7, lr}
    3b6e:	b084      	sub	sp, #16
    3b70:	af00      	add	r7, sp, #0
    3b72:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3b74:	f001 f8dc 	bl	4d30 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    3b78:	f240 03c0 	movw	r3, #192	; 0xc0
    3b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b80:	681b      	ldr	r3, [r3, #0]
    3b82:	687a      	ldr	r2, [r7, #4]
    3b84:	429a      	cmp	r2, r3
    3b86:	d102      	bne.n	3b8e <vTaskSuspend+0x22>
			{
				pxTaskToSuspend = NULL;
    3b88:	f04f 0300 	mov.w	r3, #0
    3b8c:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3b8e:	687b      	ldr	r3, [r7, #4]
    3b90:	2b00      	cmp	r3, #0
    3b92:	d105      	bne.n	3ba0 <vTaskSuspend+0x34>
    3b94:	f240 03c0 	movw	r3, #192	; 0xc0
    3b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b9c:	681b      	ldr	r3, [r3, #0]
    3b9e:	e000      	b.n	3ba2 <vTaskSuspend+0x36>
    3ba0:	687b      	ldr	r3, [r7, #4]
    3ba2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3ba4:	68fb      	ldr	r3, [r7, #12]
    3ba6:	f103 0304 	add.w	r3, r3, #4
    3baa:	4618      	mov	r0, r3
    3bac:	f7ff f8ce 	bl	2d4c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3bb0:	68fb      	ldr	r3, [r7, #12]
    3bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3bb4:	2b00      	cmp	r3, #0
    3bb6:	d005      	beq.n	3bc4 <vTaskSuspend+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3bb8:	68fb      	ldr	r3, [r7, #12]
    3bba:	f103 0318 	add.w	r3, r3, #24
    3bbe:	4618      	mov	r0, r3
    3bc0:	f7ff f8c4 	bl	2d4c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3bc4:	68fb      	ldr	r3, [r7, #12]
    3bc6:	f103 0304 	add.w	r3, r3, #4
    3bca:	f240 1084 	movw	r0, #388	; 0x184
    3bce:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3bd2:	4619      	mov	r1, r3
    3bd4:	f7ff f858 	bl	2c88 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3bd8:	f001 f8c0 	bl	4d5c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    3bdc:	687b      	ldr	r3, [r7, #4]
    3bde:	2b00      	cmp	r3, #0
    3be0:	d11f      	bne.n	3c22 <vTaskSuspend+0xb6>
		{
			if( xSchedulerRunning != pdFALSE )
    3be2:	f240 13a8 	movw	r3, #424	; 0x1a8
    3be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bea:	681b      	ldr	r3, [r3, #0]
    3bec:	2b00      	cmp	r3, #0
    3bee:	d002      	beq.n	3bf6 <vTaskSuspend+0x8a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    3bf0:	f001 f892 	bl	4d18 <vPortYieldFromISR>
    3bf4:	e015      	b.n	3c22 <vTaskSuspend+0xb6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3bf6:	f240 1384 	movw	r3, #388	; 0x184
    3bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bfe:	681a      	ldr	r2, [r3, #0]
    3c00:	f240 1398 	movw	r3, #408	; 0x198
    3c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c08:	681b      	ldr	r3, [r3, #0]
    3c0a:	429a      	cmp	r2, r3
    3c0c:	d107      	bne.n	3c1e <vTaskSuspend+0xb2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3c0e:	f240 03c0 	movw	r3, #192	; 0xc0
    3c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c16:	f04f 0200 	mov.w	r2, #0
    3c1a:	601a      	str	r2, [r3, #0]
    3c1c:	e001      	b.n	3c22 <vTaskSuspend+0xb6>
				}
				else
				{
					vTaskSwitchContext();
    3c1e:	f000 fba5 	bl	436c <vTaskSwitchContext>
				}
			}
		}
	}
    3c22:	f107 0710 	add.w	r7, r7, #16
    3c26:	46bd      	mov	sp, r7
    3c28:	bd80      	pop	{r7, pc}
    3c2a:	bf00      	nop

00003c2c <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    3c2c:	b480      	push	{r7}
    3c2e:	b085      	sub	sp, #20
    3c30:	af00      	add	r7, sp, #0
    3c32:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    3c34:	f04f 0300 	mov.w	r3, #0
    3c38:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    3c3a:	687b      	ldr	r3, [r7, #4]
    3c3c:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3c3e:	68bb      	ldr	r3, [r7, #8]
    3c40:	695a      	ldr	r2, [r3, #20]
    3c42:	f240 1384 	movw	r3, #388	; 0x184
    3c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c4a:	429a      	cmp	r2, r3
    3c4c:	d10e      	bne.n	3c6c <xTaskIsTaskSuspended+0x40>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    3c4e:	68bb      	ldr	r3, [r7, #8]
    3c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3c52:	f240 1358 	movw	r3, #344	; 0x158
    3c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c5a:	429a      	cmp	r2, r3
    3c5c:	d006      	beq.n	3c6c <xTaskIsTaskSuspended+0x40>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    3c5e:	68bb      	ldr	r3, [r7, #8]
    3c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c62:	2b00      	cmp	r3, #0
    3c64:	d102      	bne.n	3c6c <xTaskIsTaskSuspended+0x40>
				{
					xReturn = pdTRUE;
    3c66:	f04f 0301 	mov.w	r3, #1
    3c6a:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    3c6c:	68fb      	ldr	r3, [r7, #12]
	}
    3c6e:	4618      	mov	r0, r3
    3c70:	f107 0714 	add.w	r7, r7, #20
    3c74:	46bd      	mov	sp, r7
    3c76:	bc80      	pop	{r7}
    3c78:	4770      	bx	lr
    3c7a:	bf00      	nop

00003c7c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    3c7c:	b580      	push	{r7, lr}
    3c7e:	b084      	sub	sp, #16
    3c80:	af00      	add	r7, sp, #0
    3c82:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3c88:	68fb      	ldr	r3, [r7, #12]
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d048      	beq.n	3d20 <vTaskResume+0xa4>
    3c8e:	f240 03c0 	movw	r3, #192	; 0xc0
    3c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c96:	681b      	ldr	r3, [r3, #0]
    3c98:	68fa      	ldr	r2, [r7, #12]
    3c9a:	429a      	cmp	r2, r3
    3c9c:	d040      	beq.n	3d20 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
    3c9e:	f001 f847 	bl	4d30 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3ca2:	68f8      	ldr	r0, [r7, #12]
    3ca4:	f7ff ffc2 	bl	3c2c <xTaskIsTaskSuspended>
    3ca8:	4603      	mov	r3, r0
    3caa:	2b01      	cmp	r3, #1
    3cac:	d136      	bne.n	3d1c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3cae:	68fb      	ldr	r3, [r7, #12]
    3cb0:	f103 0304 	add.w	r3, r3, #4
    3cb4:	4618      	mov	r0, r3
    3cb6:	f7ff f849 	bl	2d4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3cba:	68fb      	ldr	r3, [r7, #12]
    3cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3cbe:	f240 13a4 	movw	r3, #420	; 0x1a4
    3cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cc6:	681b      	ldr	r3, [r3, #0]
    3cc8:	429a      	cmp	r2, r3
    3cca:	d906      	bls.n	3cda <vTaskResume+0x5e>
    3ccc:	68fb      	ldr	r3, [r7, #12]
    3cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3cd0:	f240 13a4 	movw	r3, #420	; 0x1a4
    3cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cd8:	601a      	str	r2, [r3, #0]
    3cda:	68fb      	ldr	r3, [r7, #12]
    3cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3cde:	4613      	mov	r3, r2
    3ce0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3ce4:	189b      	adds	r3, r3, r2
    3ce6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3cea:	461a      	mov	r2, r3
    3cec:	f240 03c4 	movw	r3, #196	; 0xc4
    3cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf4:	18d2      	adds	r2, r2, r3
    3cf6:	68fb      	ldr	r3, [r7, #12]
    3cf8:	f103 0304 	add.w	r3, r3, #4
    3cfc:	4610      	mov	r0, r2
    3cfe:	4619      	mov	r1, r3
    3d00:	f7fe ffc2 	bl	2c88 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3d04:	68fb      	ldr	r3, [r7, #12]
    3d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d08:	f240 03c0 	movw	r3, #192	; 0xc0
    3d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d10:	681b      	ldr	r3, [r3, #0]
    3d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3d14:	429a      	cmp	r2, r3
    3d16:	d301      	bcc.n	3d1c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    3d18:	f000 fffe 	bl	4d18 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    3d1c:	f001 f81e 	bl	4d5c <vPortExitCritical>
		}
	}
    3d20:	f107 0710 	add.w	r7, r7, #16
    3d24:	46bd      	mov	sp, r7
    3d26:	bd80      	pop	{r7, pc}

00003d28 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3d28:	b580      	push	{r7, lr}
    3d2a:	b086      	sub	sp, #24
    3d2c:	af00      	add	r7, sp, #0
    3d2e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    3d30:	f04f 0300 	mov.w	r3, #0
    3d34:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    3d36:	687b      	ldr	r3, [r7, #4]
    3d38:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3d3a:	f04f 0300 	mov.w	r3, #0
    3d3e:	60fb      	str	r3, [r7, #12]
    3d40:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3d44:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3d48:	6938      	ldr	r0, [r7, #16]
    3d4a:	f7ff ff6f 	bl	3c2c <xTaskIsTaskSuspended>
    3d4e:	4603      	mov	r3, r0
    3d50:	2b01      	cmp	r3, #1
    3d52:	d149      	bne.n	3de8 <xTaskResumeFromISR+0xc0>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3d54:	f240 13ac 	movw	r3, #428	; 0x1ac
    3d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d5c:	681b      	ldr	r3, [r3, #0]
    3d5e:	2b00      	cmp	r3, #0
    3d60:	d138      	bne.n	3dd4 <xTaskResumeFromISR+0xac>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    3d62:	693b      	ldr	r3, [r7, #16]
    3d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d66:	f240 03c0 	movw	r3, #192	; 0xc0
    3d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d6e:	681b      	ldr	r3, [r3, #0]
    3d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3d72:	429a      	cmp	r2, r3
    3d74:	bf34      	ite	cc
    3d76:	2300      	movcc	r3, #0
    3d78:	2301      	movcs	r3, #1
    3d7a:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3d7c:	693b      	ldr	r3, [r7, #16]
    3d7e:	f103 0304 	add.w	r3, r3, #4
    3d82:	4618      	mov	r0, r3
    3d84:	f7fe ffe2 	bl	2d4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3d88:	693b      	ldr	r3, [r7, #16]
    3d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d8c:	f240 13a4 	movw	r3, #420	; 0x1a4
    3d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d94:	681b      	ldr	r3, [r3, #0]
    3d96:	429a      	cmp	r2, r3
    3d98:	d906      	bls.n	3da8 <xTaskResumeFromISR+0x80>
    3d9a:	693b      	ldr	r3, [r7, #16]
    3d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d9e:	f240 13a4 	movw	r3, #420	; 0x1a4
    3da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3da6:	601a      	str	r2, [r3, #0]
    3da8:	693b      	ldr	r3, [r7, #16]
    3daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3dac:	4613      	mov	r3, r2
    3dae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3db2:	189b      	adds	r3, r3, r2
    3db4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3db8:	461a      	mov	r2, r3
    3dba:	f240 03c4 	movw	r3, #196	; 0xc4
    3dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dc2:	18d2      	adds	r2, r2, r3
    3dc4:	693b      	ldr	r3, [r7, #16]
    3dc6:	f103 0304 	add.w	r3, r3, #4
    3dca:	4610      	mov	r0, r2
    3dcc:	4619      	mov	r1, r3
    3dce:	f7fe ff5b 	bl	2c88 <vListInsertEnd>
    3dd2:	e009      	b.n	3de8 <xTaskResumeFromISR+0xc0>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3dd4:	693b      	ldr	r3, [r7, #16]
    3dd6:	f103 0318 	add.w	r3, r3, #24
    3dda:	f240 1058 	movw	r0, #344	; 0x158
    3dde:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3de2:	4619      	mov	r1, r3
    3de4:	f7fe ff50 	bl	2c88 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3de8:	f04f 0000 	mov.w	r0, #0
    3dec:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    3df0:	697b      	ldr	r3, [r7, #20]
	}
    3df2:	4618      	mov	r0, r3
    3df4:	f107 0718 	add.w	r7, r7, #24
    3df8:	46bd      	mov	sp, r7
    3dfa:	bd80      	pop	{r7, pc}

00003dfc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3dfc:	b580      	push	{r7, lr}
    3dfe:	b086      	sub	sp, #24
    3e00:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    3e02:	f04f 0300 	mov.w	r3, #0
    3e06:	9300      	str	r3, [sp, #0]
    3e08:	f04f 0300 	mov.w	r3, #0
    3e0c:	9301      	str	r3, [sp, #4]
    3e0e:	f04f 0300 	mov.w	r3, #0
    3e12:	9302      	str	r3, [sp, #8]
    3e14:	f04f 0300 	mov.w	r3, #0
    3e18:	9303      	str	r3, [sp, #12]
    3e1a:	f244 60b1 	movw	r0, #18097	; 0x46b1
    3e1e:	f2c0 0000 	movt	r0, #0
    3e22:	f646 317c 	movw	r1, #27516	; 0x6b7c
    3e26:	f2c0 0100 	movt	r1, #0
    3e2a:	f04f 0280 	mov.w	r2, #128	; 0x80
    3e2e:	f04f 0300 	mov.w	r3, #0
    3e32:	f7ff fc27 	bl	3684 <xTaskGenericCreate>
    3e36:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	2b01      	cmp	r3, #1
    3e3c:	d113      	bne.n	3e66 <vTaskStartScheduler+0x6a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3e3e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3e42:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    3e46:	f240 13a8 	movw	r3, #424	; 0x1a8
    3e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e4e:	f04f 0201 	mov.w	r2, #1
    3e52:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    3e54:	f240 139c 	movw	r3, #412	; 0x19c
    3e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e5c:	f04f 0200 	mov.w	r2, #0
    3e60:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3e62:	f000 ff29 	bl	4cb8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3e66:	f107 0708 	add.w	r7, r7, #8
    3e6a:	46bd      	mov	sp, r7
    3e6c:	bd80      	pop	{r7, pc}
    3e6e:	bf00      	nop

00003e70 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3e70:	b580      	push	{r7, lr}
    3e72:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3e74:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3e78:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    3e7c:	f240 13a8 	movw	r3, #424	; 0x1a8
    3e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e84:	f04f 0200 	mov.w	r2, #0
    3e88:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3e8a:	f000 ff3f 	bl	4d0c <vPortEndScheduler>
}
    3e8e:	bd80      	pop	{r7, pc}

00003e90 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3e90:	b480      	push	{r7}
    3e92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3e94:	f240 13ac 	movw	r3, #428	; 0x1ac
    3e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e9c:	681b      	ldr	r3, [r3, #0]
    3e9e:	f103 0201 	add.w	r2, r3, #1
    3ea2:	f240 13ac 	movw	r3, #428	; 0x1ac
    3ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eaa:	601a      	str	r2, [r3, #0]
}
    3eac:	46bd      	mov	sp, r7
    3eae:	bc80      	pop	{r7}
    3eb0:	4770      	bx	lr
    3eb2:	bf00      	nop

00003eb4 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3eb4:	b590      	push	{r4, r7, lr}
    3eb6:	b083      	sub	sp, #12
    3eb8:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3eba:	f04f 0300 	mov.w	r3, #0
    3ebe:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3ec0:	f000 ff36 	bl	4d30 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3ec4:	f240 13ac 	movw	r3, #428	; 0x1ac
    3ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ecc:	681b      	ldr	r3, [r3, #0]
    3ece:	f103 32ff 	add.w	r2, r3, #4294967295
    3ed2:	f240 13ac 	movw	r3, #428	; 0x1ac
    3ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eda:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3edc:	f240 13ac 	movw	r3, #428	; 0x1ac
    3ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ee4:	681b      	ldr	r3, [r3, #0]
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	f040 8085 	bne.w	3ff6 <xTaskResumeAll+0x142>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3eec:	f240 1398 	movw	r3, #408	; 0x198
    3ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ef4:	681b      	ldr	r3, [r3, #0]
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d07d      	beq.n	3ff6 <xTaskResumeAll+0x142>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3efa:	f04f 0300 	mov.w	r3, #0
    3efe:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3f00:	e03c      	b.n	3f7c <xTaskResumeAll+0xc8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3f02:	f240 1358 	movw	r3, #344	; 0x158
    3f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f0a:	68db      	ldr	r3, [r3, #12]
    3f0c:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    3f0e:	f104 0318 	add.w	r3, r4, #24
    3f12:	4618      	mov	r0, r3
    3f14:	f7fe ff1a 	bl	2d4c <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3f18:	f104 0304 	add.w	r3, r4, #4
    3f1c:	4618      	mov	r0, r3
    3f1e:	f7fe ff15 	bl	2d4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3f22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3f24:	f240 13a4 	movw	r3, #420	; 0x1a4
    3f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f2c:	681b      	ldr	r3, [r3, #0]
    3f2e:	429a      	cmp	r2, r3
    3f30:	d905      	bls.n	3f3e <xTaskResumeAll+0x8a>
    3f32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3f34:	f240 13a4 	movw	r3, #420	; 0x1a4
    3f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f3c:	601a      	str	r2, [r3, #0]
    3f3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3f40:	4613      	mov	r3, r2
    3f42:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3f46:	189b      	adds	r3, r3, r2
    3f48:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3f4c:	461a      	mov	r2, r3
    3f4e:	f240 03c4 	movw	r3, #196	; 0xc4
    3f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f56:	18d2      	adds	r2, r2, r3
    3f58:	f104 0304 	add.w	r3, r4, #4
    3f5c:	4610      	mov	r0, r2
    3f5e:	4619      	mov	r1, r3
    3f60:	f7fe fe92 	bl	2c88 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3f64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3f66:	f240 03c0 	movw	r3, #192	; 0xc0
    3f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f72:	429a      	cmp	r2, r3
    3f74:	d302      	bcc.n	3f7c <xTaskResumeAll+0xc8>
					{
						xYieldRequired = pdTRUE;
    3f76:	f04f 0301 	mov.w	r3, #1
    3f7a:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3f7c:	f240 1358 	movw	r3, #344	; 0x158
    3f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f84:	681b      	ldr	r3, [r3, #0]
    3f86:	2b00      	cmp	r3, #0
    3f88:	d1bb      	bne.n	3f02 <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3f8a:	f240 13b0 	movw	r3, #432	; 0x1b0
    3f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f92:	681b      	ldr	r3, [r3, #0]
    3f94:	2b00      	cmp	r3, #0
    3f96:	d018      	beq.n	3fca <xTaskResumeAll+0x116>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3f98:	e00d      	b.n	3fb6 <xTaskResumeAll+0x102>
					{
						vTaskIncrementTick();
    3f9a:	f000 f901 	bl	41a0 <vTaskIncrementTick>
						--uxMissedTicks;
    3f9e:	f240 13b0 	movw	r3, #432	; 0x1b0
    3fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fa6:	681b      	ldr	r3, [r3, #0]
    3fa8:	f103 32ff 	add.w	r2, r3, #4294967295
    3fac:	f240 13b0 	movw	r3, #432	; 0x1b0
    3fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fb4:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3fb6:	f240 13b0 	movw	r3, #432	; 0x1b0
    3fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fbe:	681b      	ldr	r3, [r3, #0]
    3fc0:	2b00      	cmp	r3, #0
    3fc2:	d1ea      	bne.n	3f9a <xTaskResumeAll+0xe6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    3fc4:	f04f 0301 	mov.w	r3, #1
    3fc8:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3fca:	683b      	ldr	r3, [r7, #0]
    3fcc:	2b01      	cmp	r3, #1
    3fce:	d006      	beq.n	3fde <xTaskResumeAll+0x12a>
    3fd0:	f240 13b4 	movw	r3, #436	; 0x1b4
    3fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fd8:	681b      	ldr	r3, [r3, #0]
    3fda:	2b01      	cmp	r3, #1
    3fdc:	d10b      	bne.n	3ff6 <xTaskResumeAll+0x142>
				{
					xAlreadyYielded = pdTRUE;
    3fde:	f04f 0301 	mov.w	r3, #1
    3fe2:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    3fe4:	f240 13b4 	movw	r3, #436	; 0x1b4
    3fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fec:	f04f 0200 	mov.w	r2, #0
    3ff0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    3ff2:	f000 fe91 	bl	4d18 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3ff6:	f000 feb1 	bl	4d5c <vPortExitCritical>

	return xAlreadyYielded;
    3ffa:	687b      	ldr	r3, [r7, #4]
}
    3ffc:	4618      	mov	r0, r3
    3ffe:	f107 070c 	add.w	r7, r7, #12
    4002:	46bd      	mov	sp, r7
    4004:	bd90      	pop	{r4, r7, pc}
    4006:	bf00      	nop

00004008 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    4008:	b580      	push	{r7, lr}
    400a:	b082      	sub	sp, #8
    400c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    400e:	f000 fe8f 	bl	4d30 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    4012:	f240 139c 	movw	r3, #412	; 0x19c
    4016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    401a:	681b      	ldr	r3, [r3, #0]
    401c:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    401e:	f000 fe9d 	bl	4d5c <vPortExitCritical>

	return xTicks;
    4022:	687b      	ldr	r3, [r7, #4]
}
    4024:	4618      	mov	r0, r3
    4026:	f107 0708 	add.w	r7, r7, #8
    402a:	46bd      	mov	sp, r7
    402c:	bd80      	pop	{r7, pc}
    402e:	bf00      	nop

00004030 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4030:	b480      	push	{r7}
    4032:	b083      	sub	sp, #12
    4034:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4036:	f04f 0300 	mov.w	r3, #0
    403a:	607b      	str	r3, [r7, #4]
    403c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4040:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    4044:	f240 139c 	movw	r3, #412	; 0x19c
    4048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    404c:	681b      	ldr	r3, [r3, #0]
    404e:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4050:	f04f 0000 	mov.w	r0, #0
    4054:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4058:	683b      	ldr	r3, [r7, #0]
}
    405a:	4618      	mov	r0, r3
    405c:	f107 070c 	add.w	r7, r7, #12
    4060:	46bd      	mov	sp, r7
    4062:	bc80      	pop	{r7}
    4064:	4770      	bx	lr
    4066:	bf00      	nop

00004068 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    4068:	b480      	push	{r7}
    406a:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    406c:	f240 1398 	movw	r3, #408	; 0x198
    4070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4074:	681b      	ldr	r3, [r3, #0]
}
    4076:	4618      	mov	r0, r3
    4078:	46bd      	mov	sp, r7
    407a:	bc80      	pop	{r7}
    407c:	4770      	bx	lr
    407e:	bf00      	nop

00004080 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
    4080:	b580      	push	{r7, lr}
    4082:	b084      	sub	sp, #16
    4084:	af00      	add	r7, sp, #0
    4086:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxQueue;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
    4088:	f7ff ff02 	bl	3e90 <vTaskSuspendAll>
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			*pcWriteBuffer = ( signed char ) 0x00;
    408c:	687b      	ldr	r3, [r7, #4]
    408e:	f04f 0200 	mov.w	r2, #0
    4092:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
    4094:	6878      	ldr	r0, [r7, #4]
    4096:	f646 3184 	movw	r1, #27524	; 0x6b84
    409a:	f2c0 0100 	movt	r1, #0
    409e:	f002 fb87 	bl	67b0 <strcat>

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
    40a2:	f240 13a0 	movw	r3, #416	; 0x1a0
    40a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40aa:	681b      	ldr	r3, [r3, #0]
    40ac:	f103 0301 	add.w	r3, r3, #1
    40b0:	60fb      	str	r3, [r7, #12]

			do
			{
				uxQueue--;
    40b2:	68fb      	ldr	r3, [r7, #12]
    40b4:	f103 33ff 	add.w	r3, r3, #4294967295
    40b8:	60fb      	str	r3, [r7, #12]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
    40ba:	68fa      	ldr	r2, [r7, #12]
    40bc:	4613      	mov	r3, r2
    40be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    40c2:	189b      	adds	r3, r3, r2
    40c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    40c8:	461a      	mov	r2, r3
    40ca:	f240 03c4 	movw	r3, #196	; 0xc4
    40ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40d2:	18d3      	adds	r3, r2, r3
    40d4:	681b      	ldr	r3, [r3, #0]
    40d6:	2b00      	cmp	r3, #0
    40d8:	d012      	beq.n	4100 <vTaskList+0x80>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    40da:	68fa      	ldr	r2, [r7, #12]
    40dc:	4613      	mov	r3, r2
    40de:	ea4f 0383 	mov.w	r3, r3, lsl #2
    40e2:	189b      	adds	r3, r3, r2
    40e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    40e8:	461a      	mov	r2, r3
    40ea:	f240 03c4 	movw	r3, #196	; 0xc4
    40ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40f2:	18d3      	adds	r3, r2, r3
    40f4:	6878      	ldr	r0, [r7, #4]
    40f6:	4619      	mov	r1, r3
    40f8:	f04f 0252 	mov.w	r2, #82	; 0x52
    40fc:	f000 fc42 	bl	4984 <prvListTaskWithinSingleList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    4100:	68fb      	ldr	r3, [r7, #12]
    4102:	2b00      	cmp	r3, #0
    4104:	d1d5      	bne.n	40b2 <vTaskList+0x32>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
    4106:	f240 1350 	movw	r3, #336	; 0x150
    410a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    410e:	681b      	ldr	r3, [r3, #0]
    4110:	681b      	ldr	r3, [r3, #0]
    4112:	2b00      	cmp	r3, #0
    4114:	d00a      	beq.n	412c <vTaskList+0xac>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
    4116:	f240 1350 	movw	r3, #336	; 0x150
    411a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    411e:	681b      	ldr	r3, [r3, #0]
    4120:	6878      	ldr	r0, [r7, #4]
    4122:	4619      	mov	r1, r3
    4124:	f04f 0242 	mov.w	r2, #66	; 0x42
    4128:	f000 fc2c 	bl	4984 <prvListTaskWithinSingleList>
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
    412c:	f240 1354 	movw	r3, #340	; 0x154
    4130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4134:	681b      	ldr	r3, [r3, #0]
    4136:	681b      	ldr	r3, [r3, #0]
    4138:	2b00      	cmp	r3, #0
    413a:	d00a      	beq.n	4152 <vTaskList+0xd2>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
    413c:	f240 1354 	movw	r3, #340	; 0x154
    4140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4144:	681b      	ldr	r3, [r3, #0]
    4146:	6878      	ldr	r0, [r7, #4]
    4148:	4619      	mov	r1, r3
    414a:	f04f 0242 	mov.w	r2, #66	; 0x42
    414e:	f000 fc19 	bl	4984 <prvListTaskWithinSingleList>
			}

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
    4152:	f240 136c 	movw	r3, #364	; 0x16c
    4156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    415a:	681b      	ldr	r3, [r3, #0]
    415c:	2b00      	cmp	r3, #0
    415e:	d008      	beq.n	4172 <vTaskList+0xf2>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
    4160:	6878      	ldr	r0, [r7, #4]
    4162:	f240 116c 	movw	r1, #364	; 0x16c
    4166:	f2c2 0100 	movt	r1, #8192	; 0x2000
    416a:	f04f 0244 	mov.w	r2, #68	; 0x44
    416e:	f000 fc09 	bl	4984 <prvListTaskWithinSingleList>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
    4172:	f240 1384 	movw	r3, #388	; 0x184
    4176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    417a:	681b      	ldr	r3, [r3, #0]
    417c:	2b00      	cmp	r3, #0
    417e:	d008      	beq.n	4192 <vTaskList+0x112>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
    4180:	6878      	ldr	r0, [r7, #4]
    4182:	f240 1184 	movw	r1, #388	; 0x184
    4186:	f2c2 0100 	movt	r1, #8192	; 0x2000
    418a:	f04f 0253 	mov.w	r2, #83	; 0x53
    418e:	f000 fbf9 	bl	4984 <prvListTaskWithinSingleList>
				}
			}
			#endif
		}
		xTaskResumeAll();
    4192:	f7ff fe8f 	bl	3eb4 <xTaskResumeAll>
	}
    4196:	f107 0710 	add.w	r7, r7, #16
    419a:	46bd      	mov	sp, r7
    419c:	bd80      	pop	{r7, pc}
    419e:	bf00      	nop

000041a0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    41a0:	b580      	push	{r7, lr}
    41a2:	b084      	sub	sp, #16
    41a4:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    41a6:	f240 13ac 	movw	r3, #428	; 0x1ac
    41aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41ae:	681b      	ldr	r3, [r3, #0]
    41b0:	2b00      	cmp	r3, #0
    41b2:	f040 80c0 	bne.w	4336 <vTaskIncrementTick+0x196>
	{
		++xTickCount;
    41b6:	f240 139c 	movw	r3, #412	; 0x19c
    41ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41be:	681b      	ldr	r3, [r3, #0]
    41c0:	f103 0201 	add.w	r2, r3, #1
    41c4:	f240 139c 	movw	r3, #412	; 0x19c
    41c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41cc:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    41ce:	f240 139c 	movw	r3, #412	; 0x19c
    41d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41d6:	681b      	ldr	r3, [r3, #0]
    41d8:	2b00      	cmp	r3, #0
    41da:	d140      	bne.n	425e <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    41dc:	f240 1350 	movw	r3, #336	; 0x150
    41e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41e4:	681b      	ldr	r3, [r3, #0]
    41e6:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    41e8:	f240 1354 	movw	r3, #340	; 0x154
    41ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41f0:	681a      	ldr	r2, [r3, #0]
    41f2:	f240 1350 	movw	r3, #336	; 0x150
    41f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41fa:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    41fc:	f240 1354 	movw	r3, #340	; 0x154
    4200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4204:	68fa      	ldr	r2, [r7, #12]
    4206:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    4208:	f240 13b8 	movw	r3, #440	; 0x1b8
    420c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4210:	681b      	ldr	r3, [r3, #0]
    4212:	f103 0201 	add.w	r2, r3, #1
    4216:	f240 13b8 	movw	r3, #440	; 0x1b8
    421a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    421e:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4220:	f240 1350 	movw	r3, #336	; 0x150
    4224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	681b      	ldr	r3, [r3, #0]
    422c:	2b00      	cmp	r3, #0
    422e:	d107      	bne.n	4240 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    4230:	f240 0328 	movw	r3, #40	; 0x28
    4234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4238:	f04f 32ff 	mov.w	r2, #4294967295
    423c:	601a      	str	r2, [r3, #0]
    423e:	e00e      	b.n	425e <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4240:	f240 1350 	movw	r3, #336	; 0x150
    4244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4248:	681b      	ldr	r3, [r3, #0]
    424a:	68db      	ldr	r3, [r3, #12]
    424c:	68db      	ldr	r3, [r3, #12]
    424e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    4250:	68bb      	ldr	r3, [r7, #8]
    4252:	685a      	ldr	r2, [r3, #4]
    4254:	f240 0328 	movw	r3, #40	; 0x28
    4258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    425c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    425e:	f240 139c 	movw	r3, #412	; 0x19c
    4262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4266:	681a      	ldr	r2, [r3, #0]
    4268:	f240 0328 	movw	r3, #40	; 0x28
    426c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4270:	681b      	ldr	r3, [r3, #0]
    4272:	429a      	cmp	r2, r3
    4274:	d36d      	bcc.n	4352 <vTaskIncrementTick+0x1b2>
    4276:	f240 1350 	movw	r3, #336	; 0x150
    427a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    427e:	681b      	ldr	r3, [r3, #0]
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	2b00      	cmp	r3, #0
    4284:	d107      	bne.n	4296 <vTaskIncrementTick+0xf6>
    4286:	f240 0328 	movw	r3, #40	; 0x28
    428a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    428e:	f04f 32ff 	mov.w	r2, #4294967295
    4292:	601a      	str	r2, [r3, #0]
    4294:	e05d      	b.n	4352 <vTaskIncrementTick+0x1b2>
    4296:	f240 1350 	movw	r3, #336	; 0x150
    429a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    429e:	681b      	ldr	r3, [r3, #0]
    42a0:	68db      	ldr	r3, [r3, #12]
    42a2:	68db      	ldr	r3, [r3, #12]
    42a4:	60bb      	str	r3, [r7, #8]
    42a6:	68bb      	ldr	r3, [r7, #8]
    42a8:	685b      	ldr	r3, [r3, #4]
    42aa:	607b      	str	r3, [r7, #4]
    42ac:	f240 139c 	movw	r3, #412	; 0x19c
    42b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42b4:	681a      	ldr	r2, [r3, #0]
    42b6:	687b      	ldr	r3, [r7, #4]
    42b8:	429a      	cmp	r2, r3
    42ba:	d206      	bcs.n	42ca <vTaskIncrementTick+0x12a>
    42bc:	f240 0328 	movw	r3, #40	; 0x28
    42c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42c4:	687a      	ldr	r2, [r7, #4]
    42c6:	601a      	str	r2, [r3, #0]
    42c8:	e043      	b.n	4352 <vTaskIncrementTick+0x1b2>
    42ca:	68bb      	ldr	r3, [r7, #8]
    42cc:	f103 0304 	add.w	r3, r3, #4
    42d0:	4618      	mov	r0, r3
    42d2:	f7fe fd3b 	bl	2d4c <vListRemove>
    42d6:	68bb      	ldr	r3, [r7, #8]
    42d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42da:	2b00      	cmp	r3, #0
    42dc:	d005      	beq.n	42ea <vTaskIncrementTick+0x14a>
    42de:	68bb      	ldr	r3, [r7, #8]
    42e0:	f103 0318 	add.w	r3, r3, #24
    42e4:	4618      	mov	r0, r3
    42e6:	f7fe fd31 	bl	2d4c <vListRemove>
    42ea:	68bb      	ldr	r3, [r7, #8]
    42ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    42ee:	f240 13a4 	movw	r3, #420	; 0x1a4
    42f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42f6:	681b      	ldr	r3, [r3, #0]
    42f8:	429a      	cmp	r2, r3
    42fa:	d906      	bls.n	430a <vTaskIncrementTick+0x16a>
    42fc:	68bb      	ldr	r3, [r7, #8]
    42fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4300:	f240 13a4 	movw	r3, #420	; 0x1a4
    4304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4308:	601a      	str	r2, [r3, #0]
    430a:	68bb      	ldr	r3, [r7, #8]
    430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    430e:	4613      	mov	r3, r2
    4310:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4314:	189b      	adds	r3, r3, r2
    4316:	ea4f 0383 	mov.w	r3, r3, lsl #2
    431a:	461a      	mov	r2, r3
    431c:	f240 03c4 	movw	r3, #196	; 0xc4
    4320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4324:	18d2      	adds	r2, r2, r3
    4326:	68bb      	ldr	r3, [r7, #8]
    4328:	f103 0304 	add.w	r3, r3, #4
    432c:	4610      	mov	r0, r2
    432e:	4619      	mov	r1, r3
    4330:	f7fe fcaa 	bl	2c88 <vListInsertEnd>
    4334:	e79f      	b.n	4276 <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
    4336:	f240 13b0 	movw	r3, #432	; 0x1b0
    433a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    433e:	681b      	ldr	r3, [r3, #0]
    4340:	f103 0201 	add.w	r2, r3, #1
    4344:	f240 13b0 	movw	r3, #432	; 0x1b0
    4348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    434c:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    434e:	f002 fbe7 	bl	6b20 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    4352:	f240 13b0 	movw	r3, #432	; 0x1b0
    4356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    435a:	681b      	ldr	r3, [r3, #0]
    435c:	2b00      	cmp	r3, #0
    435e:	d101      	bne.n	4364 <vTaskIncrementTick+0x1c4>
		{
			vApplicationTickHook();
    4360:	f002 fbde 	bl	6b20 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    4364:	f107 0710 	add.w	r7, r7, #16
    4368:	46bd      	mov	sp, r7
    436a:	bd80      	pop	{r7, pc}

0000436c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    436c:	b480      	push	{r7}
    436e:	b083      	sub	sp, #12
    4370:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    4372:	f240 13ac 	movw	r3, #428	; 0x1ac
    4376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    437a:	681b      	ldr	r3, [r3, #0]
    437c:	2b00      	cmp	r3, #0
    437e:	d014      	beq.n	43aa <vTaskSwitchContext+0x3e>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    4380:	f240 13b4 	movw	r3, #436	; 0x1b4
    4384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4388:	f04f 0201 	mov.w	r2, #1
    438c:	601a      	str	r2, [r3, #0]
    438e:	e04c      	b.n	442a <vTaskSwitchContext+0xbe>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    4390:	f240 13a4 	movw	r3, #420	; 0x1a4
    4394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4398:	681b      	ldr	r3, [r3, #0]
    439a:	f103 32ff 	add.w	r2, r3, #4294967295
    439e:	f240 13a4 	movw	r3, #420	; 0x1a4
    43a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43a6:	601a      	str	r2, [r3, #0]
    43a8:	e000      	b.n	43ac <vTaskSwitchContext+0x40>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    43aa:	bf00      	nop
    43ac:	f240 13a4 	movw	r3, #420	; 0x1a4
    43b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43b4:	681a      	ldr	r2, [r3, #0]
    43b6:	4613      	mov	r3, r2
    43b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    43bc:	189b      	adds	r3, r3, r2
    43be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    43c2:	461a      	mov	r2, r3
    43c4:	f240 03c4 	movw	r3, #196	; 0xc4
    43c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43cc:	18d3      	adds	r3, r2, r3
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	2b00      	cmp	r3, #0
    43d2:	d0dd      	beq.n	4390 <vTaskSwitchContext+0x24>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    43d4:	f240 13a4 	movw	r3, #420	; 0x1a4
    43d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43dc:	681a      	ldr	r2, [r3, #0]
    43de:	4613      	mov	r3, r2
    43e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    43e4:	189b      	adds	r3, r3, r2
    43e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    43ea:	461a      	mov	r2, r3
    43ec:	f240 03c4 	movw	r3, #196	; 0xc4
    43f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43f4:	18d3      	adds	r3, r2, r3
    43f6:	607b      	str	r3, [r7, #4]
    43f8:	687b      	ldr	r3, [r7, #4]
    43fa:	685b      	ldr	r3, [r3, #4]
    43fc:	685a      	ldr	r2, [r3, #4]
    43fe:	687b      	ldr	r3, [r7, #4]
    4400:	605a      	str	r2, [r3, #4]
    4402:	687b      	ldr	r3, [r7, #4]
    4404:	685a      	ldr	r2, [r3, #4]
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	f103 0308 	add.w	r3, r3, #8
    440c:	429a      	cmp	r2, r3
    440e:	d104      	bne.n	441a <vTaskSwitchContext+0xae>
    4410:	687b      	ldr	r3, [r7, #4]
    4412:	685b      	ldr	r3, [r3, #4]
    4414:	685a      	ldr	r2, [r3, #4]
    4416:	687b      	ldr	r3, [r7, #4]
    4418:	605a      	str	r2, [r3, #4]
    441a:	687b      	ldr	r3, [r7, #4]
    441c:	685b      	ldr	r3, [r3, #4]
    441e:	68da      	ldr	r2, [r3, #12]
    4420:	f240 03c0 	movw	r3, #192	; 0xc0
    4424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4428:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
    442a:	f107 070c 	add.w	r7, r7, #12
    442e:	46bd      	mov	sp, r7
    4430:	bc80      	pop	{r7}
    4432:	4770      	bx	lr

00004434 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    4434:	b580      	push	{r7, lr}
    4436:	b084      	sub	sp, #16
    4438:	af00      	add	r7, sp, #0
    443a:	6078      	str	r0, [r7, #4]
    443c:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    443e:	f240 03c0 	movw	r3, #192	; 0xc0
    4442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4446:	681b      	ldr	r3, [r3, #0]
    4448:	f103 0318 	add.w	r3, r3, #24
    444c:	6878      	ldr	r0, [r7, #4]
    444e:	4619      	mov	r1, r3
    4450:	f7fe fc42 	bl	2cd8 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4454:	f240 03c0 	movw	r3, #192	; 0xc0
    4458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    445c:	681b      	ldr	r3, [r3, #0]
    445e:	f103 0304 	add.w	r3, r3, #4
    4462:	4618      	mov	r0, r3
    4464:	f7fe fc72 	bl	2d4c <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    4468:	683b      	ldr	r3, [r7, #0]
    446a:	f1b3 3fff 	cmp.w	r3, #4294967295
    446e:	d10e      	bne.n	448e <vTaskPlaceOnEventList+0x5a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4470:	f240 03c0 	movw	r3, #192	; 0xc0
    4474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4478:	681b      	ldr	r3, [r3, #0]
    447a:	f103 0304 	add.w	r3, r3, #4
    447e:	f240 1084 	movw	r0, #388	; 0x184
    4482:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4486:	4619      	mov	r1, r3
    4488:	f7fe fbfe 	bl	2c88 <vListInsertEnd>
    448c:	e00a      	b.n	44a4 <vTaskPlaceOnEventList+0x70>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    448e:	f240 139c 	movw	r3, #412	; 0x19c
    4492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4496:	681a      	ldr	r2, [r3, #0]
    4498:	683b      	ldr	r3, [r7, #0]
    449a:	18d3      	adds	r3, r2, r3
    449c:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    449e:	68f8      	ldr	r0, [r7, #12]
    44a0:	f000 f9f2 	bl	4888 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    44a4:	f107 0710 	add.w	r7, r7, #16
    44a8:	46bd      	mov	sp, r7
    44aa:	bd80      	pop	{r7, pc}

000044ac <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    44ac:	b580      	push	{r7, lr}
    44ae:	b084      	sub	sp, #16
    44b0:	af00      	add	r7, sp, #0
    44b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    44b4:	687b      	ldr	r3, [r7, #4]
    44b6:	68db      	ldr	r3, [r3, #12]
    44b8:	68db      	ldr	r3, [r3, #12]
    44ba:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    44bc:	68bb      	ldr	r3, [r7, #8]
    44be:	f103 0318 	add.w	r3, r3, #24
    44c2:	4618      	mov	r0, r3
    44c4:	f7fe fc42 	bl	2d4c <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    44c8:	f240 13ac 	movw	r3, #428	; 0x1ac
    44cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44d0:	681b      	ldr	r3, [r3, #0]
    44d2:	2b00      	cmp	r3, #0
    44d4:	d12b      	bne.n	452e <xTaskRemoveFromEventList+0x82>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    44d6:	68bb      	ldr	r3, [r7, #8]
    44d8:	f103 0304 	add.w	r3, r3, #4
    44dc:	4618      	mov	r0, r3
    44de:	f7fe fc35 	bl	2d4c <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    44e2:	68bb      	ldr	r3, [r7, #8]
    44e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44e6:	f240 13a4 	movw	r3, #420	; 0x1a4
    44ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44ee:	681b      	ldr	r3, [r3, #0]
    44f0:	429a      	cmp	r2, r3
    44f2:	d906      	bls.n	4502 <xTaskRemoveFromEventList+0x56>
    44f4:	68bb      	ldr	r3, [r7, #8]
    44f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44f8:	f240 13a4 	movw	r3, #420	; 0x1a4
    44fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4500:	601a      	str	r2, [r3, #0]
    4502:	68bb      	ldr	r3, [r7, #8]
    4504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4506:	4613      	mov	r3, r2
    4508:	ea4f 0383 	mov.w	r3, r3, lsl #2
    450c:	189b      	adds	r3, r3, r2
    450e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4512:	461a      	mov	r2, r3
    4514:	f240 03c4 	movw	r3, #196	; 0xc4
    4518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    451c:	18d2      	adds	r2, r2, r3
    451e:	68bb      	ldr	r3, [r7, #8]
    4520:	f103 0304 	add.w	r3, r3, #4
    4524:	4610      	mov	r0, r2
    4526:	4619      	mov	r1, r3
    4528:	f7fe fbae 	bl	2c88 <vListInsertEnd>
    452c:	e009      	b.n	4542 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    452e:	68bb      	ldr	r3, [r7, #8]
    4530:	f103 0318 	add.w	r3, r3, #24
    4534:	f240 1058 	movw	r0, #344	; 0x158
    4538:	f2c2 0000 	movt	r0, #8192	; 0x2000
    453c:	4619      	mov	r1, r3
    453e:	f7fe fba3 	bl	2c88 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4542:	68bb      	ldr	r3, [r7, #8]
    4544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4546:	f240 03c0 	movw	r3, #192	; 0xc0
    454a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4552:	429a      	cmp	r2, r3
    4554:	d303      	bcc.n	455e <xTaskRemoveFromEventList+0xb2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4556:	f04f 0301 	mov.w	r3, #1
    455a:	60fb      	str	r3, [r7, #12]
    455c:	e002      	b.n	4564 <xTaskRemoveFromEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
    455e:	f04f 0300 	mov.w	r3, #0
    4562:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    4564:	68fb      	ldr	r3, [r7, #12]
}
    4566:	4618      	mov	r0, r3
    4568:	f107 0710 	add.w	r7, r7, #16
    456c:	46bd      	mov	sp, r7
    456e:	bd80      	pop	{r7, pc}

00004570 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4570:	b480      	push	{r7}
    4572:	b083      	sub	sp, #12
    4574:	af00      	add	r7, sp, #0
    4576:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4578:	f240 13b8 	movw	r3, #440	; 0x1b8
    457c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4580:	681a      	ldr	r2, [r3, #0]
    4582:	687b      	ldr	r3, [r7, #4]
    4584:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4586:	f240 139c 	movw	r3, #412	; 0x19c
    458a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    458e:	681a      	ldr	r2, [r3, #0]
    4590:	687b      	ldr	r3, [r7, #4]
    4592:	605a      	str	r2, [r3, #4]
}
    4594:	f107 070c 	add.w	r7, r7, #12
    4598:	46bd      	mov	sp, r7
    459a:	bc80      	pop	{r7}
    459c:	4770      	bx	lr
    459e:	bf00      	nop

000045a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    45a0:	b580      	push	{r7, lr}
    45a2:	b084      	sub	sp, #16
    45a4:	af00      	add	r7, sp, #0
    45a6:	6078      	str	r0, [r7, #4]
    45a8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    45aa:	f000 fbc1 	bl	4d30 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    45ae:	683b      	ldr	r3, [r7, #0]
    45b0:	681b      	ldr	r3, [r3, #0]
    45b2:	f1b3 3fff 	cmp.w	r3, #4294967295
    45b6:	d103      	bne.n	45c0 <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
    45b8:	f04f 0300 	mov.w	r3, #0
    45bc:	60fb      	str	r3, [r7, #12]
    45be:	e038      	b.n	4632 <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    45c0:	687b      	ldr	r3, [r7, #4]
    45c2:	681a      	ldr	r2, [r3, #0]
    45c4:	f240 13b8 	movw	r3, #440	; 0x1b8
    45c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45cc:	681b      	ldr	r3, [r3, #0]
    45ce:	429a      	cmp	r2, r3
    45d0:	d00c      	beq.n	45ec <xTaskCheckForTimeOut+0x4c>
    45d2:	687b      	ldr	r3, [r7, #4]
    45d4:	685a      	ldr	r2, [r3, #4]
    45d6:	f240 139c 	movw	r3, #412	; 0x19c
    45da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45de:	681b      	ldr	r3, [r3, #0]
    45e0:	429a      	cmp	r2, r3
    45e2:	d803      	bhi.n	45ec <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    45e4:	f04f 0301 	mov.w	r3, #1
    45e8:	60fb      	str	r3, [r7, #12]
    45ea:	e022      	b.n	4632 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    45ec:	f240 139c 	movw	r3, #412	; 0x19c
    45f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45f4:	681a      	ldr	r2, [r3, #0]
    45f6:	687b      	ldr	r3, [r7, #4]
    45f8:	685b      	ldr	r3, [r3, #4]
    45fa:	1ad2      	subs	r2, r2, r3
    45fc:	683b      	ldr	r3, [r7, #0]
    45fe:	681b      	ldr	r3, [r3, #0]
    4600:	429a      	cmp	r2, r3
    4602:	d213      	bcs.n	462c <xTaskCheckForTimeOut+0x8c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    4604:	683b      	ldr	r3, [r7, #0]
    4606:	681a      	ldr	r2, [r3, #0]
    4608:	687b      	ldr	r3, [r7, #4]
    460a:	6859      	ldr	r1, [r3, #4]
    460c:	f240 139c 	movw	r3, #412	; 0x19c
    4610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4614:	681b      	ldr	r3, [r3, #0]
    4616:	1acb      	subs	r3, r1, r3
    4618:	18d2      	adds	r2, r2, r3
    461a:	683b      	ldr	r3, [r7, #0]
    461c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    461e:	6878      	ldr	r0, [r7, #4]
    4620:	f7ff ffa6 	bl	4570 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4624:	f04f 0300 	mov.w	r3, #0
    4628:	60fb      	str	r3, [r7, #12]
    462a:	e002      	b.n	4632 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
    462c:	f04f 0301 	mov.w	r3, #1
    4630:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    4632:	f000 fb93 	bl	4d5c <vPortExitCritical>

	return xReturn;
    4636:	68fb      	ldr	r3, [r7, #12]
}
    4638:	4618      	mov	r0, r3
    463a:	f107 0710 	add.w	r7, r7, #16
    463e:	46bd      	mov	sp, r7
    4640:	bd80      	pop	{r7, pc}
    4642:	bf00      	nop

00004644 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4644:	b480      	push	{r7}
    4646:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    4648:	f240 13b4 	movw	r3, #436	; 0x1b4
    464c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4650:	f04f 0201 	mov.w	r2, #1
    4654:	601a      	str	r2, [r3, #0]
}
    4656:	46bd      	mov	sp, r7
    4658:	bc80      	pop	{r7}
    465a:	4770      	bx	lr

0000465c <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )
	unsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask )
	{
    465c:	b480      	push	{r7}
    465e:	b085      	sub	sp, #20
    4660:	af00      	add	r7, sp, #0
    4662:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxReturn;
	tskTCB *pxTCB;
	
		if( xTask != NULL )
    4664:	687b      	ldr	r3, [r7, #4]
    4666:	2b00      	cmp	r3, #0
    4668:	d005      	beq.n	4676 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( tskTCB * ) xTask;
    466a:	687b      	ldr	r3, [r7, #4]
    466c:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
    466e:	68bb      	ldr	r3, [r7, #8]
    4670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4672:	60fb      	str	r3, [r7, #12]
    4674:	e002      	b.n	467c <uxTaskGetTaskNumber+0x20>
		}
		else
		{
			uxReturn = 0U;
    4676:	f04f 0300 	mov.w	r3, #0
    467a:	60fb      	str	r3, [r7, #12]
		}
		
		return uxReturn;
    467c:	68fb      	ldr	r3, [r7, #12]
	}
    467e:	4618      	mov	r0, r3
    4680:	f107 0714 	add.w	r7, r7, #20
    4684:	46bd      	mov	sp, r7
    4686:	bc80      	pop	{r7}
    4688:	4770      	bx	lr
    468a:	bf00      	nop

0000468c <vTaskSetTaskNumber>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )
	void vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle )
	{
    468c:	b480      	push	{r7}
    468e:	b085      	sub	sp, #20
    4690:	af00      	add	r7, sp, #0
    4692:	6078      	str	r0, [r7, #4]
    4694:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	
		if( xTask != NULL )
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	2b00      	cmp	r3, #0
    469a:	d004      	beq.n	46a6 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( tskTCB * ) xTask;
    469c:	687b      	ldr	r3, [r7, #4]
    469e:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
    46a0:	68fb      	ldr	r3, [r7, #12]
    46a2:	683a      	ldr	r2, [r7, #0]
    46a4:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
    46a6:	f107 0714 	add.w	r7, r7, #20
    46aa:	46bd      	mov	sp, r7
    46ac:	bc80      	pop	{r7}
    46ae:	4770      	bx	lr

000046b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    46b0:	b580      	push	{r7, lr}
    46b2:	b082      	sub	sp, #8
    46b4:	af00      	add	r7, sp, #0
    46b6:	6078      	str	r0, [r7, #4]
    46b8:	e000      	b.n	46bc <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    46ba:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    46bc:	f000 f898 	bl	47f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    46c0:	f240 03c4 	movw	r3, #196	; 0xc4
    46c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46c8:	681b      	ldr	r3, [r3, #0]
    46ca:	2b01      	cmp	r3, #1
    46cc:	d9f5      	bls.n	46ba <prvIdleTask+0xa>
			{
				taskYIELD();
    46ce:	f000 fb23 	bl	4d18 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    46d2:	e7f2      	b.n	46ba <prvIdleTask+0xa>

000046d4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    46d4:	b580      	push	{r7, lr}
    46d6:	b084      	sub	sp, #16
    46d8:	af00      	add	r7, sp, #0
    46da:	60f8      	str	r0, [r7, #12]
    46dc:	60b9      	str	r1, [r7, #8]
    46de:	607a      	str	r2, [r7, #4]
    46e0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    46e2:	68fb      	ldr	r3, [r7, #12]
    46e4:	f103 0334 	add.w	r3, r3, #52	; 0x34
    46e8:	4618      	mov	r0, r3
    46ea:	68b9      	ldr	r1, [r7, #8]
    46ec:	f04f 0210 	mov.w	r2, #16
    46f0:	f001 ffde 	bl	66b0 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    46f4:	68fb      	ldr	r3, [r7, #12]
    46f6:	f04f 0200 	mov.w	r2, #0
    46fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    46fe:	687b      	ldr	r3, [r7, #4]
    4700:	2b04      	cmp	r3, #4
    4702:	d902      	bls.n	470a <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4704:	f04f 0304 	mov.w	r3, #4
    4708:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    470a:	68fb      	ldr	r3, [r7, #12]
    470c:	687a      	ldr	r2, [r7, #4]
    470e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    4710:	68fb      	ldr	r3, [r7, #12]
    4712:	687a      	ldr	r2, [r7, #4]
    4714:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    4716:	68fb      	ldr	r3, [r7, #12]
    4718:	f103 0304 	add.w	r3, r3, #4
    471c:	4618      	mov	r0, r3
    471e:	f7fe faa5 	bl	2c6c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    4722:	68fb      	ldr	r3, [r7, #12]
    4724:	f103 0318 	add.w	r3, r3, #24
    4728:	4618      	mov	r0, r3
    472a:	f7fe fa9f 	bl	2c6c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    472e:	68fb      	ldr	r3, [r7, #12]
    4730:	68fa      	ldr	r2, [r7, #12]
    4732:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    4734:	687b      	ldr	r3, [r7, #4]
    4736:	f1c3 0205 	rsb	r2, r3, #5
    473a:	68fb      	ldr	r3, [r7, #12]
    473c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    473e:	68fb      	ldr	r3, [r7, #12]
    4740:	68fa      	ldr	r2, [r7, #12]
    4742:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    4744:	f107 0710 	add.w	r7, r7, #16
    4748:	46bd      	mov	sp, r7
    474a:	bd80      	pop	{r7, pc}

0000474c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    474c:	b580      	push	{r7, lr}
    474e:	b082      	sub	sp, #8
    4750:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4752:	f04f 0300 	mov.w	r3, #0
    4756:	607b      	str	r3, [r7, #4]
    4758:	e013      	b.n	4782 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    475a:	687a      	ldr	r2, [r7, #4]
    475c:	4613      	mov	r3, r2
    475e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4762:	189b      	adds	r3, r3, r2
    4764:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4768:	461a      	mov	r2, r3
    476a:	f240 03c4 	movw	r3, #196	; 0xc4
    476e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4772:	18d3      	adds	r3, r2, r3
    4774:	4618      	mov	r0, r3
    4776:	f7fe fa59 	bl	2c2c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    477a:	687b      	ldr	r3, [r7, #4]
    477c:	f103 0301 	add.w	r3, r3, #1
    4780:	607b      	str	r3, [r7, #4]
    4782:	687b      	ldr	r3, [r7, #4]
    4784:	2b04      	cmp	r3, #4
    4786:	d9e8      	bls.n	475a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    4788:	f240 1028 	movw	r0, #296	; 0x128
    478c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4790:	f7fe fa4c 	bl	2c2c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    4794:	f240 103c 	movw	r0, #316	; 0x13c
    4798:	f2c2 0000 	movt	r0, #8192	; 0x2000
    479c:	f7fe fa46 	bl	2c2c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    47a0:	f240 1058 	movw	r0, #344	; 0x158
    47a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    47a8:	f7fe fa40 	bl	2c2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    47ac:	f240 106c 	movw	r0, #364	; 0x16c
    47b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    47b4:	f7fe fa3a 	bl	2c2c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    47b8:	f240 1084 	movw	r0, #388	; 0x184
    47bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    47c0:	f7fe fa34 	bl	2c2c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    47c4:	f240 1350 	movw	r3, #336	; 0x150
    47c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47cc:	f240 1228 	movw	r2, #296	; 0x128
    47d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    47d4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    47d6:	f240 1354 	movw	r3, #340	; 0x154
    47da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47de:	f240 123c 	movw	r2, #316	; 0x13c
    47e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    47e6:	601a      	str	r2, [r3, #0]
}
    47e8:	f107 0708 	add.w	r7, r7, #8
    47ec:	46bd      	mov	sp, r7
    47ee:	bd80      	pop	{r7, pc}

000047f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    47f0:	b580      	push	{r7, lr}
    47f2:	b082      	sub	sp, #8
    47f4:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    47f6:	f240 1380 	movw	r3, #384	; 0x180
    47fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47fe:	681b      	ldr	r3, [r3, #0]
    4800:	2b00      	cmp	r3, #0
    4802:	d03c      	beq.n	487e <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
    4804:	f7ff fb44 	bl	3e90 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4808:	f240 136c 	movw	r3, #364	; 0x16c
    480c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4810:	681b      	ldr	r3, [r3, #0]
    4812:	2b00      	cmp	r3, #0
    4814:	bf14      	ite	ne
    4816:	2300      	movne	r3, #0
    4818:	2301      	moveq	r3, #1
    481a:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    481c:	f7ff fb4a 	bl	3eb4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4820:	687b      	ldr	r3, [r7, #4]
    4822:	2b00      	cmp	r3, #0
    4824:	d12b      	bne.n	487e <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    4826:	f000 fa83 	bl	4d30 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    482a:	f240 136c 	movw	r3, #364	; 0x16c
    482e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4832:	68db      	ldr	r3, [r3, #12]
    4834:	68db      	ldr	r3, [r3, #12]
    4836:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    4838:	683b      	ldr	r3, [r7, #0]
    483a:	f103 0304 	add.w	r3, r3, #4
    483e:	4618      	mov	r0, r3
    4840:	f7fe fa84 	bl	2d4c <vListRemove>
					--uxCurrentNumberOfTasks;
    4844:	f240 1398 	movw	r3, #408	; 0x198
    4848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    484c:	681b      	ldr	r3, [r3, #0]
    484e:	f103 32ff 	add.w	r2, r3, #4294967295
    4852:	f240 1398 	movw	r3, #408	; 0x198
    4856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    485a:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    485c:	f240 1380 	movw	r3, #384	; 0x180
    4860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4864:	681b      	ldr	r3, [r3, #0]
    4866:	f103 32ff 	add.w	r2, r3, #4294967295
    486a:	f240 1380 	movw	r3, #384	; 0x180
    486e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4872:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    4874:	f000 fa72 	bl	4d5c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    4878:	6838      	ldr	r0, [r7, #0]
    487a:	f000 f901 	bl	4a80 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    487e:	f107 0708 	add.w	r7, r7, #8
    4882:	46bd      	mov	sp, r7
    4884:	bd80      	pop	{r7, pc}
    4886:	bf00      	nop

00004888 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    4888:	b580      	push	{r7, lr}
    488a:	b082      	sub	sp, #8
    488c:	af00      	add	r7, sp, #0
    488e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    4890:	f240 03c0 	movw	r3, #192	; 0xc0
    4894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4898:	681b      	ldr	r3, [r3, #0]
    489a:	687a      	ldr	r2, [r7, #4]
    489c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    489e:	f240 139c 	movw	r3, #412	; 0x19c
    48a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48a6:	681b      	ldr	r3, [r3, #0]
    48a8:	687a      	ldr	r2, [r7, #4]
    48aa:	429a      	cmp	r2, r3
    48ac:	d210      	bcs.n	48d0 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    48ae:	f240 1354 	movw	r3, #340	; 0x154
    48b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48b6:	681a      	ldr	r2, [r3, #0]
    48b8:	f240 03c0 	movw	r3, #192	; 0xc0
    48bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48c0:	681b      	ldr	r3, [r3, #0]
    48c2:	f103 0304 	add.w	r3, r3, #4
    48c6:	4610      	mov	r0, r2
    48c8:	4619      	mov	r1, r3
    48ca:	f7fe fa05 	bl	2cd8 <vListInsert>
    48ce:	e01d      	b.n	490c <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    48d0:	f240 1350 	movw	r3, #336	; 0x150
    48d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d8:	681a      	ldr	r2, [r3, #0]
    48da:	f240 03c0 	movw	r3, #192	; 0xc0
    48de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48e2:	681b      	ldr	r3, [r3, #0]
    48e4:	f103 0304 	add.w	r3, r3, #4
    48e8:	4610      	mov	r0, r2
    48ea:	4619      	mov	r1, r3
    48ec:	f7fe f9f4 	bl	2cd8 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    48f0:	f240 0328 	movw	r3, #40	; 0x28
    48f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48f8:	681b      	ldr	r3, [r3, #0]
    48fa:	687a      	ldr	r2, [r7, #4]
    48fc:	429a      	cmp	r2, r3
    48fe:	d205      	bcs.n	490c <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4900:	f240 0328 	movw	r3, #40	; 0x28
    4904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4908:	687a      	ldr	r2, [r7, #4]
    490a:	601a      	str	r2, [r3, #0]
		}
	}
}
    490c:	f107 0708 	add.w	r7, r7, #8
    4910:	46bd      	mov	sp, r7
    4912:	bd80      	pop	{r7, pc}

00004914 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4914:	b580      	push	{r7, lr}
    4916:	b084      	sub	sp, #16
    4918:	af00      	add	r7, sp, #0
    491a:	4603      	mov	r3, r0
    491c:	6039      	str	r1, [r7, #0]
    491e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4920:	f04f 0050 	mov.w	r0, #80	; 0x50
    4924:	f000 fa88 	bl	4e38 <pvPortMalloc>
    4928:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    492a:	68fb      	ldr	r3, [r7, #12]
    492c:	2b00      	cmp	r3, #0
    492e:	d023      	beq.n	4978 <prvAllocateTCBAndStack+0x64>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    4930:	683b      	ldr	r3, [r7, #0]
    4932:	2b00      	cmp	r3, #0
    4934:	d107      	bne.n	4946 <prvAllocateTCBAndStack+0x32>
    4936:	88fb      	ldrh	r3, [r7, #6]
    4938:	ea4f 0383 	mov.w	r3, r3, lsl #2
    493c:	4618      	mov	r0, r3
    493e:	f000 fa7b 	bl	4e38 <pvPortMalloc>
    4942:	4603      	mov	r3, r0
    4944:	e000      	b.n	4948 <prvAllocateTCBAndStack+0x34>
    4946:	683b      	ldr	r3, [r7, #0]
    4948:	68fa      	ldr	r2, [r7, #12]
    494a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    494c:	68fb      	ldr	r3, [r7, #12]
    494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4950:	2b00      	cmp	r3, #0
    4952:	d106      	bne.n	4962 <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4954:	68f8      	ldr	r0, [r7, #12]
    4956:	f000 fabb 	bl	4ed0 <vPortFree>
			pxNewTCB = NULL;
    495a:	f04f 0300 	mov.w	r3, #0
    495e:	60fb      	str	r3, [r7, #12]
    4960:	e00a      	b.n	4978 <prvAllocateTCBAndStack+0x64>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    4962:	68fb      	ldr	r3, [r7, #12]
    4964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4966:	88fb      	ldrh	r3, [r7, #6]
    4968:	ea4f 0383 	mov.w	r3, r3, lsl #2
    496c:	4610      	mov	r0, r2
    496e:	f04f 01a5 	mov.w	r1, #165	; 0xa5
    4972:	461a      	mov	r2, r3
    4974:	f001 fd18 	bl	63a8 <memset>
		}
	}

	return pxNewTCB;
    4978:	68fb      	ldr	r3, [r7, #12]
}
    497a:	4618      	mov	r0, r3
    497c:	f107 0710 	add.w	r7, r7, #16
    4980:	46bd      	mov	sp, r7
    4982:	bd80      	pop	{r7, pc}

00004984 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
    4984:	b590      	push	{r4, r7, lr}
    4986:	b08f      	sub	sp, #60	; 0x3c
    4988:	af04      	add	r7, sp, #16
    498a:	60f8      	str	r0, [r7, #12]
    498c:	60b9      	str	r1, [r7, #8]
    498e:	4613      	mov	r3, r2
    4990:	71fb      	strb	r3, [r7, #7]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;
	PRIVILEGED_DATA static char pcStatusString[ 50 ];

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    4992:	68bb      	ldr	r3, [r7, #8]
    4994:	627b      	str	r3, [r7, #36]	; 0x24
    4996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4998:	685b      	ldr	r3, [r3, #4]
    499a:	685a      	ldr	r2, [r3, #4]
    499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    499e:	605a      	str	r2, [r3, #4]
    49a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49a2:	685a      	ldr	r2, [r3, #4]
    49a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49a6:	f103 0308 	add.w	r3, r3, #8
    49aa:	429a      	cmp	r2, r3
    49ac:	d104      	bne.n	49b8 <prvListTaskWithinSingleList+0x34>
    49ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49b0:	685b      	ldr	r3, [r3, #4]
    49b2:	685a      	ldr	r2, [r3, #4]
    49b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49b6:	605a      	str	r2, [r3, #4]
    49b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49ba:	685b      	ldr	r3, [r3, #4]
    49bc:	68db      	ldr	r3, [r3, #12]
    49be:	623b      	str	r3, [r7, #32]
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    49c0:	68bb      	ldr	r3, [r7, #8]
    49c2:	61fb      	str	r3, [r7, #28]
    49c4:	69fb      	ldr	r3, [r7, #28]
    49c6:	685b      	ldr	r3, [r3, #4]
    49c8:	685a      	ldr	r2, [r3, #4]
    49ca:	69fb      	ldr	r3, [r7, #28]
    49cc:	605a      	str	r2, [r3, #4]
    49ce:	69fb      	ldr	r3, [r7, #28]
    49d0:	685a      	ldr	r2, [r3, #4]
    49d2:	69fb      	ldr	r3, [r7, #28]
    49d4:	f103 0308 	add.w	r3, r3, #8
    49d8:	429a      	cmp	r2, r3
    49da:	d104      	bne.n	49e6 <prvListTaskWithinSingleList+0x62>
    49dc:	69fb      	ldr	r3, [r7, #28]
    49de:	685b      	ldr	r3, [r3, #4]
    49e0:	685a      	ldr	r2, [r3, #4]
    49e2:	69fb      	ldr	r3, [r7, #28]
    49e4:	605a      	str	r2, [r3, #4]
    49e6:	69fb      	ldr	r3, [r7, #28]
    49e8:	685b      	ldr	r3, [r3, #4]
    49ea:	68db      	ldr	r3, [r3, #12]
    49ec:	61bb      	str	r3, [r7, #24]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
			}
			#else
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
    49ee:	69bb      	ldr	r3, [r7, #24]
    49f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    49f2:	4618      	mov	r0, r3
    49f4:	f000 f828 	bl	4a48 <usTaskCheckFreeStackSpace>
    49f8:	4603      	mov	r3, r0
    49fa:	82fb      	strh	r3, [r7, #22]
			}
			#endif			
			
			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
    49fc:	69bb      	ldr	r3, [r7, #24]
    49fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
    4a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4a06:	69b9      	ldr	r1, [r7, #24]
    4a08:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    4a0a:	8af8      	ldrh	r0, [r7, #22]
    4a0c:	69b9      	ldr	r1, [r7, #24]
    4a0e:	6c49      	ldr	r1, [r1, #68]	; 0x44
    4a10:	9400      	str	r4, [sp, #0]
    4a12:	9001      	str	r0, [sp, #4]
    4a14:	9102      	str	r1, [sp, #8]
    4a16:	f240 10c0 	movw	r0, #448	; 0x1c0
    4a1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4a1e:	f646 3188 	movw	r1, #27528	; 0x6b88
    4a22:	f2c0 0100 	movt	r1, #0
    4a26:	f001 fb55 	bl	60d4 <sprintf>
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
    4a2a:	68f8      	ldr	r0, [r7, #12]
    4a2c:	f240 11c0 	movw	r1, #448	; 0x1c0
    4a30:	f2c2 0100 	movt	r1, #8192	; 0x2000
    4a34:	f001 febc 	bl	67b0 <strcat>

		} while( pxNextTCB != pxFirstTCB );
    4a38:	69ba      	ldr	r2, [r7, #24]
    4a3a:	6a3b      	ldr	r3, [r7, #32]
    4a3c:	429a      	cmp	r2, r3
    4a3e:	d1bf      	bne.n	49c0 <prvListTaskWithinSingleList+0x3c>
	}
    4a40:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    4a44:	46bd      	mov	sp, r7
    4a46:	bd90      	pop	{r4, r7, pc}

00004a48 <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
    4a48:	b490      	push	{r4, r7}
    4a4a:	b082      	sub	sp, #8
    4a4c:	af00      	add	r7, sp, #0
    4a4e:	6078      	str	r0, [r7, #4]
	register unsigned short usCount = 0U;
    4a50:	f04f 0400 	mov.w	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    4a54:	e006      	b.n	4a64 <usTaskCheckFreeStackSpace+0x1c>
		{
			pucStackByte -= portSTACK_GROWTH;
    4a56:	687b      	ldr	r3, [r7, #4]
    4a58:	f103 0301 	add.w	r3, r3, #1
    4a5c:	607b      	str	r3, [r7, #4]
			usCount++;
    4a5e:	f104 0301 	add.w	r3, r4, #1
    4a62:	b29c      	uxth	r4, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    4a64:	687b      	ldr	r3, [r7, #4]
    4a66:	781b      	ldrb	r3, [r3, #0]
    4a68:	2ba5      	cmp	r3, #165	; 0xa5
    4a6a:	d0f4      	beq.n	4a56 <usTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
    4a6c:	ea4f 0394 	mov.w	r3, r4, lsr #2
    4a70:	b29c      	uxth	r4, r3

		return usCount;
    4a72:	4623      	mov	r3, r4
	}
    4a74:	4618      	mov	r0, r3
    4a76:	f107 0708 	add.w	r7, r7, #8
    4a7a:	46bd      	mov	sp, r7
    4a7c:	bc90      	pop	{r4, r7}
    4a7e:	4770      	bx	lr

00004a80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    4a80:	b580      	push	{r7, lr}
    4a82:	b082      	sub	sp, #8
    4a84:	af00      	add	r7, sp, #0
    4a86:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    4a88:	687b      	ldr	r3, [r7, #4]
    4a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4a8c:	4618      	mov	r0, r3
    4a8e:	f000 fa1f 	bl	4ed0 <vPortFree>
		vPortFree( pxTCB );
    4a92:	6878      	ldr	r0, [r7, #4]
    4a94:	f000 fa1c 	bl	4ed0 <vPortFree>
	}
    4a98:	f107 0708 	add.w	r7, r7, #8
    4a9c:	46bd      	mov	sp, r7
    4a9e:	bd80      	pop	{r7, pc}

00004aa0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    4aa0:	b480      	push	{r7}
    4aa2:	b083      	sub	sp, #12
    4aa4:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    4aa6:	f240 03c0 	movw	r3, #192	; 0xc0
    4aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aae:	681b      	ldr	r3, [r3, #0]
    4ab0:	607b      	str	r3, [r7, #4]

		return xReturn;
    4ab2:	687b      	ldr	r3, [r7, #4]
	}
    4ab4:	4618      	mov	r0, r3
    4ab6:	f107 070c 	add.w	r7, r7, #12
    4aba:	46bd      	mov	sp, r7
    4abc:	bc80      	pop	{r7}
    4abe:	4770      	bx	lr

00004ac0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    4ac0:	b580      	push	{r7, lr}
    4ac2:	b084      	sub	sp, #16
    4ac4:	af00      	add	r7, sp, #0
    4ac6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4acc:	68fb      	ldr	r3, [r7, #12]
    4ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ad0:	f240 03c0 	movw	r3, #192	; 0xc0
    4ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ad8:	681b      	ldr	r3, [r3, #0]
    4ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4adc:	429a      	cmp	r2, r3
    4ade:	d257      	bcs.n	4b90 <vTaskPriorityInherit+0xd0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    4ae0:	f240 03c0 	movw	r3, #192	; 0xc0
    4ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ae8:	681b      	ldr	r3, [r3, #0]
    4aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4aec:	f1c3 0205 	rsb	r2, r3, #5
    4af0:	68fb      	ldr	r3, [r7, #12]
    4af2:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4af4:	68fb      	ldr	r3, [r7, #12]
    4af6:	6959      	ldr	r1, [r3, #20]
    4af8:	68fb      	ldr	r3, [r7, #12]
    4afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4afc:	4613      	mov	r3, r2
    4afe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4b02:	189b      	adds	r3, r3, r2
    4b04:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4b08:	461a      	mov	r2, r3
    4b0a:	f240 03c4 	movw	r3, #196	; 0xc4
    4b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b12:	18d3      	adds	r3, r2, r3
    4b14:	4299      	cmp	r1, r3
    4b16:	d133      	bne.n	4b80 <vTaskPriorityInherit+0xc0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    4b18:	68fb      	ldr	r3, [r7, #12]
    4b1a:	f103 0304 	add.w	r3, r3, #4
    4b1e:	4618      	mov	r0, r3
    4b20:	f7fe f914 	bl	2d4c <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4b24:	f240 03c0 	movw	r3, #192	; 0xc0
    4b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b2c:	681b      	ldr	r3, [r3, #0]
    4b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b30:	68fb      	ldr	r3, [r7, #12]
    4b32:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    4b34:	68fb      	ldr	r3, [r7, #12]
    4b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b38:	f240 13a4 	movw	r3, #420	; 0x1a4
    4b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b40:	681b      	ldr	r3, [r3, #0]
    4b42:	429a      	cmp	r2, r3
    4b44:	d906      	bls.n	4b54 <vTaskPriorityInherit+0x94>
    4b46:	68fb      	ldr	r3, [r7, #12]
    4b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b4a:	f240 13a4 	movw	r3, #420	; 0x1a4
    4b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b52:	601a      	str	r2, [r3, #0]
    4b54:	68fb      	ldr	r3, [r7, #12]
    4b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b58:	4613      	mov	r3, r2
    4b5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4b5e:	189b      	adds	r3, r3, r2
    4b60:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4b64:	461a      	mov	r2, r3
    4b66:	f240 03c4 	movw	r3, #196	; 0xc4
    4b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b6e:	18d2      	adds	r2, r2, r3
    4b70:	68fb      	ldr	r3, [r7, #12]
    4b72:	f103 0304 	add.w	r3, r3, #4
    4b76:	4610      	mov	r0, r2
    4b78:	4619      	mov	r1, r3
    4b7a:	f7fe f885 	bl	2c88 <vListInsertEnd>
    4b7e:	e007      	b.n	4b90 <vTaskPriorityInherit+0xd0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4b80:	f240 03c0 	movw	r3, #192	; 0xc0
    4b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b88:	681b      	ldr	r3, [r3, #0]
    4b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b8c:	68fb      	ldr	r3, [r7, #12]
    4b8e:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    4b90:	f107 0710 	add.w	r7, r7, #16
    4b94:	46bd      	mov	sp, r7
    4b96:	bd80      	pop	{r7, pc}

00004b98 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    4b98:	b580      	push	{r7, lr}
    4b9a:	b084      	sub	sp, #16
    4b9c:	af00      	add	r7, sp, #0
    4b9e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4ba0:	687b      	ldr	r3, [r7, #4]
    4ba2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    4ba4:	687b      	ldr	r3, [r7, #4]
    4ba6:	2b00      	cmp	r3, #0
    4ba8:	d03a      	beq.n	4c20 <vTaskPriorityDisinherit+0x88>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4baa:	68fb      	ldr	r3, [r7, #12]
    4bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bae:	68fb      	ldr	r3, [r7, #12]
    4bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4bb2:	429a      	cmp	r2, r3
    4bb4:	d034      	beq.n	4c20 <vTaskPriorityDisinherit+0x88>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    4bb6:	68fb      	ldr	r3, [r7, #12]
    4bb8:	f103 0304 	add.w	r3, r3, #4
    4bbc:	4618      	mov	r0, r3
    4bbe:	f7fe f8c5 	bl	2d4c <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4bc2:	68fb      	ldr	r3, [r7, #12]
    4bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4bc6:	68fb      	ldr	r3, [r7, #12]
    4bc8:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    4bca:	68fb      	ldr	r3, [r7, #12]
    4bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4bce:	f1c3 0205 	rsb	r2, r3, #5
    4bd2:	68fb      	ldr	r3, [r7, #12]
    4bd4:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    4bd6:	68fb      	ldr	r3, [r7, #12]
    4bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bda:	f240 13a4 	movw	r3, #420	; 0x1a4
    4bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be2:	681b      	ldr	r3, [r3, #0]
    4be4:	429a      	cmp	r2, r3
    4be6:	d906      	bls.n	4bf6 <vTaskPriorityDisinherit+0x5e>
    4be8:	68fb      	ldr	r3, [r7, #12]
    4bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bec:	f240 13a4 	movw	r3, #420	; 0x1a4
    4bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bf4:	601a      	str	r2, [r3, #0]
    4bf6:	68fb      	ldr	r3, [r7, #12]
    4bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bfa:	4613      	mov	r3, r2
    4bfc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4c00:	189b      	adds	r3, r3, r2
    4c02:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4c06:	461a      	mov	r2, r3
    4c08:	f240 03c4 	movw	r3, #196	; 0xc4
    4c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c10:	18d2      	adds	r2, r2, r3
    4c12:	68fb      	ldr	r3, [r7, #12]
    4c14:	f103 0304 	add.w	r3, r3, #4
    4c18:	4610      	mov	r0, r2
    4c1a:	4619      	mov	r1, r3
    4c1c:	f7fe f834 	bl	2c88 <vListInsertEnd>
			}
		}
	}
    4c20:	f107 0710 	add.w	r7, r7, #16
    4c24:	46bd      	mov	sp, r7
    4c26:	bd80      	pop	{r7, pc}

00004c28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4c28:	b480      	push	{r7}
    4c2a:	b085      	sub	sp, #20
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	60f8      	str	r0, [r7, #12]
    4c30:	60b9      	str	r1, [r7, #8]
    4c32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    4c34:	68fb      	ldr	r3, [r7, #12]
    4c36:	f1a3 0304 	sub.w	r3, r3, #4
    4c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    4c3c:	68fb      	ldr	r3, [r7, #12]
    4c3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4c42:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    4c44:	68fb      	ldr	r3, [r7, #12]
    4c46:	f1a3 0304 	sub.w	r3, r3, #4
    4c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    4c4c:	68ba      	ldr	r2, [r7, #8]
    4c4e:	68fb      	ldr	r3, [r7, #12]
    4c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    4c52:	68fb      	ldr	r3, [r7, #12]
    4c54:	f1a3 0304 	sub.w	r3, r3, #4
    4c58:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    4c5a:	68fb      	ldr	r3, [r7, #12]
    4c5c:	f04f 0200 	mov.w	r2, #0
    4c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    4c62:	68fb      	ldr	r3, [r7, #12]
    4c64:	f1a3 0314 	sub.w	r3, r3, #20
    4c68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    4c6a:	687a      	ldr	r2, [r7, #4]
    4c6c:	68fb      	ldr	r3, [r7, #12]
    4c6e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    4c70:	68fb      	ldr	r3, [r7, #12]
    4c72:	f1a3 0320 	sub.w	r3, r3, #32
    4c76:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    4c78:	68fb      	ldr	r3, [r7, #12]
}
    4c7a:	4618      	mov	r0, r3
    4c7c:	f107 0714 	add.w	r7, r7, #20
    4c80:	46bd      	mov	sp, r7
    4c82:	bc80      	pop	{r7}
    4c84:	4770      	bx	lr
    4c86:	bf00      	nop

00004c88 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    4c88:	4b06      	ldr	r3, [pc, #24]	; (4ca4 <pxCurrentTCBConst2>)
    4c8a:	6819      	ldr	r1, [r3, #0]
    4c8c:	6808      	ldr	r0, [r1, #0]
    4c8e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4c92:	f380 8809 	msr	PSP, r0
    4c96:	f04f 0000 	mov.w	r0, #0
    4c9a:	f380 8811 	msr	BASEPRI, r0
    4c9e:	f04e 0e0d 	orr.w	lr, lr, #13
    4ca2:	4770      	bx	lr

00004ca4 <pxCurrentTCBConst2>:
    4ca4:	200000c0 	.word	0x200000c0

00004ca8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    4ca8:	4862      	ldr	r0, [pc, #392]	; (4e34 <prvSetupTimerInterrupt+0x2c>)
    4caa:	6800      	ldr	r0, [r0, #0]
    4cac:	6800      	ldr	r0, [r0, #0]
    4cae:	f380 8808 	msr	MSP, r0
    4cb2:	b662      	cpsie	i
    4cb4:	df00      	svc	0
    4cb6:	bf00      	nop

00004cb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    4cb8:	b580      	push	{r7, lr}
    4cba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    4cbc:	f64e 5320 	movw	r3, #60704	; 0xed20
    4cc0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4cc4:	f64e 5220 	movw	r2, #60704	; 0xed20
    4cc8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4ccc:	6812      	ldr	r2, [r2, #0]
    4cce:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    4cd2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    4cd4:	f64e 5320 	movw	r3, #60704	; 0xed20
    4cd8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4cdc:	f64e 5220 	movw	r2, #60704	; 0xed20
    4ce0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4ce4:	6812      	ldr	r2, [r2, #0]
    4ce6:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    4cea:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    4cec:	f000 f88c 	bl	4e08 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    4cf0:	f240 032c 	movw	r3, #44	; 0x2c
    4cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cf8:	f04f 0200 	mov.w	r2, #0
    4cfc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    4cfe:	f7ff ffd3 	bl	4ca8 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    4d02:	f04f 0300 	mov.w	r3, #0
}
    4d06:	4618      	mov	r0, r3
    4d08:	bd80      	pop	{r7, pc}
    4d0a:	bf00      	nop

00004d0c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    4d0c:	b480      	push	{r7}
    4d0e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    4d10:	46bd      	mov	sp, r7
    4d12:	bc80      	pop	{r7}
    4d14:	4770      	bx	lr
    4d16:	bf00      	nop

00004d18 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    4d18:	b480      	push	{r7}
    4d1a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4d1c:	f64e 5304 	movw	r3, #60676	; 0xed04
    4d20:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4d28:	601a      	str	r2, [r3, #0]
}
    4d2a:	46bd      	mov	sp, r7
    4d2c:	bc80      	pop	{r7}
    4d2e:	4770      	bx	lr

00004d30 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    4d30:	b480      	push	{r7}
    4d32:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4d34:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4d38:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    4d3c:	f240 032c 	movw	r3, #44	; 0x2c
    4d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d44:	681b      	ldr	r3, [r3, #0]
    4d46:	f103 0201 	add.w	r2, r3, #1
    4d4a:	f240 032c 	movw	r3, #44	; 0x2c
    4d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d52:	601a      	str	r2, [r3, #0]
}
    4d54:	46bd      	mov	sp, r7
    4d56:	bc80      	pop	{r7}
    4d58:	4770      	bx	lr
    4d5a:	bf00      	nop

00004d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    4d5c:	b480      	push	{r7}
    4d5e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    4d60:	f240 032c 	movw	r3, #44	; 0x2c
    4d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d68:	681b      	ldr	r3, [r3, #0]
    4d6a:	f103 32ff 	add.w	r2, r3, #4294967295
    4d6e:	f240 032c 	movw	r3, #44	; 0x2c
    4d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d76:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    4d78:	f240 032c 	movw	r3, #44	; 0x2c
    4d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d80:	681b      	ldr	r3, [r3, #0]
    4d82:	2b00      	cmp	r3, #0
    4d84:	d103      	bne.n	4d8e <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
    4d86:	f04f 0000 	mov.w	r0, #0
    4d8a:	f380 8811 	msr	BASEPRI, r0
	}
}
    4d8e:	46bd      	mov	sp, r7
    4d90:	bc80      	pop	{r7}
    4d92:	4770      	bx	lr

00004d94 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4d94:	f3ef 8009 	mrs	r0, PSP
    4d98:	4b0c      	ldr	r3, [pc, #48]	; (4dcc <pxCurrentTCBConst>)
    4d9a:	681a      	ldr	r2, [r3, #0]
    4d9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4da0:	6010      	str	r0, [r2, #0]
    4da2:	e92d 4008 	stmdb	sp!, {r3, lr}
    4da6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4daa:	f380 8811 	msr	BASEPRI, r0
    4dae:	f7ff fadd 	bl	436c <vTaskSwitchContext>
    4db2:	f04f 0000 	mov.w	r0, #0
    4db6:	f380 8811 	msr	BASEPRI, r0
    4dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4dbe:	6819      	ldr	r1, [r3, #0]
    4dc0:	6808      	ldr	r0, [r1, #0]
    4dc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4dc6:	f380 8809 	msr	PSP, r0
    4dca:	4770      	bx	lr

00004dcc <pxCurrentTCBConst>:
    4dcc:	200000c0 	.word	0x200000c0

00004dd0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    4dd0:	b580      	push	{r7, lr}
    4dd2:	b082      	sub	sp, #8
    4dd4:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4dd6:	f64e 5304 	movw	r3, #60676	; 0xed04
    4dda:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4de2:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    4de4:	f04f 0300 	mov.w	r3, #0
    4de8:	607b      	str	r3, [r7, #4]
    4dea:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4dee:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    4df2:	f7ff f9d5 	bl	41a0 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    4df6:	f04f 0000 	mov.w	r0, #0
    4dfa:	f380 8811 	msr	BASEPRI, r0
}
    4dfe:	f107 0708 	add.w	r7, r7, #8
    4e02:	46bd      	mov	sp, r7
    4e04:	bd80      	pop	{r7, pc}
    4e06:	bf00      	nop

00004e08 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    4e08:	b480      	push	{r7}
    4e0a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    4e0c:	f24e 0314 	movw	r3, #57364	; 0xe014
    4e10:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4e14:	f64f 427f 	movw	r2, #64639	; 0xfc7f
    4e18:	f2c0 020a 	movt	r2, #10
    4e1c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    4e1e:	f24e 0310 	movw	r3, #57360	; 0xe010
    4e22:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4e26:	f04f 0207 	mov.w	r2, #7
    4e2a:	601a      	str	r2, [r3, #0]
}
    4e2c:	46bd      	mov	sp, r7
    4e2e:	bc80      	pop	{r7}
    4e30:	4770      	bx	lr
    4e32:	0000      	.short	0x0000
    4e34:	e000ed08 	.word	0xe000ed08

00004e38 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4e38:	b580      	push	{r7, lr}
    4e3a:	b084      	sub	sp, #16
    4e3c:	af00      	add	r7, sp, #0
    4e3e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    4e40:	f04f 0300 	mov.w	r3, #0
    4e44:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	f003 0307 	and.w	r3, r3, #7
    4e4c:	2b00      	cmp	r3, #0
    4e4e:	d005      	beq.n	4e5c <pvPortMalloc+0x24>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    4e50:	687b      	ldr	r3, [r7, #4]
    4e52:	f023 0307 	bic.w	r3, r3, #7
    4e56:	f103 0308 	add.w	r3, r3, #8
    4e5a:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
    4e5c:	f7ff f818 	bl	3e90 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    4e60:	f244 53f8 	movw	r3, #17912	; 0x45f8
    4e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e68:	681a      	ldr	r2, [r3, #0]
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	18d2      	adds	r2, r2, r3
    4e6e:	f244 33ff 	movw	r3, #17407	; 0x43ff
    4e72:	429a      	cmp	r2, r3
    4e74:	d824      	bhi.n	4ec0 <pvPortMalloc+0x88>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    4e76:	f244 53f8 	movw	r3, #17912	; 0x45f8
    4e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e7e:	681a      	ldr	r2, [r3, #0]
    4e80:	687b      	ldr	r3, [r7, #4]
    4e82:	18d2      	adds	r2, r2, r3
    4e84:	f244 53f8 	movw	r3, #17912	; 0x45f8
    4e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e8c:	681b      	ldr	r3, [r3, #0]
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    4e8e:	429a      	cmp	r2, r3
    4e90:	d916      	bls.n	4ec0 <pvPortMalloc+0x88>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    4e92:	f244 53f8 	movw	r3, #17912	; 0x45f8
    4e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e9a:	681a      	ldr	r2, [r3, #0]
    4e9c:	f240 13f8 	movw	r3, #504	; 0x1f8
    4ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ea4:	18d3      	adds	r3, r2, r3
    4ea6:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
    4ea8:	f244 53f8 	movw	r3, #17912	; 0x45f8
    4eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eb0:	681a      	ldr	r2, [r3, #0]
    4eb2:	687b      	ldr	r3, [r7, #4]
    4eb4:	18d2      	adds	r2, r2, r3
    4eb6:	f244 53f8 	movw	r3, #17912	; 0x45f8
    4eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ebe:	601a      	str	r2, [r3, #0]
		}	
	}
	xTaskResumeAll();
    4ec0:	f7fe fff8 	bl	3eb4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    4ec4:	68fb      	ldr	r3, [r7, #12]
}
    4ec6:	4618      	mov	r0, r3
    4ec8:	f107 0710 	add.w	r7, r7, #16
    4ecc:	46bd      	mov	sp, r7
    4ece:	bd80      	pop	{r7, pc}

00004ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    4ed0:	b480      	push	{r7}
    4ed2:	b083      	sub	sp, #12
    4ed4:	af00      	add	r7, sp, #0
    4ed6:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c
	for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    4ed8:	f107 070c 	add.w	r7, r7, #12
    4edc:	46bd      	mov	sp, r7
    4ede:	bc80      	pop	{r7}
    4ee0:	4770      	bx	lr
    4ee2:	bf00      	nop

00004ee4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    4ee4:	b480      	push	{r7}
    4ee6:	af00      	add	r7, sp, #0
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    4ee8:	f244 53f8 	movw	r3, #17912	; 0x45f8
    4eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ef0:	f04f 0200 	mov.w	r2, #0
    4ef4:	601a      	str	r2, [r3, #0]
}
    4ef6:	46bd      	mov	sp, r7
    4ef8:	bc80      	pop	{r7}
    4efa:	4770      	bx	lr

00004efc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    4efc:	b480      	push	{r7}
    4efe:	af00      	add	r7, sp, #0
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    4f00:	f244 53f8 	movw	r3, #17912	; 0x45f8
    4f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f08:	681b      	ldr	r3, [r3, #0]
    4f0a:	f5c3 4388 	rsb	r3, r3, #17408	; 0x4400
}
    4f0e:	4618      	mov	r0, r3
    4f10:	46bd      	mov	sp, r7
    4f12:	bc80      	pop	{r7}
    4f14:	4770      	bx	lr
    4f16:	bf00      	nop

00004f18 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
    4f18:	b580      	push	{r7, lr}
    4f1a:	b082      	sub	sp, #8
    4f1c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    4f1e:	f04f 0010 	mov.w	r0, #16
    4f22:	f04f 0101 	mov.w	r1, #1
    4f26:	f7fb ffad 	bl	e84 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
    4f2a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4f2e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4f36:	f04f 0201 	mov.w	r2, #1
    4f3a:	f7fc fb0b 	bl	1554 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
    4f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4f42:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    4f44:	f04f 0310 	mov.w	r3, #16
    4f48:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    4f4a:	f04f 0303 	mov.w	r3, #3
    4f4e:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    4f50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4f54:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4f58:	f107 0304 	add.w	r3, r7, #4
    4f5c:	4619      	mov	r1, r3
    4f5e:	f7fc f997 	bl	1290 <GPIO_Init>
}
    4f62:	f107 0708 	add.w	r7, r7, #8
    4f66:	46bd      	mov	sp, r7
    4f68:	bd80      	pop	{r7, pc}
    4f6a:	bf00      	nop

00004f6c <init_button>:

void init_button(void)
{
    4f6c:	b580      	push	{r7, lr}
    4f6e:	b082      	sub	sp, #8
    4f70:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    4f72:	f04f 0004 	mov.w	r0, #4
    4f76:	f04f 0101 	mov.w	r1, #1
    4f7a:	f7fb ff83 	bl	e84 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
    4f7e:	f04f 0301 	mov.w	r3, #1
    4f82:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    4f84:	f04f 0304 	mov.w	r3, #4
    4f88:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    4f8a:	f04f 0303 	mov.w	r3, #3
    4f8e:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    4f90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4f94:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4f98:	f107 0304 	add.w	r3, r7, #4
    4f9c:	4619      	mov	r1, r3
    4f9e:	f7fc f977 	bl	1290 <GPIO_Init>
}
    4fa2:	f107 0708 	add.w	r7, r7, #8
    4fa6:	46bd      	mov	sp, r7
    4fa8:	bd80      	pop	{r7, pc}
    4faa:	bf00      	nop

00004fac <enable_button_interrupts>:

void enable_button_interrupts(void)
{
    4fac:	b580      	push	{r7, lr}
    4fae:	b084      	sub	sp, #16
    4fb0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    4fb2:	f04f 0001 	mov.w	r0, #1
    4fb6:	f04f 0101 	mov.w	r1, #1
    4fba:	f7fb ff63 	bl	e84 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
    4fbe:	f04f 0000 	mov.w	r0, #0
    4fc2:	f04f 0100 	mov.w	r1, #0
    4fc6:	f7fc fbd7 	bl	1778 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
    4fca:	f04f 0301 	mov.w	r3, #1
    4fce:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    4fd0:	f04f 0300 	mov.w	r3, #0
    4fd4:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    4fd6:	f04f 0308 	mov.w	r3, #8
    4fda:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    4fdc:	f04f 0301 	mov.w	r3, #1
    4fe0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
    4fe2:	f107 0308 	add.w	r3, r7, #8
    4fe6:	4618      	mov	r0, r3
    4fe8:	f7fd f934 	bl	2254 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    4fec:	f04f 0306 	mov.w	r3, #6
    4ff0:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    4ff2:	f04f 030f 	mov.w	r3, #15
    4ff6:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    4ff8:	f04f 030f 	mov.w	r3, #15
    4ffc:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    4ffe:	f04f 0301 	mov.w	r3, #1
    5002:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    5004:	f107 0304 	add.w	r3, r7, #4
    5008:	4618      	mov	r0, r3
    500a:	f7fd fa6d 	bl	24e8 <NVIC_Init>
}
    500e:	f107 0710 	add.w	r7, r7, #16
    5012:	46bd      	mov	sp, r7
    5014:	bd80      	pop	{r7, pc}
    5016:	bf00      	nop

00005018 <init_rs232>:

void init_rs232(void)
{
    5018:	b580      	push	{r7, lr}
    501a:	b086      	sub	sp, #24
    501c:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    501e:	f04f 0005 	mov.w	r0, #5
    5022:	f04f 0101 	mov.w	r1, #1
    5026:	f7fb ff2d 	bl	e84 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
    502a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    502e:	f04f 0101 	mov.w	r1, #1
    5032:	f7fb ff27 	bl	e84 <RCC_APB2PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    5036:	f44f 6380 	mov.w	r3, #1024	; 0x400
    503a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    503c:	f04f 0304 	mov.w	r3, #4
    5040:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    5042:	f44f 6000 	mov.w	r0, #2048	; 0x800
    5046:	f2c4 0001 	movt	r0, #16385	; 0x4001
    504a:	f107 0304 	add.w	r3, r7, #4
    504e:	4619      	mov	r1, r3
    5050:	f7fc f91e 	bl	1290 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    5054:	f44f 7300 	mov.w	r3, #512	; 0x200
    5058:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    505a:	f04f 0303 	mov.w	r3, #3
    505e:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    5060:	f04f 0318 	mov.w	r3, #24
    5064:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    5066:	f44f 6000 	mov.w	r0, #2048	; 0x800
    506a:	f2c4 0001 	movt	r0, #16385	; 0x4001
    506e:	f107 0304 	add.w	r3, r7, #4
    5072:	4619      	mov	r1, r3
    5074:	f7fc f90c 	bl	1290 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
    5078:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    507c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    507e:	f04f 0300 	mov.w	r3, #0
    5082:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    5084:	f04f 0300 	mov.w	r3, #0
    5088:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    508a:	f04f 0300 	mov.w	r3, #0
    508e:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    5090:	f04f 0300 	mov.w	r3, #0
    5094:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Tx|USART_Mode_Rx;
    5096:	f04f 030c 	mov.w	r3, #12
    509a:	827b      	strh	r3, [r7, #18]
    USART_Init(USART1, &USART_InitStructure);
    509c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
    50a0:	f2c4 0001 	movt	r0, #16385	; 0x4001
    50a4:	f107 0308 	add.w	r3, r7, #8
    50a8:	4619      	mov	r1, r3
    50aa:	f7fc fc39 	bl	1920 <USART_Init>
    USART_Cmd(USART1, ENABLE);
    50ae:	f44f 5060 	mov.w	r0, #14336	; 0x3800
    50b2:	f2c4 0001 	movt	r0, #16385	; 0x4001
    50b6:	f04f 0101 	mov.w	r1, #1
    50ba:	f7fc fd6f 	bl	1b9c <USART_Cmd>
}
    50be:	f107 0718 	add.w	r7, r7, #24
    50c2:	46bd      	mov	sp, r7
    50c4:	bd80      	pop	{r7, pc}
    50c6:	bf00      	nop

000050c8 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
    50c8:	b580      	push	{r7, lr}
    50ca:	b082      	sub	sp, #8
    50cc:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
    50ce:	f44f 5060 	mov.w	r0, #14336	; 0x3800
    50d2:	f2c4 0001 	movt	r0, #16385	; 0x4001
    50d6:	f240 7127 	movw	r1, #1831	; 0x727
    50da:	f04f 0200 	mov.w	r2, #0
    50de:	f7fc fd7d 	bl	1bdc <USART_ITConfig>
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
    50e2:	f44f 5060 	mov.w	r0, #14336	; 0x3800
    50e6:	f2c4 0001 	movt	r0, #16385	; 0x4001
    50ea:	f240 5125 	movw	r1, #1317	; 0x525
    50ee:	f04f 0201 	mov.w	r2, #1
    50f2:	f7fc fd73 	bl	1bdc <USART_ITConfig>
    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
    50f6:	f04f 0325 	mov.w	r3, #37	; 0x25
    50fa:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    50fc:	f04f 0300 	mov.w	r3, #0
    5100:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    5102:	f04f 0301 	mov.w	r3, #1
    5106:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    5108:	f107 0304 	add.w	r3, r7, #4
    510c:	4618      	mov	r0, r3
    510e:	f7fd f9eb 	bl	24e8 <NVIC_Init>
}
    5112:	f107 0708 	add.w	r7, r7, #8
    5116:	46bd      	mov	sp, r7
    5118:	bd80      	pop	{r7, pc}
    511a:	bf00      	nop

0000511c <enable_rs232>:

void enable_rs232(void)
{
    511c:	b580      	push	{r7, lr}
    511e:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART1, ENABLE);
    5120:	f44f 5060 	mov.w	r0, #14336	; 0x3800
    5124:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5128:	f04f 0101 	mov.w	r1, #1
    512c:	f7fc fd36 	bl	1b9c <USART_Cmd>
}
    5130:	bd80      	pop	{r7, pc}
    5132:	bf00      	nop

00005134 <pvPortRealloc>:
#include <string.h> 
/*FreeRTOS relative */
#include "FreeRTOS.h"
void *pvPortRealloc(void *ptr, size_t len)
{
    5134:	b580      	push	{r7, lr}
    5136:	b084      	sub	sp, #16
    5138:	af00      	add	r7, sp, #0
    513a:	6078      	str	r0, [r7, #4]
    513c:	6039      	str	r1, [r7, #0]
  void *new_ptr;
  new_ptr = (void*)pvPortMalloc(len);
    513e:	6838      	ldr	r0, [r7, #0]
    5140:	f7ff fe7a 	bl	4e38 <pvPortMalloc>
    5144:	60f8      	str	r0, [r7, #12]

  if(new_ptr) {
    5146:	68fb      	ldr	r3, [r7, #12]
    5148:	2b00      	cmp	r3, #0
    514a:	d009      	beq.n	5160 <pvPortRealloc+0x2c>
    memcpy(new_ptr, ptr, len);
    514c:	68f8      	ldr	r0, [r7, #12]
    514e:	6879      	ldr	r1, [r7, #4]
    5150:	683a      	ldr	r2, [r7, #0]
    5152:	f001 f97f 	bl	6454 <memcpy>
    vPortFree(ptr);
    5156:	6878      	ldr	r0, [r7, #4]
    5158:	f7ff feba 	bl	4ed0 <vPortFree>
    return new_ptr; 
    515c:	68fb      	ldr	r3, [r7, #12]
    515e:	e001      	b.n	5164 <pvPortRealloc+0x30>
  }

  return NULL;
    5160:	f04f 0300 	mov.w	r3, #0
}
    5164:	4618      	mov	r0, r3
    5166:	f107 0710 	add.w	r7, r7, #16
    516a:	46bd      	mov	sp, r7
    516c:	bd80      	pop	{r7, pc}
    516e:	bf00      	nop

00005170 <utoa>:

char *utoa(unsigned int num, char *dst, unsigned int base)
{
    5170:	b580      	push	{r7, lr}
    5172:	b08e      	sub	sp, #56	; 0x38
    5174:	af00      	add	r7, sp, #0
    5176:	60f8      	str	r0, [r7, #12]
    5178:	60b9      	str	r1, [r7, #8]
    517a:	607a      	str	r2, [r7, #4]
	char buf[33] = {0};
    517c:	f107 0310 	add.w	r3, r7, #16
    5180:	f04f 0200 	mov.w	r2, #0
    5184:	601a      	str	r2, [r3, #0]
    5186:	f103 0304 	add.w	r3, r3, #4
    518a:	f04f 0200 	mov.w	r2, #0
    518e:	601a      	str	r2, [r3, #0]
    5190:	f103 0304 	add.w	r3, r3, #4
    5194:	f04f 0200 	mov.w	r2, #0
    5198:	601a      	str	r2, [r3, #0]
    519a:	f103 0304 	add.w	r3, r3, #4
    519e:	f04f 0200 	mov.w	r2, #0
    51a2:	601a      	str	r2, [r3, #0]
    51a4:	f103 0304 	add.w	r3, r3, #4
    51a8:	f04f 0200 	mov.w	r2, #0
    51ac:	601a      	str	r2, [r3, #0]
    51ae:	f103 0304 	add.w	r3, r3, #4
    51b2:	f04f 0200 	mov.w	r2, #0
    51b6:	601a      	str	r2, [r3, #0]
    51b8:	f103 0304 	add.w	r3, r3, #4
    51bc:	f04f 0200 	mov.w	r2, #0
    51c0:	601a      	str	r2, [r3, #0]
    51c2:	f103 0304 	add.w	r3, r3, #4
    51c6:	f04f 0200 	mov.w	r2, #0
    51ca:	601a      	str	r2, [r3, #0]
    51cc:	f103 0304 	add.w	r3, r3, #4
    51d0:	f04f 0200 	mov.w	r2, #0
    51d4:	701a      	strb	r2, [r3, #0]
    51d6:	f103 0301 	add.w	r3, r3, #1
	char *p = &buf[32];
    51da:	f107 0310 	add.w	r3, r7, #16
    51de:	f103 0320 	add.w	r3, r3, #32
    51e2:	637b      	str	r3, [r7, #52]	; 0x34

	if (num == 0){
    51e4:	68fb      	ldr	r3, [r7, #12]
    51e6:	2b00      	cmp	r3, #0
    51e8:	d120      	bne.n	522c <utoa+0xbc>
    	*--p = '0';
    51ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    51ec:	f103 33ff 	add.w	r3, r3, #4294967295
    51f0:	637b      	str	r3, [r7, #52]	; 0x34
    51f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    51f4:	f04f 0230 	mov.w	r2, #48	; 0x30
    51f8:	701a      	strb	r2, [r3, #0]
    51fa:	e01a      	b.n	5232 <utoa+0xc2>
    }
  	else{
    	for (; num; num/=base)
      	*--p = "0123456789ABCDEF" [num % base];
    51fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    51fe:	f103 33ff 	add.w	r3, r3, #4294967295
    5202:	637b      	str	r3, [r7, #52]	; 0x34
    5204:	68fb      	ldr	r3, [r7, #12]
    5206:	687a      	ldr	r2, [r7, #4]
    5208:	fbb3 f2f2 	udiv	r2, r3, r2
    520c:	6879      	ldr	r1, [r7, #4]
    520e:	fb01 f202 	mul.w	r2, r1, r2
    5212:	1a9a      	subs	r2, r3, r2
    5214:	f646 33a0 	movw	r3, #27552	; 0x6ba0
    5218:	f2c0 0300 	movt	r3, #0
    521c:	5c9a      	ldrb	r2, [r3, r2]
    521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5220:	701a      	strb	r2, [r3, #0]

	if (num == 0){
    	*--p = '0';
    }
  	else{
    	for (; num; num/=base)
    5222:	68fa      	ldr	r2, [r7, #12]
    5224:	687b      	ldr	r3, [r7, #4]
    5226:	fbb2 f3f3 	udiv	r3, r2, r3
    522a:	60fb      	str	r3, [r7, #12]
    522c:	68fb      	ldr	r3, [r7, #12]
    522e:	2b00      	cmp	r3, #0
    5230:	d1e4      	bne.n	51fc <utoa+0x8c>
      	*--p = "0123456789ABCDEF" [num % base];
  	}
  	return strcpy(dst, p);
    5232:	68b8      	ldr	r0, [r7, #8]
    5234:	6b79      	ldr	r1, [r7, #52]	; 0x34
    5236:	f001 fa15 	bl	6664 <strcpy>
    523a:	4603      	mov	r3, r0
} 
    523c:	4618      	mov	r0, r3
    523e:	f107 0738 	add.w	r7, r7, #56	; 0x38
    5242:	46bd      	mov	sp, r7
    5244:	bd80      	pop	{r7, pc}
    5246:	bf00      	nop

00005248 <itoa>:
char *itoa(int num, char *dst, int base)
{
    5248:	b580      	push	{r7, lr}
    524a:	b084      	sub	sp, #16
    524c:	af00      	add	r7, sp, #0
    524e:	60f8      	str	r0, [r7, #12]
    5250:	60b9      	str	r1, [r7, #8]
    5252:	607a      	str	r2, [r7, #4]
 	if (base == 10 && num < 0) {
    5254:	687b      	ldr	r3, [r7, #4]
    5256:	2b0a      	cmp	r3, #10
    5258:	d114      	bne.n	5284 <itoa+0x3c>
    525a:	68fb      	ldr	r3, [r7, #12]
    525c:	2b00      	cmp	r3, #0
    525e:	da11      	bge.n	5284 <itoa+0x3c>
		utoa(-num, dst+1, base);
    5260:	68fb      	ldr	r3, [r7, #12]
    5262:	f1c3 0300 	rsb	r3, r3, #0
    5266:	4619      	mov	r1, r3
    5268:	68bb      	ldr	r3, [r7, #8]
    526a:	f103 0201 	add.w	r2, r3, #1
    526e:	687b      	ldr	r3, [r7, #4]
    5270:	4608      	mov	r0, r1
    5272:	4611      	mov	r1, r2
    5274:	461a      	mov	r2, r3
    5276:	f7ff ff7b 	bl	5170 <utoa>
    	*dst = '-';
    527a:	68bb      	ldr	r3, [r7, #8]
    527c:	f04f 022d 	mov.w	r2, #45	; 0x2d
    5280:	701a      	strb	r2, [r3, #0]
    5282:	e006      	b.n	5292 <itoa+0x4a>
  	}
  	else
   		utoa(num, dst, base);
    5284:	68fa      	ldr	r2, [r7, #12]
    5286:	687b      	ldr	r3, [r7, #4]
    5288:	4610      	mov	r0, r2
    528a:	68b9      	ldr	r1, [r7, #8]
    528c:	461a      	mov	r2, r3
    528e:	f7ff ff6f 	bl	5170 <utoa>

  	return dst;
    5292:	68bb      	ldr	r3, [r7, #8]
    5294:	4618      	mov	r0, r3
    5296:	f107 0710 	add.w	r7, r7, #16
    529a:	46bd      	mov	sp, r7
    529c:	bd80      	pop	{r7, pc}
    529e:	bf00      	nop

000052a0 <getch_base>:
#include "serial_io.h"

extern volatile xSemaphoreHandle serial_tx_wait_sem;
extern volatile xQueueHandle serial_rx_queue;
char getch_base()
{
    52a0:	b580      	push	{r7, lr}
    52a2:	b082      	sub	sp, #8
    52a4:	af00      	add	r7, sp, #0
    char ch;
    fio_read(0, &ch, 1);
    52a6:	f04f 0000 	mov.w	r0, #0
    52aa:	f107 0307 	add.w	r3, r7, #7
    52ae:	4619      	mov	r1, r3
    52b0:	f04f 0201 	mov.w	r2, #1
    52b4:	f000 fcec 	bl	5c90 <fio_read>
    return ch;
    52b8:	79fb      	ldrb	r3, [r7, #7]
}
    52ba:	4618      	mov	r0, r3
    52bc:	f107 0708 	add.w	r7, r7, #8
    52c0:	46bd      	mov	sp, r7
    52c2:	bd80      	pop	{r7, pc}

000052c4 <putch_base>:

void putch_base(char ch)
{
    52c4:	b580      	push	{r7, lr}
    52c6:	b082      	sub	sp, #8
    52c8:	af00      	add	r7, sp, #0
    52ca:	4603      	mov	r3, r0
    52cc:	71fb      	strb	r3, [r7, #7]
    fio_write(1, &ch, 1);
    52ce:	f04f 0001 	mov.w	r0, #1
    52d2:	f107 0307 	add.w	r3, r7, #7
    52d6:	4619      	mov	r1, r3
    52d8:	f04f 0201 	mov.w	r2, #1
    52dc:	f000 fd26 	bl	5d2c <fio_write>
}
    52e0:	f107 0708 	add.w	r7, r7, #8
    52e4:	46bd      	mov	sp, r7
    52e6:	bd80      	pop	{r7, pc}

000052e8 <USART1_IRQHandler>:


/* IRQ handler to handle USART2 interruptss (both transmit and receive
 * interrupts). */
void USART1_IRQHandler()
{
    52e8:	b580      	push	{r7, lr}
    52ea:	b082      	sub	sp, #8
    52ec:	af00      	add	r7, sp, #0
	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	serial_msg rx_msg;
	/* If this interrupt is for a transmit... */
	if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET) {
    52ee:	f44f 5060 	mov.w	r0, #14336	; 0x3800
    52f2:	f2c4 0001 	movt	r0, #16385	; 0x4001
    52f6:	f240 7127 	movw	r1, #1831	; 0x727
    52fa:	f7fc fefd 	bl	20f8 <USART_GetITStatus>
    52fe:	4603      	mov	r3, r0
    5300:	2b00      	cmp	r3, #0
    5302:	d01a      	beq.n	533a <USART1_IRQHandler+0x52>
		/* "give" the serial_tx_wait_sem semaphore to notfiy processes
		 * that the buffer has a spot free for the next byte.
		 */
		xSemaphoreGiveFromISR(serial_tx_wait_sem, &xHigherPriorityTaskWoken);
    5304:	f644 2348 	movw	r3, #19016	; 0x4a48
    5308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    530c:	681b      	ldr	r3, [r3, #0]
    530e:	4618      	mov	r0, r3
    5310:	f04f 0100 	mov.w	r1, #0
    5314:	f244 6200 	movw	r2, #17920	; 0x4600
    5318:	f2c2 0200 	movt	r2, #8192	; 0x2000
    531c:	f04f 0300 	mov.w	r3, #0
    5320:	f7fd fed0 	bl	30c4 <xQueueGenericSendFromISR>

		/* Diables the transmit interrupt. */
		USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
    5324:	f44f 5060 	mov.w	r0, #14336	; 0x3800
    5328:	f2c4 0001 	movt	r0, #16385	; 0x4001
    532c:	f240 7127 	movw	r1, #1831	; 0x727
    5330:	f04f 0200 	mov.w	r2, #0
    5334:	f7fc fc52 	bl	1bdc <USART_ITConfig>
    5338:	e02b      	b.n	5392 <USART1_IRQHandler+0xaa>
		/* If this interrupt is for a receive... */
	}
	else if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET){
    533a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
    533e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5342:	f240 5125 	movw	r1, #1317	; 0x525
    5346:	f7fc fed7 	bl	20f8 <USART_GetITStatus>
    534a:	4603      	mov	r3, r0
    534c:	2b00      	cmp	r3, #0
    534e:	d01f      	beq.n	5390 <USART1_IRQHandler+0xa8>
	       /* Receive the byte from the buffer. */
		rx_msg.ch = USART_ReceiveData(USART1);
    5350:	f44f 5060 	mov.w	r0, #14336	; 0x3800
    5354:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5358:	f7fc fd5e 	bl	1e18 <USART_ReceiveData>
    535c:	4603      	mov	r3, r0
    535e:	b2db      	uxtb	r3, r3
    5360:	713b      	strb	r3, [r7, #4]
	     
	        /* Queue the received byte. */
		if(!xQueueSendToBackFromISR(serial_rx_queue, &rx_msg, &xHigherPriorityTaskWoken)) {
    5362:	f644 234c 	movw	r3, #19020	; 0x4a4c
    5366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    536a:	681b      	ldr	r3, [r3, #0]
    536c:	4618      	mov	r0, r3
    536e:	f107 0304 	add.w	r3, r7, #4
    5372:	4619      	mov	r1, r3
    5374:	f244 6200 	movw	r2, #17920	; 0x4600
    5378:	f2c2 0200 	movt	r2, #8192	; 0x2000
    537c:	f04f 0300 	mov.w	r3, #0
    5380:	f7fd fea0 	bl	30c4 <xQueueGenericSendFromISR>
    5384:	4603      	mov	r3, r0
    5386:	2b00      	cmp	r3, #0
    5388:	d103      	bne.n	5392 <USART1_IRQHandler+0xaa>
	         /* If there was an error queueing the received byte,
		     * freeze. */
		    taskYIELD();
    538a:	f7ff fcc5 	bl	4d18 <vPortYieldFromISR>
    538e:	e000      	b.n	5392 <USART1_IRQHandler+0xaa>
	}
	else {
		/* Only transmit and receive interrupts should be enabled.
		 * If this is another type of interrupt, freeze.
		 */
		while(1);
    5390:	e7fe      	b.n	5390 <USART1_IRQHandler+0xa8>
	}

	if (xHigherPriorityTaskWoken) {
    5392:	f244 6300 	movw	r3, #17920	; 0x4600
    5396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    539a:	681b      	ldr	r3, [r3, #0]
    539c:	2b00      	cmp	r3, #0
    539e:	d001      	beq.n	53a4 <USART1_IRQHandler+0xbc>
		taskYIELD();
    53a0:	f7ff fcba 	bl	4d18 <vPortYieldFromISR>
	}
}
    53a4:	f107 0708 	add.w	r7, r7, #8
    53a8:	46bd      	mov	sp, r7
    53aa:	bd80      	pop	{r7, pc}

000053ac <send_byte>:

void send_byte(char ch)
{
    53ac:	b580      	push	{r7, lr}
    53ae:	b082      	sub	sp, #8
    53b0:	af00      	add	r7, sp, #0
    53b2:	4603      	mov	r3, r0
    53b4:	71fb      	strb	r3, [r7, #7]
	/* Wait until the RS232 port can receive another byte (this semaphore
	 * is "given" by the RS232 port interrupt when the buffer has room for
	 * another byte.
	 */
	while (!xSemaphoreTake(serial_tx_wait_sem, portMAX_DELAY));
    53b6:	bf00      	nop
    53b8:	f644 2348 	movw	r3, #19016	; 0x4a48
    53bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c0:	681b      	ldr	r3, [r3, #0]
    53c2:	4618      	mov	r0, r3
    53c4:	f04f 0100 	mov.w	r1, #0
    53c8:	f04f 32ff 	mov.w	r2, #4294967295
    53cc:	f04f 0300 	mov.w	r3, #0
    53d0:	f7fd fec0 	bl	3154 <xQueueGenericReceive>
    53d4:	4603      	mov	r3, r0
    53d6:	2b00      	cmp	r3, #0
    53d8:	d0ee      	beq.n	53b8 <send_byte+0xc>

	/* Send the byte and enable the transmit interrupt (it is disabled by
	 * the interrupt).
	 */
	USART_SendData(USART1, ch);
    53da:	79fb      	ldrb	r3, [r7, #7]
    53dc:	b29b      	uxth	r3, r3
    53de:	f44f 5060 	mov.w	r0, #14336	; 0x3800
    53e2:	f2c4 0001 	movt	r0, #16385	; 0x4001
    53e6:	4619      	mov	r1, r3
    53e8:	f7fc fd02 	bl	1df0 <USART_SendData>
	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
    53ec:	f44f 5060 	mov.w	r0, #14336	; 0x3800
    53f0:	f2c4 0001 	movt	r0, #16385	; 0x4001
    53f4:	f240 7127 	movw	r1, #1831	; 0x727
    53f8:	f04f 0201 	mov.w	r2, #1
    53fc:	f7fc fbee 	bl	1bdc <USART_ITConfig>
}
    5400:	f107 0708 	add.w	r7, r7, #8
    5404:	46bd      	mov	sp, r7
    5406:	bd80      	pop	{r7, pc}

00005408 <receive_byte>:

char receive_byte()
{
    5408:	b580      	push	{r7, lr}
    540a:	b082      	sub	sp, #8
    540c:	af00      	add	r7, sp, #0
	serial_msg msg;
    
	 /* Wait for a byte to be queued by the receive interrupts handler. */
	while (!xQueueReceive(serial_rx_queue, &msg, portMAX_DELAY));
    540e:	bf00      	nop
    5410:	f644 234c 	movw	r3, #19020	; 0x4a4c
    5414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5418:	681b      	ldr	r3, [r3, #0]
    541a:	4618      	mov	r0, r3
    541c:	f107 0304 	add.w	r3, r7, #4
    5420:	4619      	mov	r1, r3
    5422:	f04f 32ff 	mov.w	r2, #4294967295
    5426:	f04f 0300 	mov.w	r3, #0
    542a:	f7fd fe93 	bl	3154 <xQueueGenericReceive>
    542e:	4603      	mov	r3, r0
    5430:	2b00      	cmp	r3, #0
    5432:	d0ed      	beq.n	5410 <receive_byte+0x8>
	       
	return msg.ch;
    5434:	793b      	ldrb	r3, [r7, #4]
}
    5436:	4618      	mov	r0, r3
    5438:	f107 0708 	add.w	r7, r7, #8
    543c:	46bd      	mov	sp, r7
    543e:	bd80      	pop	{r7, pc}

00005440 <get_unaligned>:
    uint32_t cursor;
};

static struct romfs_fds_t romfs_fds[MAX_FDS];

static uint32_t get_unaligned(const uint8_t * d) {
    5440:	b480      	push	{r7}
    5442:	b083      	sub	sp, #12
    5444:	af00      	add	r7, sp, #0
    5446:	6078      	str	r0, [r7, #4]
    return ((uint32_t) d[0]) | ((uint32_t) (d[1] << 8)) | ((uint32_t) (d[2] << 16)) | ((uint32_t) (d[3] << 24));
    5448:	687b      	ldr	r3, [r7, #4]
    544a:	781b      	ldrb	r3, [r3, #0]
    544c:	461a      	mov	r2, r3
    544e:	687b      	ldr	r3, [r7, #4]
    5450:	f103 0301 	add.w	r3, r3, #1
    5454:	781b      	ldrb	r3, [r3, #0]
    5456:	ea4f 2303 	mov.w	r3, r3, lsl #8
    545a:	431a      	orrs	r2, r3
    545c:	687b      	ldr	r3, [r7, #4]
    545e:	f103 0302 	add.w	r3, r3, #2
    5462:	781b      	ldrb	r3, [r3, #0]
    5464:	ea4f 4303 	mov.w	r3, r3, lsl #16
    5468:	431a      	orrs	r2, r3
    546a:	687b      	ldr	r3, [r7, #4]
    546c:	f103 0303 	add.w	r3, r3, #3
    5470:	781b      	ldrb	r3, [r3, #0]
    5472:	ea4f 6303 	mov.w	r3, r3, lsl #24
    5476:	4313      	orrs	r3, r2
}
    5478:	4618      	mov	r0, r3
    547a:	f107 070c 	add.w	r7, r7, #12
    547e:	46bd      	mov	sp, r7
    5480:	bc80      	pop	{r7}
    5482:	4770      	bx	lr

00005484 <romfs_read>:

static ssize_t romfs_read(void * opaque, void * buf, size_t count) {
    5484:	b580      	push	{r7, lr}
    5486:	b088      	sub	sp, #32
    5488:	af00      	add	r7, sp, #0
    548a:	60f8      	str	r0, [r7, #12]
    548c:	60b9      	str	r1, [r7, #8]
    548e:	607a      	str	r2, [r7, #4]
    struct romfs_fds_t * f = (struct romfs_fds_t *) opaque;
    5490:	68fb      	ldr	r3, [r7, #12]
    5492:	61fb      	str	r3, [r7, #28]
    const uint8_t * size_p = f->file - 4;
    5494:	69fb      	ldr	r3, [r7, #28]
    5496:	681b      	ldr	r3, [r3, #0]
    5498:	f1a3 0304 	sub.w	r3, r3, #4
    549c:	61bb      	str	r3, [r7, #24]
    uint32_t size = get_unaligned(size_p);
    549e:	69b8      	ldr	r0, [r7, #24]
    54a0:	f7ff ffce 	bl	5440 <get_unaligned>
    54a4:	6178      	str	r0, [r7, #20]
    
    if ((f->cursor + count) > size)
    54a6:	69fb      	ldr	r3, [r7, #28]
    54a8:	685a      	ldr	r2, [r3, #4]
    54aa:	687b      	ldr	r3, [r7, #4]
    54ac:	18d2      	adds	r2, r2, r3
    54ae:	697b      	ldr	r3, [r7, #20]
    54b0:	429a      	cmp	r2, r3
    54b2:	d904      	bls.n	54be <romfs_read+0x3a>
        count = size - f->cursor;
    54b4:	69fb      	ldr	r3, [r7, #28]
    54b6:	685b      	ldr	r3, [r3, #4]
    54b8:	697a      	ldr	r2, [r7, #20]
    54ba:	1ad3      	subs	r3, r2, r3
    54bc:	607b      	str	r3, [r7, #4]

    memcpy(buf, f->file + f->cursor, count);
    54be:	69fb      	ldr	r3, [r7, #28]
    54c0:	681a      	ldr	r2, [r3, #0]
    54c2:	69fb      	ldr	r3, [r7, #28]
    54c4:	685b      	ldr	r3, [r3, #4]
    54c6:	18d3      	adds	r3, r2, r3
    54c8:	68b8      	ldr	r0, [r7, #8]
    54ca:	4619      	mov	r1, r3
    54cc:	687a      	ldr	r2, [r7, #4]
    54ce:	f000 ffc1 	bl	6454 <memcpy>
    f->cursor += count;
    54d2:	69fb      	ldr	r3, [r7, #28]
    54d4:	685a      	ldr	r2, [r3, #4]
    54d6:	687b      	ldr	r3, [r7, #4]
    54d8:	18d2      	adds	r2, r2, r3
    54da:	69fb      	ldr	r3, [r7, #28]
    54dc:	605a      	str	r2, [r3, #4]

    return count;
    54de:	687b      	ldr	r3, [r7, #4]
}
    54e0:	4618      	mov	r0, r3
    54e2:	f107 0720 	add.w	r7, r7, #32
    54e6:	46bd      	mov	sp, r7
    54e8:	bd80      	pop	{r7, pc}
    54ea:	bf00      	nop

000054ec <romfs_seek>:

static off_t romfs_seek(void * opaque, off_t offset, int whence) {
    54ec:	b580      	push	{r7, lr}
    54ee:	b088      	sub	sp, #32
    54f0:	af00      	add	r7, sp, #0
    54f2:	60f8      	str	r0, [r7, #12]
    54f4:	60b9      	str	r1, [r7, #8]
    54f6:	607a      	str	r2, [r7, #4]
    struct romfs_fds_t * f = (struct romfs_fds_t *) opaque;
    54f8:	68fb      	ldr	r3, [r7, #12]
    54fa:	61bb      	str	r3, [r7, #24]
    const uint8_t * size_p = f->file - 4;
    54fc:	69bb      	ldr	r3, [r7, #24]
    54fe:	681b      	ldr	r3, [r3, #0]
    5500:	f1a3 0304 	sub.w	r3, r3, #4
    5504:	617b      	str	r3, [r7, #20]
    uint32_t size = get_unaligned(size_p);
    5506:	6978      	ldr	r0, [r7, #20]
    5508:	f7ff ff9a 	bl	5440 <get_unaligned>
    550c:	6138      	str	r0, [r7, #16]
    uint32_t origin;
    
    switch (whence) {
    550e:	687b      	ldr	r3, [r7, #4]
    5510:	2b01      	cmp	r3, #1
    5512:	d007      	beq.n	5524 <romfs_seek+0x38>
    5514:	2b02      	cmp	r3, #2
    5516:	d009      	beq.n	552c <romfs_seek+0x40>
    5518:	2b00      	cmp	r3, #0
    551a:	d10a      	bne.n	5532 <romfs_seek+0x46>
    case SEEK_SET:
        origin = 0;
    551c:	f04f 0300 	mov.w	r3, #0
    5520:	61fb      	str	r3, [r7, #28]
        break;
    5522:	e009      	b.n	5538 <romfs_seek+0x4c>
    case SEEK_CUR:
        origin = f->cursor;
    5524:	69bb      	ldr	r3, [r7, #24]
    5526:	685b      	ldr	r3, [r3, #4]
    5528:	61fb      	str	r3, [r7, #28]
        break;
    552a:	e005      	b.n	5538 <romfs_seek+0x4c>
    case SEEK_END:
        origin = size;
    552c:	693b      	ldr	r3, [r7, #16]
    552e:	61fb      	str	r3, [r7, #28]
        break;
    5530:	e002      	b.n	5538 <romfs_seek+0x4c>
    default:
        return -1;
    5532:	f04f 33ff 	mov.w	r3, #4294967295
    5536:	e013      	b.n	5560 <romfs_seek+0x74>
    }

    offset = origin + offset;
    5538:	68ba      	ldr	r2, [r7, #8]
    553a:	69fb      	ldr	r3, [r7, #28]
    553c:	18d3      	adds	r3, r2, r3
    553e:	60bb      	str	r3, [r7, #8]

    if (offset < 0)
    5540:	68bb      	ldr	r3, [r7, #8]
    5542:	2b00      	cmp	r3, #0
    5544:	da02      	bge.n	554c <romfs_seek+0x60>
        return -1;
    5546:	f04f 33ff 	mov.w	r3, #4294967295
    554a:	e009      	b.n	5560 <romfs_seek+0x74>
    if (offset > size)
    554c:	68ba      	ldr	r2, [r7, #8]
    554e:	693b      	ldr	r3, [r7, #16]
    5550:	429a      	cmp	r2, r3
    5552:	d901      	bls.n	5558 <romfs_seek+0x6c>
        offset = size;
    5554:	693b      	ldr	r3, [r7, #16]
    5556:	60bb      	str	r3, [r7, #8]

    f->cursor = offset;
    5558:	68ba      	ldr	r2, [r7, #8]
    555a:	69bb      	ldr	r3, [r7, #24]
    555c:	605a      	str	r2, [r3, #4]

    return offset;
    555e:	68bb      	ldr	r3, [r7, #8]
}
    5560:	4618      	mov	r0, r3
    5562:	f107 0720 	add.w	r7, r7, #32
    5566:	46bd      	mov	sp, r7
    5568:	bd80      	pop	{r7, pc}
    556a:	bf00      	nop

0000556c <romfs_get_file_by_hash>:

const uint8_t * romfs_get_file_by_hash(const uint8_t * romfs, uint32_t h, uint32_t * len) {
    556c:	b580      	push	{r7, lr}
    556e:	b086      	sub	sp, #24
    5570:	af00      	add	r7, sp, #0
    5572:	60f8      	str	r0, [r7, #12]
    5574:	60b9      	str	r1, [r7, #8]
    5576:	607a      	str	r2, [r7, #4]
    const uint8_t * meta;

    for (meta = romfs; get_unaligned(meta) && get_unaligned(meta + 4); meta += get_unaligned(meta + 4) + 8) {
    5578:	68fb      	ldr	r3, [r7, #12]
    557a:	617b      	str	r3, [r7, #20]
    557c:	e022      	b.n	55c4 <romfs_get_file_by_hash+0x58>
        if (get_unaligned(meta) == h) {
    557e:	6978      	ldr	r0, [r7, #20]
    5580:	f7ff ff5e 	bl	5440 <get_unaligned>
    5584:	4602      	mov	r2, r0
    5586:	68bb      	ldr	r3, [r7, #8]
    5588:	429a      	cmp	r2, r3
    558a:	d10f      	bne.n	55ac <romfs_get_file_by_hash+0x40>
            if (len) {
    558c:	687b      	ldr	r3, [r7, #4]
    558e:	2b00      	cmp	r3, #0
    5590:	d008      	beq.n	55a4 <romfs_get_file_by_hash+0x38>
                *len = get_unaligned(meta + 4);
    5592:	697b      	ldr	r3, [r7, #20]
    5594:	f103 0304 	add.w	r3, r3, #4
    5598:	4618      	mov	r0, r3
    559a:	f7ff ff51 	bl	5440 <get_unaligned>
    559e:	4602      	mov	r2, r0
    55a0:	687b      	ldr	r3, [r7, #4]
    55a2:	601a      	str	r2, [r3, #0]
            }
            return meta + 8;
    55a4:	697b      	ldr	r3, [r7, #20]
    55a6:	f103 0308 	add.w	r3, r3, #8
    55aa:	e01c      	b.n	55e6 <romfs_get_file_by_hash+0x7a>
}

const uint8_t * romfs_get_file_by_hash(const uint8_t * romfs, uint32_t h, uint32_t * len) {
    const uint8_t * meta;

    for (meta = romfs; get_unaligned(meta) && get_unaligned(meta + 4); meta += get_unaligned(meta + 4) + 8) {
    55ac:	697b      	ldr	r3, [r7, #20]
    55ae:	f103 0304 	add.w	r3, r3, #4
    55b2:	4618      	mov	r0, r3
    55b4:	f7ff ff44 	bl	5440 <get_unaligned>
    55b8:	4603      	mov	r3, r0
    55ba:	f103 0308 	add.w	r3, r3, #8
    55be:	697a      	ldr	r2, [r7, #20]
    55c0:	18d3      	adds	r3, r2, r3
    55c2:	617b      	str	r3, [r7, #20]
    55c4:	6978      	ldr	r0, [r7, #20]
    55c6:	f7ff ff3b 	bl	5440 <get_unaligned>
    55ca:	4603      	mov	r3, r0
    55cc:	2b00      	cmp	r3, #0
    55ce:	d008      	beq.n	55e2 <romfs_get_file_by_hash+0x76>
    55d0:	697b      	ldr	r3, [r7, #20]
    55d2:	f103 0304 	add.w	r3, r3, #4
    55d6:	4618      	mov	r0, r3
    55d8:	f7ff ff32 	bl	5440 <get_unaligned>
    55dc:	4603      	mov	r3, r0
    55de:	2b00      	cmp	r3, #0
    55e0:	d1cd      	bne.n	557e <romfs_get_file_by_hash+0x12>
            }
            return meta + 8;
        }
    }

    return NULL;
    55e2:	f04f 0300 	mov.w	r3, #0
}
    55e6:	4618      	mov	r0, r3
    55e8:	f107 0718 	add.w	r7, r7, #24
    55ec:	46bd      	mov	sp, r7
    55ee:	bd80      	pop	{r7, pc}

000055f0 <romfs_open>:

static int romfs_open(void * opaque, const char * path, int flags, int mode) {
    55f0:	b580      	push	{r7, lr}
    55f2:	b08a      	sub	sp, #40	; 0x28
    55f4:	af02      	add	r7, sp, #8
    55f6:	60f8      	str	r0, [r7, #12]
    55f8:	60b9      	str	r1, [r7, #8]
    55fa:	607a      	str	r2, [r7, #4]
    55fc:	603b      	str	r3, [r7, #0]
    uint32_t h = hash_djb2((const uint8_t *) path, -1);
    55fe:	68b8      	ldr	r0, [r7, #8]
    5600:	f04f 31ff 	mov.w	r1, #4294967295
    5604:	f000 f85c 	bl	56c0 <hash_djb2>
    5608:	61b8      	str	r0, [r7, #24]
    const uint8_t * romfs = (const uint8_t *) opaque;
    560a:	68fb      	ldr	r3, [r7, #12]
    560c:	617b      	str	r3, [r7, #20]
    const uint8_t * file;
    int r = -1;
    560e:	f04f 33ff 	mov.w	r3, #4294967295
    5612:	61fb      	str	r3, [r7, #28]

    file = romfs_get_file_by_hash(romfs, h, NULL);
    5614:	6978      	ldr	r0, [r7, #20]
    5616:	69b9      	ldr	r1, [r7, #24]
    5618:	f04f 0200 	mov.w	r2, #0
    561c:	f7ff ffa6 	bl	556c <romfs_get_file_by_hash>
    5620:	6138      	str	r0, [r7, #16]

    if (file) {
    5622:	693b      	ldr	r3, [r7, #16]
    5624:	2b00      	cmp	r3, #0
    5626:	d033      	beq.n	5690 <romfs_open+0xa0>
        r = fio_open(romfs_read, NULL, romfs_seek, NULL, NULL);
    5628:	f04f 0300 	mov.w	r3, #0
    562c:	9300      	str	r3, [sp, #0]
    562e:	f245 4085 	movw	r0, #21637	; 0x5485
    5632:	f2c0 0000 	movt	r0, #0
    5636:	f04f 0100 	mov.w	r1, #0
    563a:	f245 42ed 	movw	r2, #21741	; 0x54ed
    563e:	f2c0 0200 	movt	r2, #0
    5642:	f04f 0300 	mov.w	r3, #0
    5646:	f000 faa5 	bl	5b94 <fio_open>
    564a:	61f8      	str	r0, [r7, #28]
        if (r > 0) {
    564c:	69fb      	ldr	r3, [r7, #28]
    564e:	2b00      	cmp	r3, #0
    5650:	dd1e      	ble.n	5690 <romfs_open+0xa0>
            romfs_fds[r].file = file;
    5652:	f244 6304 	movw	r3, #17924	; 0x4604
    5656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    565a:	69fa      	ldr	r2, [r7, #28]
    565c:	6939      	ldr	r1, [r7, #16]
    565e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            romfs_fds[r].cursor = 0;
    5662:	f244 6204 	movw	r2, #17924	; 0x4604
    5666:	f2c2 0200 	movt	r2, #8192	; 0x2000
    566a:	69fb      	ldr	r3, [r7, #28]
    566c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    5670:	18d3      	adds	r3, r2, r3
    5672:	f04f 0200 	mov.w	r2, #0
    5676:	605a      	str	r2, [r3, #4]
            fio_set_opaque(r, romfs_fds + r);
    5678:	69fb      	ldr	r3, [r7, #28]
    567a:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    567e:	f244 6304 	movw	r3, #17924	; 0x4604
    5682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5686:	18d3      	adds	r3, r2, r3
    5688:	69f8      	ldr	r0, [r7, #28]
    568a:	4619      	mov	r1, r3
    568c:	f000 fc6c 	bl	5f68 <fio_set_opaque>
        }
    }
    return r;
    5690:	69fb      	ldr	r3, [r7, #28]
}
    5692:	4618      	mov	r0, r3
    5694:	f107 0720 	add.w	r7, r7, #32
    5698:	46bd      	mov	sp, r7
    569a:	bd80      	pop	{r7, pc}

0000569c <register_romfs>:

void register_romfs(const char * mountpoint, const uint8_t * romfs) {
    569c:	b580      	push	{r7, lr}
    569e:	b082      	sub	sp, #8
    56a0:	af00      	add	r7, sp, #0
    56a2:	6078      	str	r0, [r7, #4]
    56a4:	6039      	str	r1, [r7, #0]
//    DBGOUT("Registering romfs `%s' @ %p\r\n", mountpoint, romfs);
    register_fs(mountpoint, romfs_open, (void *) romfs);
    56a6:	6878      	ldr	r0, [r7, #4]
    56a8:	f245 51f1 	movw	r1, #22001	; 0x55f1
    56ac:	f2c0 0100 	movt	r1, #0
    56b0:	683a      	ldr	r2, [r7, #0]
    56b2:	f000 f849 	bl	5748 <register_fs>
}
    56b6:	f107 0708 	add.w	r7, r7, #8
    56ba:	46bd      	mov	sp, r7
    56bc:	bd80      	pop	{r7, pc}
    56be:	bf00      	nop

000056c0 <hash_djb2>:
#include <stdint.h>
#include "hash-djb2.h"
#include "osdebug.h"

uint32_t hash_djb2(const uint8_t * str, ssize_t _max) {
    56c0:	b480      	push	{r7}
    56c2:	b087      	sub	sp, #28
    56c4:	af00      	add	r7, sp, #0
    56c6:	6078      	str	r0, [r7, #4]
    56c8:	6039      	str	r1, [r7, #0]
    uint32_t hash = 5381;
    56ca:	f241 5305 	movw	r3, #5381	; 0x1505
    56ce:	617b      	str	r3, [r7, #20]
    uint32_t max = (uint32_t) _max;
    56d0:	683b      	ldr	r3, [r7, #0]
    56d2:	613b      	str	r3, [r7, #16]
    int c;
    
    while (((c = *str++)) && max--) {
    56d4:	e007      	b.n	56e6 <hash_djb2+0x26>
        hash = ((hash << 5) + hash) ^ c;
    56d6:	697b      	ldr	r3, [r7, #20]
    56d8:	ea4f 1243 	mov.w	r2, r3, lsl #5
    56dc:	697b      	ldr	r3, [r7, #20]
    56de:	18d2      	adds	r2, r2, r3
    56e0:	68fb      	ldr	r3, [r7, #12]
    56e2:	4053      	eors	r3, r2
    56e4:	617b      	str	r3, [r7, #20]
uint32_t hash_djb2(const uint8_t * str, ssize_t _max) {
    uint32_t hash = 5381;
    uint32_t max = (uint32_t) _max;
    int c;
    
    while (((c = *str++)) && max--) {
    56e6:	687b      	ldr	r3, [r7, #4]
    56e8:	781b      	ldrb	r3, [r3, #0]
    56ea:	60fb      	str	r3, [r7, #12]
    56ec:	68fb      	ldr	r3, [r7, #12]
    56ee:	2b00      	cmp	r3, #0
    56f0:	bf0c      	ite	eq
    56f2:	2300      	moveq	r3, #0
    56f4:	2301      	movne	r3, #1
    56f6:	b2db      	uxtb	r3, r3
    56f8:	687a      	ldr	r2, [r7, #4]
    56fa:	f102 0201 	add.w	r2, r2, #1
    56fe:	607a      	str	r2, [r7, #4]
    5700:	2b00      	cmp	r3, #0
    5702:	d00b      	beq.n	571c <hash_djb2+0x5c>
    5704:	693b      	ldr	r3, [r7, #16]
    5706:	2b00      	cmp	r3, #0
    5708:	bf0c      	ite	eq
    570a:	2300      	moveq	r3, #0
    570c:	2301      	movne	r3, #1
    570e:	b2db      	uxtb	r3, r3
    5710:	693a      	ldr	r2, [r7, #16]
    5712:	f102 32ff 	add.w	r2, r2, #4294967295
    5716:	613a      	str	r2, [r7, #16]
    5718:	2b00      	cmp	r3, #0
    571a:	d1dc      	bne.n	56d6 <hash_djb2+0x16>
        hash = ((hash << 5) + hash) ^ c;
    }
    
    return hash;
    571c:	697b      	ldr	r3, [r7, #20]
}
    571e:	4618      	mov	r0, r3
    5720:	f107 071c 	add.w	r7, r7, #28
    5724:	46bd      	mov	sp, r7
    5726:	bc80      	pop	{r7}
    5728:	4770      	bx	lr
    572a:	bf00      	nop

0000572c <fs_init>:
    void * opaque;
};

static struct fs_t fss[MAX_FS];

__attribute__((constructor)) void fs_init() {
    572c:	b580      	push	{r7, lr}
    572e:	af00      	add	r7, sp, #0
    memset(fss, 0, sizeof(fss));
    5730:	f244 7004 	movw	r0, #18180	; 0x4704
    5734:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5738:	f04f 0100 	mov.w	r1, #0
    573c:	f04f 02c0 	mov.w	r2, #192	; 0xc0
    5740:	f000 fe32 	bl	63a8 <memset>
}
    5744:	bd80      	pop	{r7, pc}
    5746:	bf00      	nop

00005748 <register_fs>:

int register_fs(const char * mountpoint, fs_open_t callback, void * opaque) {
    5748:	b580      	push	{r7, lr}
    574a:	b086      	sub	sp, #24
    574c:	af00      	add	r7, sp, #0
    574e:	60f8      	str	r0, [r7, #12]
    5750:	60b9      	str	r1, [r7, #8]
    5752:	607a      	str	r2, [r7, #4]
    int i;
    DBGOUT("register_fs(\"%s\", %p, %p)\r\n", mountpoint, callback, opaque);
    5754:	f646 30b4 	movw	r0, #27572	; 0x6bb4
    5758:	f2c0 0000 	movt	r0, #0
    575c:	68f9      	ldr	r1, [r7, #12]
    575e:	68ba      	ldr	r2, [r7, #8]
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	f000 fe19 	bl	6398 <osDbgPrintf>
    
    for (i = 0; i < MAX_FS; i++) {
    5766:	f04f 0300 	mov.w	r3, #0
    576a:	617b      	str	r3, [r7, #20]
    576c:	e049      	b.n	5802 <register_fs+0xba>
        if (!fss[i].cb) {
    576e:	f244 7204 	movw	r2, #18180	; 0x4704
    5772:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5776:	6979      	ldr	r1, [r7, #20]
    5778:	460b      	mov	r3, r1
    577a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    577e:	185b      	adds	r3, r3, r1
    5780:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5784:	18d3      	adds	r3, r2, r3
    5786:	f103 0304 	add.w	r3, r3, #4
    578a:	681b      	ldr	r3, [r3, #0]
    578c:	2b00      	cmp	r3, #0
    578e:	d134      	bne.n	57fa <register_fs+0xb2>
            fss[i].hash = hash_djb2((const uint8_t *) mountpoint, -1);
    5790:	68f8      	ldr	r0, [r7, #12]
    5792:	f04f 31ff 	mov.w	r1, #4294967295
    5796:	f7ff ff93 	bl	56c0 <hash_djb2>
    579a:	f244 7204 	movw	r2, #18180	; 0x4704
    579e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57a2:	6979      	ldr	r1, [r7, #20]
    57a4:	460b      	mov	r3, r1
    57a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    57aa:	185b      	adds	r3, r3, r1
    57ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
    57b0:	18d3      	adds	r3, r2, r3
    57b2:	6018      	str	r0, [r3, #0]
            fss[i].cb = callback;
    57b4:	f244 7204 	movw	r2, #18180	; 0x4704
    57b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57bc:	6979      	ldr	r1, [r7, #20]
    57be:	460b      	mov	r3, r1
    57c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    57c4:	185b      	adds	r3, r3, r1
    57c6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    57ca:	18d3      	adds	r3, r2, r3
    57cc:	f103 0304 	add.w	r3, r3, #4
    57d0:	68ba      	ldr	r2, [r7, #8]
    57d2:	601a      	str	r2, [r3, #0]
            fss[i].opaque = opaque;
    57d4:	f244 7204 	movw	r2, #18180	; 0x4704
    57d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57dc:	6979      	ldr	r1, [r7, #20]
    57de:	460b      	mov	r3, r1
    57e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    57e4:	185b      	adds	r3, r3, r1
    57e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    57ea:	18d3      	adds	r3, r2, r3
    57ec:	f103 0308 	add.w	r3, r3, #8
    57f0:	687a      	ldr	r2, [r7, #4]
    57f2:	601a      	str	r2, [r3, #0]
            return 0;
    57f4:	f04f 0300 	mov.w	r3, #0
    57f8:	e008      	b.n	580c <register_fs+0xc4>

int register_fs(const char * mountpoint, fs_open_t callback, void * opaque) {
    int i;
    DBGOUT("register_fs(\"%s\", %p, %p)\r\n", mountpoint, callback, opaque);
    
    for (i = 0; i < MAX_FS; i++) {
    57fa:	697b      	ldr	r3, [r7, #20]
    57fc:	f103 0301 	add.w	r3, r3, #1
    5800:	617b      	str	r3, [r7, #20]
    5802:	697b      	ldr	r3, [r7, #20]
    5804:	2b0f      	cmp	r3, #15
    5806:	ddb2      	ble.n	576e <register_fs+0x26>
            fss[i].opaque = opaque;
            return 0;
        }
    }
    
    return -1;
    5808:	f04f 33ff 	mov.w	r3, #4294967295
}
    580c:	4618      	mov	r0, r3
    580e:	f107 0718 	add.w	r7, r7, #24
    5812:	46bd      	mov	sp, r7
    5814:	bd80      	pop	{r7, pc}
    5816:	bf00      	nop

00005818 <fs_open>:

int fs_open(const char * path, int flags, int mode) {
    5818:	b590      	push	{r4, r7, lr}
    581a:	b089      	sub	sp, #36	; 0x24
    581c:	af00      	add	r7, sp, #0
    581e:	60f8      	str	r0, [r7, #12]
    5820:	60b9      	str	r1, [r7, #8]
    5822:	607a      	str	r2, [r7, #4]
    const char * slash;
    uint32_t hash;
    int i;
//    DBGOUT("fs_open(\"%s\", %i, %i)\r\n", path, flags, mode);
    
    while (path[0] == '/')
    5824:	e003      	b.n	582e <fs_open+0x16>
        path++;
    5826:	68fb      	ldr	r3, [r7, #12]
    5828:	f103 0301 	add.w	r3, r3, #1
    582c:	60fb      	str	r3, [r7, #12]
    const char * slash;
    uint32_t hash;
    int i;
//    DBGOUT("fs_open(\"%s\", %i, %i)\r\n", path, flags, mode);
    
    while (path[0] == '/')
    582e:	68fb      	ldr	r3, [r7, #12]
    5830:	781b      	ldrb	r3, [r3, #0]
    5832:	2b2f      	cmp	r3, #47	; 0x2f
    5834:	d0f7      	beq.n	5826 <fs_open+0xe>
        path++;
    
    slash = strchr(path, '/');
    5836:	68f8      	ldr	r0, [r7, #12]
    5838:	f04f 012f 	mov.w	r1, #47	; 0x2f
    583c:	f000 feee 	bl	661c <strchr>
    5840:	61b8      	str	r0, [r7, #24]
    
    if (!slash)
    5842:	69bb      	ldr	r3, [r7, #24]
    5844:	2b00      	cmp	r3, #0
    5846:	d102      	bne.n	584e <fs_open+0x36>
        return -2;
    5848:	f06f 0301 	mvn.w	r3, #1
    584c:	e04d      	b.n	58ea <fs_open+0xd2>

    hash = hash_djb2((const uint8_t *) path, slash - path);
    584e:	69ba      	ldr	r2, [r7, #24]
    5850:	68fb      	ldr	r3, [r7, #12]
    5852:	1ad3      	subs	r3, r2, r3
    5854:	68f8      	ldr	r0, [r7, #12]
    5856:	4619      	mov	r1, r3
    5858:	f7ff ff32 	bl	56c0 <hash_djb2>
    585c:	6178      	str	r0, [r7, #20]
    path = slash + 1;
    585e:	69bb      	ldr	r3, [r7, #24]
    5860:	f103 0301 	add.w	r3, r3, #1
    5864:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_FS; i++) {
    5866:	f04f 0300 	mov.w	r3, #0
    586a:	61fb      	str	r3, [r7, #28]
    586c:	e038      	b.n	58e0 <fs_open+0xc8>
        if (fss[i].hash == hash)
    586e:	f244 7204 	movw	r2, #18180	; 0x4704
    5872:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5876:	69f9      	ldr	r1, [r7, #28]
    5878:	460b      	mov	r3, r1
    587a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    587e:	185b      	adds	r3, r3, r1
    5880:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5884:	18d3      	adds	r3, r2, r3
    5886:	681a      	ldr	r2, [r3, #0]
    5888:	697b      	ldr	r3, [r7, #20]
    588a:	429a      	cmp	r2, r3
    588c:	d124      	bne.n	58d8 <fs_open+0xc0>
            return fss[i].cb(fss[i].opaque, path, flags, mode);
    588e:	f244 7204 	movw	r2, #18180	; 0x4704
    5892:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5896:	69f9      	ldr	r1, [r7, #28]
    5898:	460b      	mov	r3, r1
    589a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    589e:	185b      	adds	r3, r3, r1
    58a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    58a4:	18d3      	adds	r3, r2, r3
    58a6:	f103 0304 	add.w	r3, r3, #4
    58aa:	681c      	ldr	r4, [r3, #0]
    58ac:	f244 7204 	movw	r2, #18180	; 0x4704
    58b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58b4:	69f9      	ldr	r1, [r7, #28]
    58b6:	460b      	mov	r3, r1
    58b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    58bc:	185b      	adds	r3, r3, r1
    58be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    58c2:	18d3      	adds	r3, r2, r3
    58c4:	f103 0308 	add.w	r3, r3, #8
    58c8:	681b      	ldr	r3, [r3, #0]
    58ca:	4618      	mov	r0, r3
    58cc:	68f9      	ldr	r1, [r7, #12]
    58ce:	68ba      	ldr	r2, [r7, #8]
    58d0:	687b      	ldr	r3, [r7, #4]
    58d2:	47a0      	blx	r4
    58d4:	4603      	mov	r3, r0
    58d6:	e008      	b.n	58ea <fs_open+0xd2>
        return -2;

    hash = hash_djb2((const uint8_t *) path, slash - path);
    path = slash + 1;

    for (i = 0; i < MAX_FS; i++) {
    58d8:	69fb      	ldr	r3, [r7, #28]
    58da:	f103 0301 	add.w	r3, r3, #1
    58de:	61fb      	str	r3, [r7, #28]
    58e0:	69fb      	ldr	r3, [r7, #28]
    58e2:	2b0f      	cmp	r3, #15
    58e4:	ddc3      	ble.n	586e <fs_open+0x56>
        if (fss[i].hash == hash)
            return fss[i].cb(fss[i].opaque, path, flags, mode);
    }
    
    return -2;
    58e6:	f06f 0301 	mvn.w	r3, #1
}
    58ea:	4618      	mov	r0, r3
    58ec:	f107 0724 	add.w	r7, r7, #36	; 0x24
    58f0:	46bd      	mov	sp, r7
    58f2:	bd90      	pop	{r4, r7, pc}

000058f4 <stdin_read>:

extern serial_ops serial;

static struct fddef_t fio_fds[MAX_FDS];

static ssize_t stdin_read(void * opaque, void * buf, size_t count) {
    58f4:	b590      	push	{r4, r7, lr}
    58f6:	b087      	sub	sp, #28
    58f8:	af00      	add	r7, sp, #0
    58fa:	60f8      	str	r0, [r7, #12]
    58fc:	60b9      	str	r1, [r7, #8]
    58fe:	607a      	str	r2, [r7, #4]
    int i;
    
    char * data = (char *) buf;
    5900:	68bb      	ldr	r3, [r7, #8]
    5902:	613b      	str	r3, [r7, #16]

    for (i = 0; i < count; i++)
    5904:	f04f 0300 	mov.w	r3, #0
    5908:	617b      	str	r3, [r7, #20]
    590a:	e00a      	b.n	5922 <stdin_read+0x2e>
        data[i] = (char)receive_byte();
    590c:	697b      	ldr	r3, [r7, #20]
    590e:	693a      	ldr	r2, [r7, #16]
    5910:	18d4      	adds	r4, r2, r3
    5912:	f7ff fd79 	bl	5408 <receive_byte>
    5916:	4603      	mov	r3, r0
    5918:	7023      	strb	r3, [r4, #0]
static ssize_t stdin_read(void * opaque, void * buf, size_t count) {
    int i;
    
    char * data = (char *) buf;

    for (i = 0; i < count; i++)
    591a:	697b      	ldr	r3, [r7, #20]
    591c:	f103 0301 	add.w	r3, r3, #1
    5920:	617b      	str	r3, [r7, #20]
    5922:	697a      	ldr	r2, [r7, #20]
    5924:	687b      	ldr	r3, [r7, #4]
    5926:	429a      	cmp	r2, r3
    5928:	d3f0      	bcc.n	590c <stdin_read+0x18>
        data[i] = (char)receive_byte();
    
    return count;
    592a:	687b      	ldr	r3, [r7, #4]
}
    592c:	4618      	mov	r0, r3
    592e:	f107 071c 	add.w	r7, r7, #28
    5932:	46bd      	mov	sp, r7
    5934:	bd90      	pop	{r4, r7, pc}
    5936:	bf00      	nop

00005938 <stdout_write>:

static ssize_t stdout_write(void * opaque, const void * buf, size_t count) {
    5938:	b580      	push	{r7, lr}
    593a:	b086      	sub	sp, #24
    593c:	af00      	add	r7, sp, #0
    593e:	60f8      	str	r0, [r7, #12]
    5940:	60b9      	str	r1, [r7, #8]
    5942:	607a      	str	r2, [r7, #4]
    int i;
    const char * data = (const char *) buf;
    5944:	68bb      	ldr	r3, [r7, #8]
    5946:	613b      	str	r3, [r7, #16]
    
    for (i = 0; i < count; i++)
    5948:	f04f 0300 	mov.w	r3, #0
    594c:	617b      	str	r3, [r7, #20]
    594e:	e00a      	b.n	5966 <stdout_write+0x2e>
        send_byte(data[i]);
    5950:	697b      	ldr	r3, [r7, #20]
    5952:	693a      	ldr	r2, [r7, #16]
    5954:	18d3      	adds	r3, r2, r3
    5956:	781b      	ldrb	r3, [r3, #0]
    5958:	4618      	mov	r0, r3
    595a:	f7ff fd27 	bl	53ac <send_byte>

static ssize_t stdout_write(void * opaque, const void * buf, size_t count) {
    int i;
    const char * data = (const char *) buf;
    
    for (i = 0; i < count; i++)
    595e:	697b      	ldr	r3, [r7, #20]
    5960:	f103 0301 	add.w	r3, r3, #1
    5964:	617b      	str	r3, [r7, #20]
    5966:	697a      	ldr	r2, [r7, #20]
    5968:	687b      	ldr	r3, [r7, #4]
    596a:	429a      	cmp	r2, r3
    596c:	d3f0      	bcc.n	5950 <stdout_write+0x18>
        send_byte(data[i]);
    
    return count;
    596e:	687b      	ldr	r3, [r7, #4]
}
    5970:	4618      	mov	r0, r3
    5972:	f107 0718 	add.w	r7, r7, #24
    5976:	46bd      	mov	sp, r7
    5978:	bd80      	pop	{r7, pc}
    597a:	bf00      	nop

0000597c <fio_init>:

static xSemaphoreHandle fio_sem = NULL;

__attribute__((constructor)) void fio_init() {
    597c:	b580      	push	{r7, lr}
    597e:	af00      	add	r7, sp, #0
    memset(fio_fds, 0, sizeof(fio_fds));
    5980:	f244 70c4 	movw	r0, #18372	; 0x47c4
    5984:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5988:	f04f 0100 	mov.w	r1, #0
    598c:	f44f 7220 	mov.w	r2, #640	; 0x280
    5990:	f000 fd0a 	bl	63a8 <memset>
    fio_fds[0].fdread = stdin_read;
    5994:	f244 73c4 	movw	r3, #18372	; 0x47c4
    5998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    599c:	f645 02f5 	movw	r2, #22773	; 0x58f5
    59a0:	f2c0 0200 	movt	r2, #0
    59a4:	601a      	str	r2, [r3, #0]
    fio_fds[1].fdwrite = stdout_write;
    59a6:	f244 73c4 	movw	r3, #18372	; 0x47c4
    59aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ae:	f645 1239 	movw	r2, #22841	; 0x5939
    59b2:	f2c0 0200 	movt	r2, #0
    59b6:	619a      	str	r2, [r3, #24]
    fio_fds[2].fdwrite = stdout_write;
    59b8:	f244 73c4 	movw	r3, #18372	; 0x47c4
    59bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59c0:	f645 1239 	movw	r2, #22841	; 0x5939
    59c4:	f2c0 0200 	movt	r2, #0
    59c8:	62da      	str	r2, [r3, #44]	; 0x2c
    fio_sem = xSemaphoreCreateMutex();
    59ca:	f04f 0001 	mov.w	r0, #1
    59ce:	f7fd fa7f 	bl	2ed0 <xQueueCreateMutex>
    59d2:	4602      	mov	r2, r0
    59d4:	f644 2344 	movw	r3, #19012	; 0x4a44
    59d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59dc:	601a      	str	r2, [r3, #0]
}
    59de:	bd80      	pop	{r7, pc}

000059e0 <fio_getfd>:

struct fddef_t * fio_getfd(int fd) {
    59e0:	b480      	push	{r7}
    59e2:	b083      	sub	sp, #12
    59e4:	af00      	add	r7, sp, #0
    59e6:	6078      	str	r0, [r7, #4]
    if ((fd < 0) || (fd >= MAX_FDS))
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	2b00      	cmp	r3, #0
    59ec:	db02      	blt.n	59f4 <fio_getfd+0x14>
    59ee:	687b      	ldr	r3, [r7, #4]
    59f0:	2b1f      	cmp	r3, #31
    59f2:	dd02      	ble.n	59fa <fio_getfd+0x1a>
        return NULL;
    59f4:	f04f 0300 	mov.w	r3, #0
    59f8:	e00c      	b.n	5a14 <fio_getfd+0x34>
    return fio_fds + fd;
    59fa:	687a      	ldr	r2, [r7, #4]
    59fc:	4613      	mov	r3, r2
    59fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a02:	189b      	adds	r3, r3, r2
    5a04:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a08:	461a      	mov	r2, r3
    5a0a:	f244 73c4 	movw	r3, #18372	; 0x47c4
    5a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a12:	18d3      	adds	r3, r2, r3
}
    5a14:	4618      	mov	r0, r3
    5a16:	f107 070c 	add.w	r7, r7, #12
    5a1a:	46bd      	mov	sp, r7
    5a1c:	bc80      	pop	{r7}
    5a1e:	4770      	bx	lr

00005a20 <fio_is_open_int>:

static int fio_is_open_int(int fd) {
    5a20:	b480      	push	{r7}
    5a22:	b085      	sub	sp, #20
    5a24:	af00      	add	r7, sp, #0
    5a26:	6078      	str	r0, [r7, #4]
    if ((fd < 0) || (fd >= MAX_FDS))
    5a28:	687b      	ldr	r3, [r7, #4]
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	db02      	blt.n	5a34 <fio_is_open_int+0x14>
    5a2e:	687b      	ldr	r3, [r7, #4]
    5a30:	2b1f      	cmp	r3, #31
    5a32:	dd02      	ble.n	5a3a <fio_is_open_int+0x1a>
        return 0;
    5a34:	f04f 0300 	mov.w	r3, #0
    5a38:	e059      	b.n	5aee <fio_is_open_int+0xce>
    int r = !((fio_fds[fd].fdread == NULL) &&
    5a3a:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5a3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a42:	6879      	ldr	r1, [r7, #4]
    5a44:	460b      	mov	r3, r1
    5a46:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a4a:	185b      	adds	r3, r3, r1
    5a4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a50:	18d3      	adds	r3, r2, r3
    5a52:	681b      	ldr	r3, [r3, #0]
    5a54:	2b00      	cmp	r3, #0
    5a56:	d143      	bne.n	5ae0 <fio_is_open_int+0xc0>
              (fio_fds[fd].fdwrite == NULL) &&
    5a58:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5a5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a60:	6879      	ldr	r1, [r7, #4]
    5a62:	460b      	mov	r3, r1
    5a64:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a68:	185b      	adds	r3, r3, r1
    5a6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a6e:	18d3      	adds	r3, r2, r3
    5a70:	f103 0304 	add.w	r3, r3, #4
    5a74:	681b      	ldr	r3, [r3, #0]
}

static int fio_is_open_int(int fd) {
    if ((fd < 0) || (fd >= MAX_FDS))
        return 0;
    int r = !((fio_fds[fd].fdread == NULL) &&
    5a76:	2b00      	cmp	r3, #0
    5a78:	d132      	bne.n	5ae0 <fio_is_open_int+0xc0>
              (fio_fds[fd].fdwrite == NULL) &&
              (fio_fds[fd].fdseek == NULL) &&
    5a7a:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5a7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a82:	6879      	ldr	r1, [r7, #4]
    5a84:	460b      	mov	r3, r1
    5a86:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a8a:	185b      	adds	r3, r3, r1
    5a8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a90:	18d3      	adds	r3, r2, r3
    5a92:	f103 0308 	add.w	r3, r3, #8
    5a96:	681b      	ldr	r3, [r3, #0]

static int fio_is_open_int(int fd) {
    if ((fd < 0) || (fd >= MAX_FDS))
        return 0;
    int r = !((fio_fds[fd].fdread == NULL) &&
              (fio_fds[fd].fdwrite == NULL) &&
    5a98:	2b00      	cmp	r3, #0
    5a9a:	d121      	bne.n	5ae0 <fio_is_open_int+0xc0>
              (fio_fds[fd].fdseek == NULL) &&
              (fio_fds[fd].fdclose == NULL) &&
    5a9c:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5aa0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5aa4:	6879      	ldr	r1, [r7, #4]
    5aa6:	460b      	mov	r3, r1
    5aa8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5aac:	185b      	adds	r3, r3, r1
    5aae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ab2:	18d3      	adds	r3, r2, r3
    5ab4:	f103 030c 	add.w	r3, r3, #12
    5ab8:	681b      	ldr	r3, [r3, #0]
static int fio_is_open_int(int fd) {
    if ((fd < 0) || (fd >= MAX_FDS))
        return 0;
    int r = !((fio_fds[fd].fdread == NULL) &&
              (fio_fds[fd].fdwrite == NULL) &&
              (fio_fds[fd].fdseek == NULL) &&
    5aba:	2b00      	cmp	r3, #0
    5abc:	d110      	bne.n	5ae0 <fio_is_open_int+0xc0>
              (fio_fds[fd].fdclose == NULL) &&
              (fio_fds[fd].opaque == NULL));
    5abe:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5ac2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ac6:	6879      	ldr	r1, [r7, #4]
    5ac8:	460b      	mov	r3, r1
    5aca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ace:	185b      	adds	r3, r3, r1
    5ad0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ad4:	18d3      	adds	r3, r2, r3
    5ad6:	f103 0310 	add.w	r3, r3, #16
    5ada:	681b      	ldr	r3, [r3, #0]
}

static int fio_is_open_int(int fd) {
    if ((fd < 0) || (fd >= MAX_FDS))
        return 0;
    int r = !((fio_fds[fd].fdread == NULL) &&
    5adc:	2b00      	cmp	r3, #0
    5ade:	d002      	beq.n	5ae6 <fio_is_open_int+0xc6>
    5ae0:	f04f 0301 	mov.w	r3, #1
    5ae4:	e001      	b.n	5aea <fio_is_open_int+0xca>
    5ae6:	f04f 0300 	mov.w	r3, #0
    5aea:	60fb      	str	r3, [r7, #12]
              (fio_fds[fd].fdwrite == NULL) &&
              (fio_fds[fd].fdseek == NULL) &&
              (fio_fds[fd].fdclose == NULL) &&
              (fio_fds[fd].opaque == NULL));
    return r;
    5aec:	68fb      	ldr	r3, [r7, #12]
}
    5aee:	4618      	mov	r0, r3
    5af0:	f107 0714 	add.w	r7, r7, #20
    5af4:	46bd      	mov	sp, r7
    5af6:	bc80      	pop	{r7}
    5af8:	4770      	bx	lr
    5afa:	bf00      	nop

00005afc <fio_findfd>:

static int fio_findfd() {
    5afc:	b580      	push	{r7, lr}
    5afe:	b082      	sub	sp, #8
    5b00:	af00      	add	r7, sp, #0
    int i;
    
    for (i = 0; i < MAX_FDS; i++) {
    5b02:	f04f 0300 	mov.w	r3, #0
    5b06:	607b      	str	r3, [r7, #4]
    5b08:	e00b      	b.n	5b22 <fio_findfd+0x26>
        if (!fio_is_open_int(i))
    5b0a:	6878      	ldr	r0, [r7, #4]
    5b0c:	f7ff ff88 	bl	5a20 <fio_is_open_int>
    5b10:	4603      	mov	r3, r0
    5b12:	2b00      	cmp	r3, #0
    5b14:	d101      	bne.n	5b1a <fio_findfd+0x1e>
            return i;
    5b16:	687b      	ldr	r3, [r7, #4]
    5b18:	e008      	b.n	5b2c <fio_findfd+0x30>
}

static int fio_findfd() {
    int i;
    
    for (i = 0; i < MAX_FDS; i++) {
    5b1a:	687b      	ldr	r3, [r7, #4]
    5b1c:	f103 0301 	add.w	r3, r3, #1
    5b20:	607b      	str	r3, [r7, #4]
    5b22:	687b      	ldr	r3, [r7, #4]
    5b24:	2b1f      	cmp	r3, #31
    5b26:	ddf0      	ble.n	5b0a <fio_findfd+0xe>
        if (!fio_is_open_int(i))
            return i;
    }
    
    return -1;
    5b28:	f04f 33ff 	mov.w	r3, #4294967295
}
    5b2c:	4618      	mov	r0, r3
    5b2e:	f107 0708 	add.w	r7, r7, #8
    5b32:	46bd      	mov	sp, r7
    5b34:	bd80      	pop	{r7, pc}
    5b36:	bf00      	nop

00005b38 <fio_is_open>:

int fio_is_open(int fd) {
    5b38:	b580      	push	{r7, lr}
    5b3a:	b084      	sub	sp, #16
    5b3c:	af00      	add	r7, sp, #0
    5b3e:	6078      	str	r0, [r7, #4]
    int r = 0;
    5b40:	f04f 0300 	mov.w	r3, #0
    5b44:	60fb      	str	r3, [r7, #12]
    xSemaphoreTake(fio_sem, portMAX_DELAY);
    5b46:	f644 2344 	movw	r3, #19012	; 0x4a44
    5b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b4e:	681b      	ldr	r3, [r3, #0]
    5b50:	4618      	mov	r0, r3
    5b52:	f04f 0100 	mov.w	r1, #0
    5b56:	f04f 32ff 	mov.w	r2, #4294967295
    5b5a:	f04f 0300 	mov.w	r3, #0
    5b5e:	f7fd faf9 	bl	3154 <xQueueGenericReceive>
    r = fio_is_open_int(fd);
    5b62:	6878      	ldr	r0, [r7, #4]
    5b64:	f7ff ff5c 	bl	5a20 <fio_is_open_int>
    5b68:	60f8      	str	r0, [r7, #12]
    xSemaphoreGive(fio_sem);
    5b6a:	f644 2344 	movw	r3, #19012	; 0x4a44
    5b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b72:	681b      	ldr	r3, [r3, #0]
    5b74:	4618      	mov	r0, r3
    5b76:	f04f 0100 	mov.w	r1, #0
    5b7a:	f04f 0200 	mov.w	r2, #0
    5b7e:	f04f 0300 	mov.w	r3, #0
    5b82:	f7fd fa0f 	bl	2fa4 <xQueueGenericSend>
    return r;
    5b86:	68fb      	ldr	r3, [r7, #12]
}
    5b88:	4618      	mov	r0, r3
    5b8a:	f107 0710 	add.w	r7, r7, #16
    5b8e:	46bd      	mov	sp, r7
    5b90:	bd80      	pop	{r7, pc}
    5b92:	bf00      	nop

00005b94 <fio_open>:

int fio_open(fdread_t fdread, fdwrite_t fdwrite, fdseek_t fdseek, fdclose_t fdclose, void * opaque) {
    5b94:	b580      	push	{r7, lr}
    5b96:	b086      	sub	sp, #24
    5b98:	af00      	add	r7, sp, #0
    5b9a:	60f8      	str	r0, [r7, #12]
    5b9c:	60b9      	str	r1, [r7, #8]
    5b9e:	607a      	str	r2, [r7, #4]
    5ba0:	603b      	str	r3, [r7, #0]
    int fd;
//    DBGOUT("fio_open(%p, %p, %p, %p, %p)\r\n", fdread, fdwrite, fdseek, fdclose, opaque);
    xSemaphoreTake(fio_sem, portMAX_DELAY);
    5ba2:	f644 2344 	movw	r3, #19012	; 0x4a44
    5ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5baa:	681b      	ldr	r3, [r3, #0]
    5bac:	4618      	mov	r0, r3
    5bae:	f04f 0100 	mov.w	r1, #0
    5bb2:	f04f 32ff 	mov.w	r2, #4294967295
    5bb6:	f04f 0300 	mov.w	r3, #0
    5bba:	f7fd facb 	bl	3154 <xQueueGenericReceive>
    fd = fio_findfd();
    5bbe:	f7ff ff9d 	bl	5afc <fio_findfd>
    5bc2:	6178      	str	r0, [r7, #20]
    
    if (fd >= 0) {
    5bc4:	697b      	ldr	r3, [r7, #20]
    5bc6:	2b00      	cmp	r3, #0
    5bc8:	db4d      	blt.n	5c66 <fio_open+0xd2>
        fio_fds[fd].fdread = fdread;
    5bca:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5bce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bd2:	6979      	ldr	r1, [r7, #20]
    5bd4:	460b      	mov	r3, r1
    5bd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5bda:	185b      	adds	r3, r3, r1
    5bdc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5be0:	18d3      	adds	r3, r2, r3
    5be2:	68fa      	ldr	r2, [r7, #12]
    5be4:	601a      	str	r2, [r3, #0]
        fio_fds[fd].fdwrite = fdwrite;
    5be6:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5bea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bee:	6979      	ldr	r1, [r7, #20]
    5bf0:	460b      	mov	r3, r1
    5bf2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5bf6:	185b      	adds	r3, r3, r1
    5bf8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5bfc:	18d3      	adds	r3, r2, r3
    5bfe:	f103 0304 	add.w	r3, r3, #4
    5c02:	68ba      	ldr	r2, [r7, #8]
    5c04:	601a      	str	r2, [r3, #0]
        fio_fds[fd].fdseek = fdseek;
    5c06:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5c0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c0e:	6979      	ldr	r1, [r7, #20]
    5c10:	460b      	mov	r3, r1
    5c12:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c16:	185b      	adds	r3, r3, r1
    5c18:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c1c:	18d3      	adds	r3, r2, r3
    5c1e:	f103 0308 	add.w	r3, r3, #8
    5c22:	687a      	ldr	r2, [r7, #4]
    5c24:	601a      	str	r2, [r3, #0]
        fio_fds[fd].fdclose = fdclose;
    5c26:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5c2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c2e:	6979      	ldr	r1, [r7, #20]
    5c30:	460b      	mov	r3, r1
    5c32:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c36:	185b      	adds	r3, r3, r1
    5c38:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c3c:	18d3      	adds	r3, r2, r3
    5c3e:	f103 030c 	add.w	r3, r3, #12
    5c42:	683a      	ldr	r2, [r7, #0]
    5c44:	601a      	str	r2, [r3, #0]
        fio_fds[fd].opaque = opaque;
    5c46:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5c4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c4e:	6979      	ldr	r1, [r7, #20]
    5c50:	460b      	mov	r3, r1
    5c52:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c56:	185b      	adds	r3, r3, r1
    5c58:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c5c:	18d3      	adds	r3, r2, r3
    5c5e:	f103 0310 	add.w	r3, r3, #16
    5c62:	6a3a      	ldr	r2, [r7, #32]
    5c64:	601a      	str	r2, [r3, #0]
    }
    xSemaphoreGive(fio_sem);
    5c66:	f644 2344 	movw	r3, #19012	; 0x4a44
    5c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c6e:	681b      	ldr	r3, [r3, #0]
    5c70:	4618      	mov	r0, r3
    5c72:	f04f 0100 	mov.w	r1, #0
    5c76:	f04f 0200 	mov.w	r2, #0
    5c7a:	f04f 0300 	mov.w	r3, #0
    5c7e:	f7fd f991 	bl	2fa4 <xQueueGenericSend>
    
    return fd;
    5c82:	697b      	ldr	r3, [r7, #20]
}
    5c84:	4618      	mov	r0, r3
    5c86:	f107 0718 	add.w	r7, r7, #24
    5c8a:	46bd      	mov	sp, r7
    5c8c:	bd80      	pop	{r7, pc}
    5c8e:	bf00      	nop

00005c90 <fio_read>:

ssize_t fio_read(int fd, void * buf, size_t count) {
    5c90:	b590      	push	{r4, r7, lr}
    5c92:	b087      	sub	sp, #28
    5c94:	af00      	add	r7, sp, #0
    5c96:	60f8      	str	r0, [r7, #12]
    5c98:	60b9      	str	r1, [r7, #8]
    5c9a:	607a      	str	r2, [r7, #4]
    ssize_t r = 0;
    5c9c:	f04f 0300 	mov.w	r3, #0
    5ca0:	617b      	str	r3, [r7, #20]
//    DBGOUT("fio_read(%i, %p, %i)\r\n", fd, buf, count);
    if (fio_is_open_int(fd)) {
    5ca2:	68f8      	ldr	r0, [r7, #12]
    5ca4:	f7ff febc 	bl	5a20 <fio_is_open_int>
    5ca8:	4603      	mov	r3, r0
    5caa:	2b00      	cmp	r3, #0
    5cac:	d034      	beq.n	5d18 <fio_read+0x88>
        if (fio_fds[fd].fdread) {
    5cae:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5cb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5cb6:	68f9      	ldr	r1, [r7, #12]
    5cb8:	460b      	mov	r3, r1
    5cba:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5cbe:	185b      	adds	r3, r3, r1
    5cc0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5cc4:	18d3      	adds	r3, r2, r3
    5cc6:	681b      	ldr	r3, [r3, #0]
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d021      	beq.n	5d10 <fio_read+0x80>
            r = fio_fds[fd].fdread(fio_fds[fd].opaque, buf, count);
    5ccc:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5cd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5cd4:	68f9      	ldr	r1, [r7, #12]
    5cd6:	460b      	mov	r3, r1
    5cd8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5cdc:	185b      	adds	r3, r3, r1
    5cde:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ce2:	18d3      	adds	r3, r2, r3
    5ce4:	681c      	ldr	r4, [r3, #0]
    5ce6:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5cea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5cee:	68f9      	ldr	r1, [r7, #12]
    5cf0:	460b      	mov	r3, r1
    5cf2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5cf6:	185b      	adds	r3, r3, r1
    5cf8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5cfc:	18d3      	adds	r3, r2, r3
    5cfe:	f103 0310 	add.w	r3, r3, #16
    5d02:	681b      	ldr	r3, [r3, #0]
    5d04:	4618      	mov	r0, r3
    5d06:	68b9      	ldr	r1, [r7, #8]
    5d08:	687a      	ldr	r2, [r7, #4]
    5d0a:	47a0      	blx	r4
    5d0c:	6178      	str	r0, [r7, #20]
    5d0e:	e006      	b.n	5d1e <fio_read+0x8e>
        } else {
            r = -3;
    5d10:	f06f 0302 	mvn.w	r3, #2
    5d14:	617b      	str	r3, [r7, #20]
    5d16:	e002      	b.n	5d1e <fio_read+0x8e>
        }
    } else {
        r = -2;
    5d18:	f06f 0301 	mvn.w	r3, #1
    5d1c:	617b      	str	r3, [r7, #20]
    }
    return r;
    5d1e:	697b      	ldr	r3, [r7, #20]
}
    5d20:	4618      	mov	r0, r3
    5d22:	f107 071c 	add.w	r7, r7, #28
    5d26:	46bd      	mov	sp, r7
    5d28:	bd90      	pop	{r4, r7, pc}
    5d2a:	bf00      	nop

00005d2c <fio_write>:

ssize_t fio_write(int fd, const void * buf, size_t count) {
    5d2c:	b590      	push	{r4, r7, lr}
    5d2e:	b087      	sub	sp, #28
    5d30:	af00      	add	r7, sp, #0
    5d32:	60f8      	str	r0, [r7, #12]
    5d34:	60b9      	str	r1, [r7, #8]
    5d36:	607a      	str	r2, [r7, #4]
    ssize_t r = 0;
    5d38:	f04f 0300 	mov.w	r3, #0
    5d3c:	617b      	str	r3, [r7, #20]
//    DBGOUT("fio_write(%i, %p, %i)\r\n", fd, buf, count);
    if (fio_is_open_int(fd)) {
    5d3e:	68f8      	ldr	r0, [r7, #12]
    5d40:	f7ff fe6e 	bl	5a20 <fio_is_open_int>
    5d44:	4603      	mov	r3, r0
    5d46:	2b00      	cmp	r3, #0
    5d48:	d038      	beq.n	5dbc <fio_write+0x90>
        if (fio_fds[fd].fdwrite) {
    5d4a:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5d4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5d52:	68f9      	ldr	r1, [r7, #12]
    5d54:	460b      	mov	r3, r1
    5d56:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d5a:	185b      	adds	r3, r3, r1
    5d5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d60:	18d3      	adds	r3, r2, r3
    5d62:	f103 0304 	add.w	r3, r3, #4
    5d66:	681b      	ldr	r3, [r3, #0]
    5d68:	2b00      	cmp	r3, #0
    5d6a:	d023      	beq.n	5db4 <fio_write+0x88>
            r = fio_fds[fd].fdwrite(fio_fds[fd].opaque, buf, count);
    5d6c:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5d70:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5d74:	68f9      	ldr	r1, [r7, #12]
    5d76:	460b      	mov	r3, r1
    5d78:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d7c:	185b      	adds	r3, r3, r1
    5d7e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d82:	18d3      	adds	r3, r2, r3
    5d84:	f103 0304 	add.w	r3, r3, #4
    5d88:	681c      	ldr	r4, [r3, #0]
    5d8a:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5d8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5d92:	68f9      	ldr	r1, [r7, #12]
    5d94:	460b      	mov	r3, r1
    5d96:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d9a:	185b      	adds	r3, r3, r1
    5d9c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5da0:	18d3      	adds	r3, r2, r3
    5da2:	f103 0310 	add.w	r3, r3, #16
    5da6:	681b      	ldr	r3, [r3, #0]
    5da8:	4618      	mov	r0, r3
    5daa:	68b9      	ldr	r1, [r7, #8]
    5dac:	687a      	ldr	r2, [r7, #4]
    5dae:	47a0      	blx	r4
    5db0:	6178      	str	r0, [r7, #20]
    5db2:	e006      	b.n	5dc2 <fio_write+0x96>
        } else {
            r = -3;
    5db4:	f06f 0302 	mvn.w	r3, #2
    5db8:	617b      	str	r3, [r7, #20]
    5dba:	e002      	b.n	5dc2 <fio_write+0x96>
        }
    } else {
        r = -2;
    5dbc:	f06f 0301 	mvn.w	r3, #1
    5dc0:	617b      	str	r3, [r7, #20]
    }
    return r;
    5dc2:	697b      	ldr	r3, [r7, #20]
}
    5dc4:	4618      	mov	r0, r3
    5dc6:	f107 071c 	add.w	r7, r7, #28
    5dca:	46bd      	mov	sp, r7
    5dcc:	bd90      	pop	{r4, r7, pc}
    5dce:	bf00      	nop

00005dd0 <fio_seek>:

off_t fio_seek(int fd, off_t offset, int whence) {
    5dd0:	b590      	push	{r4, r7, lr}
    5dd2:	b087      	sub	sp, #28
    5dd4:	af00      	add	r7, sp, #0
    5dd6:	60f8      	str	r0, [r7, #12]
    5dd8:	60b9      	str	r1, [r7, #8]
    5dda:	607a      	str	r2, [r7, #4]
    off_t r = 0;
    5ddc:	f04f 0300 	mov.w	r3, #0
    5de0:	617b      	str	r3, [r7, #20]
//    DBGOUT("fio_seek(%i, %i, %i)\r\n", fd, offset, whence);
    if (fio_is_open_int(fd)) {
    5de2:	68f8      	ldr	r0, [r7, #12]
    5de4:	f7ff fe1c 	bl	5a20 <fio_is_open_int>
    5de8:	4603      	mov	r3, r0
    5dea:	2b00      	cmp	r3, #0
    5dec:	d038      	beq.n	5e60 <fio_seek+0x90>
        if (fio_fds[fd].fdseek) {
    5dee:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5df2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5df6:	68f9      	ldr	r1, [r7, #12]
    5df8:	460b      	mov	r3, r1
    5dfa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5dfe:	185b      	adds	r3, r3, r1
    5e00:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e04:	18d3      	adds	r3, r2, r3
    5e06:	f103 0308 	add.w	r3, r3, #8
    5e0a:	681b      	ldr	r3, [r3, #0]
    5e0c:	2b00      	cmp	r3, #0
    5e0e:	d023      	beq.n	5e58 <fio_seek+0x88>
            r = fio_fds[fd].fdseek(fio_fds[fd].opaque, offset, whence);
    5e10:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5e14:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5e18:	68f9      	ldr	r1, [r7, #12]
    5e1a:	460b      	mov	r3, r1
    5e1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e20:	185b      	adds	r3, r3, r1
    5e22:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e26:	18d3      	adds	r3, r2, r3
    5e28:	f103 0308 	add.w	r3, r3, #8
    5e2c:	681c      	ldr	r4, [r3, #0]
    5e2e:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5e32:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5e36:	68f9      	ldr	r1, [r7, #12]
    5e38:	460b      	mov	r3, r1
    5e3a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e3e:	185b      	adds	r3, r3, r1
    5e40:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e44:	18d3      	adds	r3, r2, r3
    5e46:	f103 0310 	add.w	r3, r3, #16
    5e4a:	681b      	ldr	r3, [r3, #0]
    5e4c:	4618      	mov	r0, r3
    5e4e:	68b9      	ldr	r1, [r7, #8]
    5e50:	687a      	ldr	r2, [r7, #4]
    5e52:	47a0      	blx	r4
    5e54:	6178      	str	r0, [r7, #20]
    5e56:	e006      	b.n	5e66 <fio_seek+0x96>
        } else {
            r = -3;
    5e58:	f06f 0302 	mvn.w	r3, #2
    5e5c:	617b      	str	r3, [r7, #20]
    5e5e:	e002      	b.n	5e66 <fio_seek+0x96>
        }
    } else {
        r = -2;
    5e60:	f06f 0301 	mvn.w	r3, #1
    5e64:	617b      	str	r3, [r7, #20]
    }
    return r;
    5e66:	697b      	ldr	r3, [r7, #20]
}
    5e68:	4618      	mov	r0, r3
    5e6a:	f107 071c 	add.w	r7, r7, #28
    5e6e:	46bd      	mov	sp, r7
    5e70:	bd90      	pop	{r4, r7, pc}
    5e72:	bf00      	nop

00005e74 <fio_close>:

int fio_close(int fd) {
    5e74:	b590      	push	{r4, r7, lr}
    5e76:	b085      	sub	sp, #20
    5e78:	af00      	add	r7, sp, #0
    5e7a:	6078      	str	r0, [r7, #4]
    int r = 0;
    5e7c:	f04f 0300 	mov.w	r3, #0
    5e80:	60fb      	str	r3, [r7, #12]
//    DBGOUT("fio_close(%i)\r\n", fd);
    if (fio_is_open_int(fd)) {
    5e82:	6878      	ldr	r0, [r7, #4]
    5e84:	f7ff fdcc 	bl	5a20 <fio_is_open_int>
    5e88:	4603      	mov	r3, r0
    5e8a:	2b00      	cmp	r3, #0
    5e8c:	d062      	beq.n	5f54 <fio_close+0xe0>
        if (fio_fds[fd].fdclose)
    5e8e:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5e92:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5e96:	6879      	ldr	r1, [r7, #4]
    5e98:	460b      	mov	r3, r1
    5e9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e9e:	185b      	adds	r3, r3, r1
    5ea0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ea4:	18d3      	adds	r3, r2, r3
    5ea6:	f103 030c 	add.w	r3, r3, #12
    5eaa:	681b      	ldr	r3, [r3, #0]
    5eac:	2b00      	cmp	r3, #0
    5eae:	d020      	beq.n	5ef2 <fio_close+0x7e>
            r = fio_fds[fd].fdclose(fio_fds[fd].opaque);
    5eb0:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5eb4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5eb8:	6879      	ldr	r1, [r7, #4]
    5eba:	460b      	mov	r3, r1
    5ebc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ec0:	185b      	adds	r3, r3, r1
    5ec2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ec6:	18d3      	adds	r3, r2, r3
    5ec8:	f103 030c 	add.w	r3, r3, #12
    5ecc:	681c      	ldr	r4, [r3, #0]
    5ece:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5ed2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ed6:	6879      	ldr	r1, [r7, #4]
    5ed8:	460b      	mov	r3, r1
    5eda:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ede:	185b      	adds	r3, r3, r1
    5ee0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ee4:	18d3      	adds	r3, r2, r3
    5ee6:	f103 0310 	add.w	r3, r3, #16
    5eea:	681b      	ldr	r3, [r3, #0]
    5eec:	4618      	mov	r0, r3
    5eee:	47a0      	blx	r4
    5ef0:	60f8      	str	r0, [r7, #12]
        xSemaphoreTake(fio_sem, portMAX_DELAY);
    5ef2:	f644 2344 	movw	r3, #19012	; 0x4a44
    5ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5efa:	681b      	ldr	r3, [r3, #0]
    5efc:	4618      	mov	r0, r3
    5efe:	f04f 0100 	mov.w	r1, #0
    5f02:	f04f 32ff 	mov.w	r2, #4294967295
    5f06:	f04f 0300 	mov.w	r3, #0
    5f0a:	f7fd f923 	bl	3154 <xQueueGenericReceive>
        memset(fio_fds + fd, 0, sizeof(struct fddef_t));
    5f0e:	687a      	ldr	r2, [r7, #4]
    5f10:	4613      	mov	r3, r2
    5f12:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f16:	189b      	adds	r3, r3, r2
    5f18:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f1c:	461a      	mov	r2, r3
    5f1e:	f244 73c4 	movw	r3, #18372	; 0x47c4
    5f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f26:	18d3      	adds	r3, r2, r3
    5f28:	4618      	mov	r0, r3
    5f2a:	f04f 0100 	mov.w	r1, #0
    5f2e:	f04f 0214 	mov.w	r2, #20
    5f32:	f000 fa39 	bl	63a8 <memset>
        xSemaphoreGive(fio_sem);
    5f36:	f644 2344 	movw	r3, #19012	; 0x4a44
    5f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f3e:	681b      	ldr	r3, [r3, #0]
    5f40:	4618      	mov	r0, r3
    5f42:	f04f 0100 	mov.w	r1, #0
    5f46:	f04f 0200 	mov.w	r2, #0
    5f4a:	f04f 0300 	mov.w	r3, #0
    5f4e:	f7fd f829 	bl	2fa4 <xQueueGenericSend>
    5f52:	e002      	b.n	5f5a <fio_close+0xe6>
    } else {
        r = -2;
    5f54:	f06f 0301 	mvn.w	r3, #1
    5f58:	60fb      	str	r3, [r7, #12]
    }
    return r;
    5f5a:	68fb      	ldr	r3, [r7, #12]
}
    5f5c:	4618      	mov	r0, r3
    5f5e:	f107 0714 	add.w	r7, r7, #20
    5f62:	46bd      	mov	sp, r7
    5f64:	bd90      	pop	{r4, r7, pc}
    5f66:	bf00      	nop

00005f68 <fio_set_opaque>:

void fio_set_opaque(int fd, void * opaque) {
    5f68:	b580      	push	{r7, lr}
    5f6a:	b082      	sub	sp, #8
    5f6c:	af00      	add	r7, sp, #0
    5f6e:	6078      	str	r0, [r7, #4]
    5f70:	6039      	str	r1, [r7, #0]
    if (fio_is_open_int(fd))
    5f72:	6878      	ldr	r0, [r7, #4]
    5f74:	f7ff fd54 	bl	5a20 <fio_is_open_int>
    5f78:	4603      	mov	r3, r0
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	d00f      	beq.n	5f9e <fio_set_opaque+0x36>
        fio_fds[fd].opaque = opaque;
    5f7e:	f244 72c4 	movw	r2, #18372	; 0x47c4
    5f82:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5f86:	6879      	ldr	r1, [r7, #4]
    5f88:	460b      	mov	r3, r1
    5f8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f8e:	185b      	adds	r3, r3, r1
    5f90:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f94:	18d3      	adds	r3, r2, r3
    5f96:	f103 0310 	add.w	r3, r3, #16
    5f9a:	683a      	ldr	r2, [r7, #0]
    5f9c:	601a      	str	r2, [r3, #0]
}
    5f9e:	f107 0708 	add.w	r7, r7, #8
    5fa2:	46bd      	mov	sp, r7
    5fa4:	bd80      	pop	{r7, pc}
    5fa6:	bf00      	nop

00005fa8 <devfs_open>:

#define stdin_hash 0x0BA00421
#define stdout_hash 0x7FA08308
#define stderr_hash 0x7FA058A3

static int devfs_open(void * opaque, const char * path, int flags, int mode) {
    5fa8:	b580      	push	{r7, lr}
    5faa:	b088      	sub	sp, #32
    5fac:	af02      	add	r7, sp, #8
    5fae:	60f8      	str	r0, [r7, #12]
    5fb0:	60b9      	str	r1, [r7, #8]
    5fb2:	607a      	str	r2, [r7, #4]
    5fb4:	603b      	str	r3, [r7, #0]
    uint32_t h = hash_djb2((const uint8_t *) path, -1);
    5fb6:	68b8      	ldr	r0, [r7, #8]
    5fb8:	f04f 31ff 	mov.w	r1, #4294967295
    5fbc:	f7ff fb80 	bl	56c0 <hash_djb2>
    5fc0:	6178      	str	r0, [r7, #20]
//    DBGOUT("devfs_open(%p, \"%s\", %i, %i)\r\n", opaque, path, flags, mode);
    switch (h) {
    5fc2:	697a      	ldr	r2, [r7, #20]
    5fc4:	f645 03a3 	movw	r3, #22691	; 0x58a3
    5fc8:	f6c7 73a0 	movt	r3, #32672	; 0x7fa0
    5fcc:	429a      	cmp	r2, r3
    5fce:	d035      	beq.n	603c <devfs_open+0x94>
    5fd0:	f248 3308 	movw	r3, #33544	; 0x8308
    5fd4:	f6c7 73a0 	movt	r3, #32672	; 0x7fa0
    5fd8:	429a      	cmp	r2, r3
    5fda:	d01e      	beq.n	601a <devfs_open+0x72>
    5fdc:	f240 4321 	movw	r3, #1057	; 0x421
    5fe0:	f6c0 33a0 	movt	r3, #2976	; 0xba0
    5fe4:	429a      	cmp	r2, r3
    5fe6:	d13a      	bne.n	605e <devfs_open+0xb6>
    case stdin_hash:
        if (flags & (O_WRONLY | O_RDWR))
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	f003 0303 	and.w	r3, r3, #3
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d002      	beq.n	5ff8 <devfs_open+0x50>
            return -1;
    5ff2:	f04f 33ff 	mov.w	r3, #4294967295
    5ff6:	e034      	b.n	6062 <devfs_open+0xba>
        return fio_open(stdin_read, NULL, NULL, NULL, NULL);
    5ff8:	f04f 0300 	mov.w	r3, #0
    5ffc:	9300      	str	r3, [sp, #0]
    5ffe:	f645 00f5 	movw	r0, #22773	; 0x58f5
    6002:	f2c0 0000 	movt	r0, #0
    6006:	f04f 0100 	mov.w	r1, #0
    600a:	f04f 0200 	mov.w	r2, #0
    600e:	f04f 0300 	mov.w	r3, #0
    6012:	f7ff fdbf 	bl	5b94 <fio_open>
    6016:	4603      	mov	r3, r0
    6018:	e023      	b.n	6062 <devfs_open+0xba>
        break;
    case stdout_hash:
        if (flags & O_RDONLY)
            return -1;
        return fio_open(NULL, stdout_write, NULL, NULL, NULL);
    601a:	f04f 0300 	mov.w	r3, #0
    601e:	9300      	str	r3, [sp, #0]
    6020:	f04f 0000 	mov.w	r0, #0
    6024:	f645 1139 	movw	r1, #22841	; 0x5939
    6028:	f2c0 0100 	movt	r1, #0
    602c:	f04f 0200 	mov.w	r2, #0
    6030:	f04f 0300 	mov.w	r3, #0
    6034:	f7ff fdae 	bl	5b94 <fio_open>
    6038:	4603      	mov	r3, r0
    603a:	e012      	b.n	6062 <devfs_open+0xba>
        break;
    case stderr_hash:
        if (flags & O_RDONLY)
            return -1;
        return fio_open(NULL, stdout_write, NULL, NULL, NULL);
    603c:	f04f 0300 	mov.w	r3, #0
    6040:	9300      	str	r3, [sp, #0]
    6042:	f04f 0000 	mov.w	r0, #0
    6046:	f645 1139 	movw	r1, #22841	; 0x5939
    604a:	f2c0 0100 	movt	r1, #0
    604e:	f04f 0200 	mov.w	r2, #0
    6052:	f04f 0300 	mov.w	r3, #0
    6056:	f7ff fd9d 	bl	5b94 <fio_open>
    605a:	4603      	mov	r3, r0
    605c:	e001      	b.n	6062 <devfs_open+0xba>
        break;
    }
    return -1;
    605e:	f04f 33ff 	mov.w	r3, #4294967295
}
    6062:	4618      	mov	r0, r3
    6064:	f107 0718 	add.w	r7, r7, #24
    6068:	46bd      	mov	sp, r7
    606a:	bd80      	pop	{r7, pc}

0000606c <register_devfs>:

void register_devfs() {
    606c:	b580      	push	{r7, lr}
    606e:	af00      	add	r7, sp, #0
    DBGOUT("Registering devfs.\r\n");
    6070:	f646 30d0 	movw	r0, #27600	; 0x6bd0
    6074:	f2c0 0000 	movt	r0, #0
    6078:	f000 f98e 	bl	6398 <osDbgPrintf>
    register_fs("dev", devfs_open, NULL);
    607c:	f646 30e8 	movw	r0, #27624	; 0x6be8
    6080:	f2c0 0000 	movt	r0, #0
    6084:	f645 71a9 	movw	r1, #24489	; 0x5fa9
    6088:	f2c0 0100 	movt	r1, #0
    608c:	f04f 0200 	mov.w	r2, #0
    6090:	f7ff fb5a 	bl	5748 <register_fs>
}
    6094:	bd80      	pop	{r7, pc}
    6096:	bf00      	nop

00006098 <puts>:


int puts(const char* msg)
{   
    6098:	b580      	push	{r7, lr}
    609a:	b082      	sub	sp, #8
    609c:	af00      	add	r7, sp, #0
    609e:	6078      	str	r0, [r7, #4]
    for(; *msg; msg++)
    60a0:	e00c      	b.n	60bc <puts+0x24>
    serial.putch(*msg);
    60a2:	f240 0330 	movw	r3, #48	; 0x30
    60a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60aa:	685b      	ldr	r3, [r3, #4]
    60ac:	687a      	ldr	r2, [r7, #4]
    60ae:	7812      	ldrb	r2, [r2, #0]
    60b0:	4610      	mov	r0, r2
    60b2:	4798      	blx	r3
}


int puts(const char* msg)
{   
    for(; *msg; msg++)
    60b4:	687b      	ldr	r3, [r7, #4]
    60b6:	f103 0301 	add.w	r3, r3, #1
    60ba:	607b      	str	r3, [r7, #4]
    60bc:	687b      	ldr	r3, [r7, #4]
    60be:	781b      	ldrb	r3, [r3, #0]
    60c0:	2b00      	cmp	r3, #0
    60c2:	d1ee      	bne.n	60a2 <puts+0xa>
    serial.putch(*msg);

    return 1;
    60c4:	f04f 0301 	mov.w	r3, #1
}
    60c8:	4618      	mov	r0, r3
    60ca:	f107 0708 	add.w	r7, r7, #8
    60ce:	46bd      	mov	sp, r7
    60d0:	bd80      	pop	{r7, pc}
    60d2:	bf00      	nop

000060d4 <sprintf>:

int sprintf(char *dst, const char *fmt, ...)
{
    60d4:	b40e      	push	{r1, r2, r3}
    60d6:	b580      	push	{r7, lr}
    60d8:	b087      	sub	sp, #28
    60da:	af00      	add	r7, sp, #0
    60dc:	6078      	str	r0, [r7, #4]
  union {
    int i;
    const char *s;
    unsigned u;
  } argv;
  char *p = dst;
    60de:	687b      	ldr	r3, [r7, #4]
    60e0:	617b      	str	r3, [r7, #20]
  va_list arg_list;

  va_start(arg_list, fmt);
    60e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
    60e6:	60fb      	str	r3, [r7, #12]
  for (; *fmt; ++fmt) {
    60e8:	e098      	b.n	621c <sprintf+0x148>
    if (*fmt == '%') {
    60ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60ec:	781b      	ldrb	r3, [r3, #0]
    60ee:	2b25      	cmp	r3, #37	; 0x25
    60f0:	f040 8088 	bne.w	6204 <sprintf+0x130>
      switch (*++fmt) {
    60f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60f6:	f103 0301 	add.w	r3, r3, #1
    60fa:	627b      	str	r3, [r7, #36]	; 0x24
    60fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60fe:	781b      	ldrb	r3, [r3, #0]
    6100:	2b69      	cmp	r3, #105	; 0x69
    6102:	d02c      	beq.n	615e <sprintf+0x8a>
    6104:	2b69      	cmp	r3, #105	; 0x69
    6106:	dc0b      	bgt.n	6120 <sprintf+0x4c>
    6108:	2b63      	cmp	r3, #99	; 0x63
    610a:	d019      	beq.n	6140 <sprintf+0x6c>
    610c:	2b63      	cmp	r3, #99	; 0x63
    610e:	dc04      	bgt.n	611a <sprintf+0x46>
    6110:	2b25      	cmp	r3, #37	; 0x25
    6112:	d00c      	beq.n	612e <sprintf+0x5a>
    6114:	2b58      	cmp	r3, #88	; 0x58
    6116:	d060      	beq.n	61da <sprintf+0x106>
    6118:	e07c      	b.n	6214 <sprintf+0x140>
    611a:	2b64      	cmp	r3, #100	; 0x64
    611c:	d01f      	beq.n	615e <sprintf+0x8a>
    611e:	e079      	b.n	6214 <sprintf+0x140>
    6120:	2b75      	cmp	r3, #117	; 0x75
    6122:	d031      	beq.n	6188 <sprintf+0xb4>
    6124:	2b78      	cmp	r3, #120	; 0x78
    6126:	d058      	beq.n	61da <sprintf+0x106>
    6128:	2b73      	cmp	r3, #115	; 0x73
    612a:	d042      	beq.n	61b2 <sprintf+0xde>
    612c:	e072      	b.n	6214 <sprintf+0x140>
        case '%':
          *p++ = '%';
    612e:	697b      	ldr	r3, [r7, #20]
    6130:	f04f 0225 	mov.w	r2, #37	; 0x25
    6134:	701a      	strb	r2, [r3, #0]
    6136:	697b      	ldr	r3, [r7, #20]
    6138:	f103 0301 	add.w	r3, r3, #1
    613c:	617b      	str	r3, [r7, #20]
        break;
    613e:	e069      	b.n	6214 <sprintf+0x140>
        case 'c':
          argv.i = va_arg(arg_list, int);
    6140:	68fb      	ldr	r3, [r7, #12]
    6142:	f103 0204 	add.w	r2, r3, #4
    6146:	60fa      	str	r2, [r7, #12]
    6148:	681b      	ldr	r3, [r3, #0]
    614a:	613b      	str	r3, [r7, #16]
          *p++ = (char)argv.i;
    614c:	693b      	ldr	r3, [r7, #16]
    614e:	b2da      	uxtb	r2, r3
    6150:	697b      	ldr	r3, [r7, #20]
    6152:	701a      	strb	r2, [r3, #0]
    6154:	697b      	ldr	r3, [r7, #20]
    6156:	f103 0301 	add.w	r3, r3, #1
    615a:	617b      	str	r3, [r7, #20]
        break;
    615c:	e05a      	b.n	6214 <sprintf+0x140>
        case 'd':
        case 'i':
          argv.i = va_arg(arg_list, int);
    615e:	68fb      	ldr	r3, [r7, #12]
    6160:	f103 0204 	add.w	r2, r3, #4
    6164:	60fa      	str	r2, [r7, #12]
    6166:	681b      	ldr	r3, [r3, #0]
    6168:	613b      	str	r3, [r7, #16]
          itoa(argv.i, p, 10);
    616a:	693b      	ldr	r3, [r7, #16]
    616c:	4618      	mov	r0, r3
    616e:	6979      	ldr	r1, [r7, #20]
    6170:	f04f 020a 	mov.w	r2, #10
    6174:	f7ff f868 	bl	5248 <itoa>
          p += strlen(p);
    6178:	6978      	ldr	r0, [r7, #20]
    617a:	f000 fadb 	bl	6734 <strlen>
    617e:	4603      	mov	r3, r0
    6180:	697a      	ldr	r2, [r7, #20]
    6182:	18d3      	adds	r3, r2, r3
    6184:	617b      	str	r3, [r7, #20]
        break;
    6186:	e045      	b.n	6214 <sprintf+0x140>
        case 'u':
          argv.u = va_arg(arg_list, unsigned);
    6188:	68fb      	ldr	r3, [r7, #12]
    618a:	f103 0204 	add.w	r2, r3, #4
    618e:	60fa      	str	r2, [r7, #12]
    6190:	681b      	ldr	r3, [r3, #0]
    6192:	613b      	str	r3, [r7, #16]
          utoa(argv.u, p, 10);
    6194:	693b      	ldr	r3, [r7, #16]
    6196:	4618      	mov	r0, r3
    6198:	6979      	ldr	r1, [r7, #20]
    619a:	f04f 020a 	mov.w	r2, #10
    619e:	f7fe ffe7 	bl	5170 <utoa>
          p += strlen(p);
    61a2:	6978      	ldr	r0, [r7, #20]
    61a4:	f000 fac6 	bl	6734 <strlen>
    61a8:	4603      	mov	r3, r0
    61aa:	697a      	ldr	r2, [r7, #20]
    61ac:	18d3      	adds	r3, r2, r3
    61ae:	617b      	str	r3, [r7, #20]
        break;
    61b0:	e030      	b.n	6214 <sprintf+0x140>
        case 's':
          argv.s = va_arg(arg_list, const char *);
    61b2:	68fb      	ldr	r3, [r7, #12]
    61b4:	f103 0204 	add.w	r2, r3, #4
    61b8:	60fa      	str	r2, [r7, #12]
    61ba:	681b      	ldr	r3, [r3, #0]
    61bc:	613b      	str	r3, [r7, #16]
          strcpy(p, argv.s);
    61be:	693b      	ldr	r3, [r7, #16]
    61c0:	6978      	ldr	r0, [r7, #20]
    61c2:	4619      	mov	r1, r3
    61c4:	f000 fa4e 	bl	6664 <strcpy>
          p += strlen(p);
    61c8:	6978      	ldr	r0, [r7, #20]
    61ca:	f000 fab3 	bl	6734 <strlen>
    61ce:	4603      	mov	r3, r0
    61d0:	697a      	ldr	r2, [r7, #20]
    61d2:	18d3      	adds	r3, r2, r3
    61d4:	617b      	str	r3, [r7, #20]
        break;
    61d6:	bf00      	nop
    61d8:	e01c      	b.n	6214 <sprintf+0x140>
        case 'x':
        case 'X':
          argv.u = va_arg(arg_list, unsigned);
    61da:	68fb      	ldr	r3, [r7, #12]
    61dc:	f103 0204 	add.w	r2, r3, #4
    61e0:	60fa      	str	r2, [r7, #12]
    61e2:	681b      	ldr	r3, [r3, #0]
    61e4:	613b      	str	r3, [r7, #16]
          utoa(argv.u, p, 16);
    61e6:	693b      	ldr	r3, [r7, #16]
    61e8:	4618      	mov	r0, r3
    61ea:	6979      	ldr	r1, [r7, #20]
    61ec:	f04f 0210 	mov.w	r2, #16
    61f0:	f7fe ffbe 	bl	5170 <utoa>
          p += strlen(p);
    61f4:	6978      	ldr	r0, [r7, #20]
    61f6:	f000 fa9d 	bl	6734 <strlen>
    61fa:	4603      	mov	r3, r0
    61fc:	697a      	ldr	r2, [r7, #20]
    61fe:	18d3      	adds	r3, r2, r3
    6200:	617b      	str	r3, [r7, #20]
        break;
    6202:	e007      	b.n	6214 <sprintf+0x140>
      }
    }
    else
      *p++ = *fmt;
    6204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6206:	781a      	ldrb	r2, [r3, #0]
    6208:	697b      	ldr	r3, [r7, #20]
    620a:	701a      	strb	r2, [r3, #0]
    620c:	697b      	ldr	r3, [r7, #20]
    620e:	f103 0301 	add.w	r3, r3, #1
    6212:	617b      	str	r3, [r7, #20]
  } argv;
  char *p = dst;
  va_list arg_list;

  va_start(arg_list, fmt);
  for (; *fmt; ++fmt) {
    6214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6216:	f103 0301 	add.w	r3, r3, #1
    621a:	627b      	str	r3, [r7, #36]	; 0x24
    621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    621e:	781b      	ldrb	r3, [r3, #0]
    6220:	2b00      	cmp	r3, #0
    6222:	f47f af62 	bne.w	60ea <sprintf+0x16>
    }
    else
      *p++ = *fmt;
  }
  va_end(arg_list);
  *p = '\0';
    6226:	697b      	ldr	r3, [r7, #20]
    6228:	f04f 0200 	mov.w	r2, #0
    622c:	701a      	strb	r2, [r3, #0]

  return p - dst;
    622e:	697a      	ldr	r2, [r7, #20]
    6230:	687b      	ldr	r3, [r7, #4]
    6232:	1ad3      	subs	r3, r2, r3
}
    6234:	4618      	mov	r0, r3
    6236:	f107 071c 	add.w	r7, r7, #28
    623a:	46bd      	mov	sp, r7
    623c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    6240:	b003      	add	sp, #12
    6242:	4770      	bx	lr

00006244 <printf>:
 
int printf(const char *fmt, ...)
{
    6244:	b40f      	push	{r0, r1, r2, r3}
    6246:	b580      	push	{r7, lr}
    6248:	b084      	sub	sp, #16
    624a:	af00      	add	r7, sp, #0
        const char *s;
        unsigned u;
    } argv;
    va_list arg_list;
    
    va_start(arg_list, fmt);
    624c:	f107 031c 	add.w	r3, r7, #28
    6250:	603b      	str	r3, [r7, #0]
    for (; *fmt; ++fmt) {
    6252:	e092      	b.n	637a <printf+0x136>
        if (*fmt == '%') {
    6254:	69bb      	ldr	r3, [r7, #24]
    6256:	781b      	ldrb	r3, [r3, #0]
    6258:	2b25      	cmp	r3, #37	; 0x25
    625a:	f040 8081 	bne.w	6360 <printf+0x11c>
            switch (*++fmt) {
    625e:	69bb      	ldr	r3, [r7, #24]
    6260:	f103 0301 	add.w	r3, r3, #1
    6264:	61bb      	str	r3, [r7, #24]
    6266:	69bb      	ldr	r3, [r7, #24]
    6268:	781b      	ldrb	r3, [r3, #0]
    626a:	2b69      	cmp	r3, #105	; 0x69
    626c:	d02d      	beq.n	62ca <printf+0x86>
    626e:	2b69      	cmp	r3, #105	; 0x69
    6270:	dc0b      	bgt.n	628a <printf+0x46>
    6272:	2b63      	cmp	r3, #99	; 0x63
    6274:	d019      	beq.n	62aa <printf+0x66>
    6276:	2b63      	cmp	r3, #99	; 0x63
    6278:	dc04      	bgt.n	6284 <printf+0x40>
    627a:	2b25      	cmp	r3, #37	; 0x25
    627c:	d00c      	beq.n	6298 <printf+0x54>
    627e:	2b58      	cmp	r3, #88	; 0x58
    6280:	d059      	beq.n	6336 <printf+0xf2>
    6282:	e076      	b.n	6372 <printf+0x12e>
    6284:	2b64      	cmp	r3, #100	; 0x64
    6286:	d020      	beq.n	62ca <printf+0x86>
    6288:	e073      	b.n	6372 <printf+0x12e>
    628a:	2b75      	cmp	r3, #117	; 0x75
    628c:	d032      	beq.n	62f4 <printf+0xb0>
    628e:	2b78      	cmp	r3, #120	; 0x78
    6290:	d051      	beq.n	6336 <printf+0xf2>
    6292:	2b73      	cmp	r3, #115	; 0x73
    6294:	d043      	beq.n	631e <printf+0xda>
    6296:	e06c      	b.n	6372 <printf+0x12e>
                case '%':
                    serial.putch('%');
    6298:	f240 0330 	movw	r3, #48	; 0x30
    629c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62a0:	685b      	ldr	r3, [r3, #4]
    62a2:	f04f 0025 	mov.w	r0, #37	; 0x25
    62a6:	4798      	blx	r3
                break;
    62a8:	e063      	b.n	6372 <printf+0x12e>
                case 'c':
                    argv.i = va_arg(arg_list, int);
    62aa:	683b      	ldr	r3, [r7, #0]
    62ac:	f103 0204 	add.w	r2, r3, #4
    62b0:	603a      	str	r2, [r7, #0]
    62b2:	681b      	ldr	r3, [r3, #0]
    62b4:	607b      	str	r3, [r7, #4]
                    serial.putch(argv.i);
    62b6:	f240 0330 	movw	r3, #48	; 0x30
    62ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62be:	685b      	ldr	r3, [r3, #4]
    62c0:	687a      	ldr	r2, [r7, #4]
    62c2:	b2d2      	uxtb	r2, r2
    62c4:	4610      	mov	r0, r2
    62c6:	4798      	blx	r3
                break;
    62c8:	e053      	b.n	6372 <printf+0x12e>
                case 'd':
                case 'i':
                    argv.i = va_arg(arg_list, int);
    62ca:	683b      	ldr	r3, [r7, #0]
    62cc:	f103 0204 	add.w	r2, r3, #4
    62d0:	603a      	str	r2, [r7, #0]
    62d2:	681b      	ldr	r3, [r3, #0]
    62d4:	607b      	str	r3, [r7, #4]
                    itoa(argv.i, buf, 10);
    62d6:	687b      	ldr	r3, [r7, #4]
    62d8:	4618      	mov	r0, r3
    62da:	f107 0308 	add.w	r3, r7, #8
    62de:	4619      	mov	r1, r3
    62e0:	f04f 020a 	mov.w	r2, #10
    62e4:	f7fe ffb0 	bl	5248 <itoa>
                    puts(buf);
    62e8:	f107 0308 	add.w	r3, r7, #8
    62ec:	4618      	mov	r0, r3
    62ee:	f7ff fed3 	bl	6098 <puts>
                break;
    62f2:	e03e      	b.n	6372 <printf+0x12e>
                case 'u':
                    argv.u = va_arg(arg_list, unsigned);
    62f4:	683b      	ldr	r3, [r7, #0]
    62f6:	f103 0204 	add.w	r2, r3, #4
    62fa:	603a      	str	r2, [r7, #0]
    62fc:	681b      	ldr	r3, [r3, #0]
    62fe:	607b      	str	r3, [r7, #4]
                    utoa(argv.u, buf, 10);
    6300:	687b      	ldr	r3, [r7, #4]
    6302:	4618      	mov	r0, r3
    6304:	f107 0308 	add.w	r3, r7, #8
    6308:	4619      	mov	r1, r3
    630a:	f04f 020a 	mov.w	r2, #10
    630e:	f7fe ff2f 	bl	5170 <utoa>
                    puts(buf);
    6312:	f107 0308 	add.w	r3, r7, #8
    6316:	4618      	mov	r0, r3
    6318:	f7ff febe 	bl	6098 <puts>
                break;
    631c:	e029      	b.n	6372 <printf+0x12e>
                case 's':
                    argv.s = va_arg(arg_list, const char *);
    631e:	683b      	ldr	r3, [r7, #0]
    6320:	f103 0204 	add.w	r2, r3, #4
    6324:	603a      	str	r2, [r7, #0]
    6326:	681b      	ldr	r3, [r3, #0]
    6328:	607b      	str	r3, [r7, #4]
                    puts(argv.s);
    632a:	687b      	ldr	r3, [r7, #4]
    632c:	4618      	mov	r0, r3
    632e:	f7ff feb3 	bl	6098 <puts>
                break;
    6332:	bf00      	nop
    6334:	e01d      	b.n	6372 <printf+0x12e>
                case 'x':
                case 'X':
                    argv.u = va_arg(arg_list, unsigned);
    6336:	683b      	ldr	r3, [r7, #0]
    6338:	f103 0204 	add.w	r2, r3, #4
    633c:	603a      	str	r2, [r7, #0]
    633e:	681b      	ldr	r3, [r3, #0]
    6340:	607b      	str	r3, [r7, #4]
                    utoa(argv.u, buf, 16);
    6342:	687b      	ldr	r3, [r7, #4]
    6344:	4618      	mov	r0, r3
    6346:	f107 0308 	add.w	r3, r7, #8
    634a:	4619      	mov	r1, r3
    634c:	f04f 0210 	mov.w	r2, #16
    6350:	f7fe ff0e 	bl	5170 <utoa>
                    puts(buf);
    6354:	f107 0308 	add.w	r3, r7, #8
    6358:	4618      	mov	r0, r3
    635a:	f7ff fe9d 	bl	6098 <puts>
                break;
    635e:	e008      	b.n	6372 <printf+0x12e>
            }
        }
        else {
            serial.putch(*fmt);
    6360:	f240 0330 	movw	r3, #48	; 0x30
    6364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6368:	685b      	ldr	r3, [r3, #4]
    636a:	69ba      	ldr	r2, [r7, #24]
    636c:	7812      	ldrb	r2, [r2, #0]
    636e:	4610      	mov	r0, r2
    6370:	4798      	blx	r3
        unsigned u;
    } argv;
    va_list arg_list;
    
    va_start(arg_list, fmt);
    for (; *fmt; ++fmt) {
    6372:	69bb      	ldr	r3, [r7, #24]
    6374:	f103 0301 	add.w	r3, r3, #1
    6378:	61bb      	str	r3, [r7, #24]
    637a:	69bb      	ldr	r3, [r7, #24]
    637c:	781b      	ldrb	r3, [r3, #0]
    637e:	2b00      	cmp	r3, #0
    6380:	f47f af68 	bne.w	6254 <printf+0x10>
        else {
            serial.putch(*fmt);
        }
    } 
    va_end(arg_list);
    return 1;
    6384:	f04f 0301 	mov.w	r3, #1

    6388:	4618      	mov	r0, r3
    638a:	f107 0710 	add.w	r7, r7, #16
    638e:	46bd      	mov	sp, r7
    6390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    6394:	b004      	add	sp, #16
    6396:	4770      	bx	lr

00006398 <osDbgPrintf>:
void osDbgPrintf(const char * fmt, ...) { }
    6398:	b40f      	push	{r0, r1, r2, r3}
    639a:	b480      	push	{r7}
    639c:	af00      	add	r7, sp, #0
    639e:	46bd      	mov	sp, r7
    63a0:	bc80      	pop	{r7}
    63a2:	b004      	add	sp, #16
    63a4:	4770      	bx	lr
    63a6:	bf00      	nop

000063a8 <memset>:
#define HIGHS (ONES * (UCHAR_MAX/2+1))
#define HASZERO(x) ((x)-ONES & ~(x) & HIGHS)

#define SS (sizeof(size_t))
void *memset(void *dest, int c, size_t n)
{
    63a8:	b480      	push	{r7}
    63aa:	b089      	sub	sp, #36	; 0x24
    63ac:	af00      	add	r7, sp, #0
    63ae:	60f8      	str	r0, [r7, #12]
    63b0:	60b9      	str	r1, [r7, #8]
    63b2:	607a      	str	r2, [r7, #4]
	unsigned char *s = dest;
    63b4:	68fb      	ldr	r3, [r7, #12]
    63b6:	61fb      	str	r3, [r7, #28]
	c = (unsigned char)c;
    63b8:	68bb      	ldr	r3, [r7, #8]
    63ba:	b2db      	uxtb	r3, r3
    63bc:	60bb      	str	r3, [r7, #8]
	for (; ((uintptr_t)s & ALIGN) && n; n--) *s++ = c;
    63be:	e00b      	b.n	63d8 <memset+0x30>
    63c0:	68bb      	ldr	r3, [r7, #8]
    63c2:	b2da      	uxtb	r2, r3
    63c4:	69fb      	ldr	r3, [r7, #28]
    63c6:	701a      	strb	r2, [r3, #0]
    63c8:	69fb      	ldr	r3, [r7, #28]
    63ca:	f103 0301 	add.w	r3, r3, #1
    63ce:	61fb      	str	r3, [r7, #28]
    63d0:	687b      	ldr	r3, [r7, #4]
    63d2:	f103 33ff 	add.w	r3, r3, #4294967295
    63d6:	607b      	str	r3, [r7, #4]
    63d8:	69fb      	ldr	r3, [r7, #28]
    63da:	f003 0304 	and.w	r3, r3, #4
    63de:	2b00      	cmp	r3, #0
    63e0:	d002      	beq.n	63e8 <memset+0x40>
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	2b00      	cmp	r3, #0
    63e6:	d1eb      	bne.n	63c0 <memset+0x18>
	if (n) {
    63e8:	687b      	ldr	r3, [r7, #4]
    63ea:	2b00      	cmp	r3, #0
    63ec:	d02b      	beq.n	6446 <memset+0x9e>
		size_t *w, k = ONES * c;
    63ee:	68ba      	ldr	r2, [r7, #8]
    63f0:	4613      	mov	r3, r2
    63f2:	ea4f 2303 	mov.w	r3, r3, lsl #8
    63f6:	189b      	adds	r3, r3, r2
    63f8:	ea4f 4203 	mov.w	r2, r3, lsl #16
    63fc:	189b      	adds	r3, r3, r2
    63fe:	617b      	str	r3, [r7, #20]
		for (w = (void *)s; n>=SS; n-=SS, w++) *w = k;
    6400:	69fb      	ldr	r3, [r7, #28]
    6402:	61bb      	str	r3, [r7, #24]
    6404:	e00a      	b.n	641c <memset+0x74>
    6406:	69bb      	ldr	r3, [r7, #24]
    6408:	697a      	ldr	r2, [r7, #20]
    640a:	601a      	str	r2, [r3, #0]
    640c:	687b      	ldr	r3, [r7, #4]
    640e:	f1a3 0304 	sub.w	r3, r3, #4
    6412:	607b      	str	r3, [r7, #4]
    6414:	69bb      	ldr	r3, [r7, #24]
    6416:	f103 0304 	add.w	r3, r3, #4
    641a:	61bb      	str	r3, [r7, #24]
    641c:	687b      	ldr	r3, [r7, #4]
    641e:	2b03      	cmp	r3, #3
    6420:	d8f1      	bhi.n	6406 <memset+0x5e>
		for (s = (void *)w; n; n--, s++) *s = c;
    6422:	69bb      	ldr	r3, [r7, #24]
    6424:	61fb      	str	r3, [r7, #28]
    6426:	e00b      	b.n	6440 <memset+0x98>
    6428:	68bb      	ldr	r3, [r7, #8]
    642a:	b2da      	uxtb	r2, r3
    642c:	69fb      	ldr	r3, [r7, #28]
    642e:	701a      	strb	r2, [r3, #0]
    6430:	687b      	ldr	r3, [r7, #4]
    6432:	f103 33ff 	add.w	r3, r3, #4294967295
    6436:	607b      	str	r3, [r7, #4]
    6438:	69fb      	ldr	r3, [r7, #28]
    643a:	f103 0301 	add.w	r3, r3, #1
    643e:	61fb      	str	r3, [r7, #28]
    6440:	687b      	ldr	r3, [r7, #4]
    6442:	2b00      	cmp	r3, #0
    6444:	d1f0      	bne.n	6428 <memset+0x80>
	}
	return dest;
    6446:	68fb      	ldr	r3, [r7, #12]
}
    6448:	4618      	mov	r0, r3
    644a:	f107 0724 	add.w	r7, r7, #36	; 0x24
    644e:	46bd      	mov	sp, r7
    6450:	bc80      	pop	{r7}
    6452:	4770      	bx	lr

00006454 <memcpy>:

void *memcpy(void *dest, const void *src, size_t n)
{
    6454:	b480      	push	{r7}
    6456:	b08b      	sub	sp, #44	; 0x2c
    6458:	af00      	add	r7, sp, #0
    645a:	60f8      	str	r0, [r7, #12]
    645c:	60b9      	str	r1, [r7, #8]
    645e:	607a      	str	r2, [r7, #4]
	void *ret = dest;
    6460:	68fb      	ldr	r3, [r7, #12]
    6462:	617b      	str	r3, [r7, #20]
	
	//Cut rear
	uint8_t *dst8 = dest;
    6464:	68fb      	ldr	r3, [r7, #12]
    6466:	627b      	str	r3, [r7, #36]	; 0x24
	const uint8_t *src8 = src;
    6468:	68bb      	ldr	r3, [r7, #8]
    646a:	623b      	str	r3, [r7, #32]
	switch (n % 4) {
    646c:	687b      	ldr	r3, [r7, #4]
    646e:	f003 0303 	and.w	r3, r3, #3
    6472:	2b02      	cmp	r3, #2
    6474:	d010      	beq.n	6498 <memcpy+0x44>
    6476:	2b03      	cmp	r3, #3
    6478:	d002      	beq.n	6480 <memcpy+0x2c>
    647a:	2b01      	cmp	r3, #1
    647c:	d018      	beq.n	64b0 <memcpy+0x5c>
    647e:	e023      	b.n	64c8 <memcpy+0x74>
		case 3 : *dst8++ = *src8++;
    6480:	6a3b      	ldr	r3, [r7, #32]
    6482:	781a      	ldrb	r2, [r3, #0]
    6484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6486:	701a      	strb	r2, [r3, #0]
    6488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    648a:	f103 0301 	add.w	r3, r3, #1
    648e:	627b      	str	r3, [r7, #36]	; 0x24
    6490:	6a3b      	ldr	r3, [r7, #32]
    6492:	f103 0301 	add.w	r3, r3, #1
    6496:	623b      	str	r3, [r7, #32]
		case 2 : *dst8++ = *src8++;
    6498:	6a3b      	ldr	r3, [r7, #32]
    649a:	781a      	ldrb	r2, [r3, #0]
    649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    649e:	701a      	strb	r2, [r3, #0]
    64a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    64a2:	f103 0301 	add.w	r3, r3, #1
    64a6:	627b      	str	r3, [r7, #36]	; 0x24
    64a8:	6a3b      	ldr	r3, [r7, #32]
    64aa:	f103 0301 	add.w	r3, r3, #1
    64ae:	623b      	str	r3, [r7, #32]
		case 1 : *dst8++ = *src8++;
    64b0:	6a3b      	ldr	r3, [r7, #32]
    64b2:	781a      	ldrb	r2, [r3, #0]
    64b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    64b6:	701a      	strb	r2, [r3, #0]
    64b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    64ba:	f103 0301 	add.w	r3, r3, #1
    64be:	627b      	str	r3, [r7, #36]	; 0x24
    64c0:	6a3b      	ldr	r3, [r7, #32]
    64c2:	f103 0301 	add.w	r3, r3, #1
    64c6:	623b      	str	r3, [r7, #32]
		case 0 : ;
	}
	
	//stm32 data bus width
	uint32_t *dst32 = (void *)dst8;
    64c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    64ca:	61fb      	str	r3, [r7, #28]
	const uint32_t *src32 = (void *)src8;
    64cc:	6a3b      	ldr	r3, [r7, #32]
    64ce:	61bb      	str	r3, [r7, #24]
	n = n / 4;
    64d0:	687b      	ldr	r3, [r7, #4]
    64d2:	ea4f 0393 	mov.w	r3, r3, lsr #2
    64d6:	607b      	str	r3, [r7, #4]
	while (n--) {
    64d8:	e00b      	b.n	64f2 <memcpy+0x9e>
		*dst32++ = *src32++;
    64da:	69bb      	ldr	r3, [r7, #24]
    64dc:	681a      	ldr	r2, [r3, #0]
    64de:	69fb      	ldr	r3, [r7, #28]
    64e0:	601a      	str	r2, [r3, #0]
    64e2:	69fb      	ldr	r3, [r7, #28]
    64e4:	f103 0304 	add.w	r3, r3, #4
    64e8:	61fb      	str	r3, [r7, #28]
    64ea:	69bb      	ldr	r3, [r7, #24]
    64ec:	f103 0304 	add.w	r3, r3, #4
    64f0:	61bb      	str	r3, [r7, #24]
	
	//stm32 data bus width
	uint32_t *dst32 = (void *)dst8;
	const uint32_t *src32 = (void *)src8;
	n = n / 4;
	while (n--) {
    64f2:	687b      	ldr	r3, [r7, #4]
    64f4:	2b00      	cmp	r3, #0
    64f6:	bf0c      	ite	eq
    64f8:	2300      	moveq	r3, #0
    64fa:	2301      	movne	r3, #1
    64fc:	b2db      	uxtb	r3, r3
    64fe:	687a      	ldr	r2, [r7, #4]
    6500:	f102 32ff 	add.w	r2, r2, #4294967295
    6504:	607a      	str	r2, [r7, #4]
    6506:	2b00      	cmp	r3, #0
    6508:	d1e7      	bne.n	64da <memcpy+0x86>
		*dst32++ = *src32++;
	}
	
	return ret;
    650a:	697b      	ldr	r3, [r7, #20]
}
    650c:	4618      	mov	r0, r3
    650e:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    6512:	46bd      	mov	sp, r7
    6514:	bc80      	pop	{r7}
    6516:	4770      	bx	lr

00006518 <memmove>:

void *memmove(void *dest, const void *src, size_t count)
{
    6518:	b480      	push	{r7}
    651a:	b087      	sub	sp, #28
    651c:	af00      	add	r7, sp, #0
    651e:	60f8      	str	r0, [r7, #12]
    6520:	60b9      	str	r1, [r7, #8]
    6522:	607a      	str	r2, [r7, #4]
	char *tmp;
	const char *s;

	if(dest <= src) {
    6524:	68fa      	ldr	r2, [r7, #12]
    6526:	68bb      	ldr	r3, [r7, #8]
    6528:	429a      	cmp	r2, r3
    652a:	d81d      	bhi.n	6568 <memmove+0x50>
		tmp = dest;
    652c:	68fb      	ldr	r3, [r7, #12]
    652e:	617b      	str	r3, [r7, #20]
		s = src;
    6530:	68bb      	ldr	r3, [r7, #8]
    6532:	613b      	str	r3, [r7, #16]
		while(count--)
    6534:	e00b      	b.n	654e <memmove+0x36>
			*tmp++ = *s++;
    6536:	693b      	ldr	r3, [r7, #16]
    6538:	781a      	ldrb	r2, [r3, #0]
    653a:	697b      	ldr	r3, [r7, #20]
    653c:	701a      	strb	r2, [r3, #0]
    653e:	697b      	ldr	r3, [r7, #20]
    6540:	f103 0301 	add.w	r3, r3, #1
    6544:	617b      	str	r3, [r7, #20]
    6546:	693b      	ldr	r3, [r7, #16]
    6548:	f103 0301 	add.w	r3, r3, #1
    654c:	613b      	str	r3, [r7, #16]
	const char *s;

	if(dest <= src) {
		tmp = dest;
		s = src;
		while(count--)
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	2b00      	cmp	r3, #0
    6552:	bf0c      	ite	eq
    6554:	2300      	moveq	r3, #0
    6556:	2301      	movne	r3, #1
    6558:	b2db      	uxtb	r3, r3
    655a:	687a      	ldr	r2, [r7, #4]
    655c:	f102 32ff 	add.w	r2, r2, #4294967295
    6560:	607a      	str	r2, [r7, #4]
    6562:	2b00      	cmp	r3, #0
    6564:	d1e7      	bne.n	6536 <memmove+0x1e>
    6566:	e024      	b.n	65b2 <memmove+0x9a>
			*tmp++ = *s++;
	} else {
		tmp = dest;
    6568:	68fb      	ldr	r3, [r7, #12]
    656a:	617b      	str	r3, [r7, #20]
		tmp += count;
    656c:	697a      	ldr	r2, [r7, #20]
    656e:	687b      	ldr	r3, [r7, #4]
    6570:	18d3      	adds	r3, r2, r3
    6572:	617b      	str	r3, [r7, #20]
		s= src;
    6574:	68bb      	ldr	r3, [r7, #8]
    6576:	613b      	str	r3, [r7, #16]
		s += count;
    6578:	693a      	ldr	r2, [r7, #16]
    657a:	687b      	ldr	r3, [r7, #4]
    657c:	18d3      	adds	r3, r2, r3
    657e:	613b      	str	r3, [r7, #16]
		while(count--)
    6580:	e00b      	b.n	659a <memmove+0x82>
			*--tmp = *--s;
    6582:	697b      	ldr	r3, [r7, #20]
    6584:	f103 33ff 	add.w	r3, r3, #4294967295
    6588:	617b      	str	r3, [r7, #20]
    658a:	693b      	ldr	r3, [r7, #16]
    658c:	f103 33ff 	add.w	r3, r3, #4294967295
    6590:	613b      	str	r3, [r7, #16]
    6592:	693b      	ldr	r3, [r7, #16]
    6594:	781a      	ldrb	r2, [r3, #0]
    6596:	697b      	ldr	r3, [r7, #20]
    6598:	701a      	strb	r2, [r3, #0]
	} else {
		tmp = dest;
		tmp += count;
		s= src;
		s += count;
		while(count--)
    659a:	687b      	ldr	r3, [r7, #4]
    659c:	2b00      	cmp	r3, #0
    659e:	bf0c      	ite	eq
    65a0:	2300      	moveq	r3, #0
    65a2:	2301      	movne	r3, #1
    65a4:	b2db      	uxtb	r3, r3
    65a6:	687a      	ldr	r2, [r7, #4]
    65a8:	f102 32ff 	add.w	r2, r2, #4294967295
    65ac:	607a      	str	r2, [r7, #4]
    65ae:	2b00      	cmp	r3, #0
    65b0:	d1e7      	bne.n	6582 <memmove+0x6a>
			*--tmp = *--s;
	}
	return dest;
    65b2:	68fb      	ldr	r3, [r7, #12]
} 
    65b4:	4618      	mov	r0, r3
    65b6:	f107 071c 	add.w	r7, r7, #28
    65ba:	46bd      	mov	sp, r7
    65bc:	bc80      	pop	{r7}
    65be:	4770      	bx	lr

000065c0 <strdup>:

char *strdup(const char *str)
{
    65c0:	b580      	push	{r7, lr}
    65c2:	b084      	sub	sp, #16
    65c4:	af00      	add	r7, sp, #0
    65c6:	6078      	str	r0, [r7, #4]
        char *ptr;
        /*dont forget to allocate last word in string*/
        ptr = (char *)pvPortMalloc(strlen(str)+1);
    65c8:	6878      	ldr	r0, [r7, #4]
    65ca:	f000 f8b3 	bl	6734 <strlen>
    65ce:	4603      	mov	r3, r0
    65d0:	f103 0301 	add.w	r3, r3, #1
    65d4:	4618      	mov	r0, r3
    65d6:	f7fe fc2f 	bl	4e38 <pvPortMalloc>
    65da:	60f8      	str	r0, [r7, #12]
        if(ptr == NULL)
    65dc:	68fb      	ldr	r3, [r7, #12]
    65de:	2b00      	cmp	r3, #0
    65e0:	d102      	bne.n	65e8 <strdup+0x28>
                return NULL;
    65e2:	f04f 0300 	mov.w	r3, #0
    65e6:	e014      	b.n	6612 <strdup+0x52>
        /*make the end of string have null character*/
        ptr[strlen(str)+1] = '\0';
    65e8:	6878      	ldr	r0, [r7, #4]
    65ea:	f000 f8a3 	bl	6734 <strlen>
    65ee:	4603      	mov	r3, r0
    65f0:	f103 0301 	add.w	r3, r3, #1
    65f4:	68fa      	ldr	r2, [r7, #12]
    65f6:	18d3      	adds	r3, r2, r3
    65f8:	f04f 0200 	mov.w	r2, #0
    65fc:	701a      	strb	r2, [r3, #0]
        return memcpy(ptr, str, strlen(str));
    65fe:	6878      	ldr	r0, [r7, #4]
    6600:	f000 f898 	bl	6734 <strlen>
    6604:	4603      	mov	r3, r0
    6606:	68f8      	ldr	r0, [r7, #12]
    6608:	6879      	ldr	r1, [r7, #4]
    660a:	461a      	mov	r2, r3
    660c:	f7ff ff22 	bl	6454 <memcpy>
    6610:	4603      	mov	r3, r0
}
    6612:	4618      	mov	r0, r3
    6614:	f107 0710 	add.w	r7, r7, #16
    6618:	46bd      	mov	sp, r7
    661a:	bd80      	pop	{r7, pc}

0000661c <strchr>:

char *strchr(const char *s, int c)
{
    661c:	b480      	push	{r7}
    661e:	b083      	sub	sp, #12
    6620:	af00      	add	r7, sp, #0
    6622:	6078      	str	r0, [r7, #4]
    6624:	6039      	str	r1, [r7, #0]
	for (; *s && *s != c; s++);
    6626:	e003      	b.n	6630 <strchr+0x14>
    6628:	687b      	ldr	r3, [r7, #4]
    662a:	f103 0301 	add.w	r3, r3, #1
    662e:	607b      	str	r3, [r7, #4]
    6630:	687b      	ldr	r3, [r7, #4]
    6632:	781b      	ldrb	r3, [r3, #0]
    6634:	2b00      	cmp	r3, #0
    6636:	d005      	beq.n	6644 <strchr+0x28>
    6638:	687b      	ldr	r3, [r7, #4]
    663a:	781b      	ldrb	r3, [r3, #0]
    663c:	461a      	mov	r2, r3
    663e:	683b      	ldr	r3, [r7, #0]
    6640:	429a      	cmp	r2, r3
    6642:	d1f1      	bne.n	6628 <strchr+0xc>
	return (*s == c) ? (char *)s : NULL;
    6644:	687b      	ldr	r3, [r7, #4]
    6646:	781b      	ldrb	r3, [r3, #0]
    6648:	461a      	mov	r2, r3
    664a:	683b      	ldr	r3, [r7, #0]
    664c:	429a      	cmp	r2, r3
    664e:	d101      	bne.n	6654 <strchr+0x38>
    6650:	687b      	ldr	r3, [r7, #4]
    6652:	e001      	b.n	6658 <strchr+0x3c>
    6654:	f04f 0300 	mov.w	r3, #0
}
    6658:	4618      	mov	r0, r3
    665a:	f107 070c 	add.w	r7, r7, #12
    665e:	46bd      	mov	sp, r7
    6660:	bc80      	pop	{r7}
    6662:	4770      	bx	lr

00006664 <strcpy>:

char *strcpy(char *dest, const char *src)
{
    6664:	b480      	push	{r7}
    6666:	b085      	sub	sp, #20
    6668:	af00      	add	r7, sp, #0
    666a:	6078      	str	r0, [r7, #4]
    666c:	6039      	str	r1, [r7, #0]
	const unsigned char *s = (unsigned char *)src;
    666e:	683b      	ldr	r3, [r7, #0]
    6670:	60fb      	str	r3, [r7, #12]
	unsigned char *d = (unsigned char*)dest;
    6672:	687b      	ldr	r3, [r7, #4]
    6674:	60bb      	str	r3, [r7, #8]
	while ((*d++ = *s++));
    6676:	bf00      	nop
    6678:	68fb      	ldr	r3, [r7, #12]
    667a:	781a      	ldrb	r2, [r3, #0]
    667c:	68bb      	ldr	r3, [r7, #8]
    667e:	701a      	strb	r2, [r3, #0]
    6680:	68bb      	ldr	r3, [r7, #8]
    6682:	781b      	ldrb	r3, [r3, #0]
    6684:	2b00      	cmp	r3, #0
    6686:	bf0c      	ite	eq
    6688:	2300      	moveq	r3, #0
    668a:	2301      	movne	r3, #1
    668c:	b2db      	uxtb	r3, r3
    668e:	68ba      	ldr	r2, [r7, #8]
    6690:	f102 0201 	add.w	r2, r2, #1
    6694:	60ba      	str	r2, [r7, #8]
    6696:	68fa      	ldr	r2, [r7, #12]
    6698:	f102 0201 	add.w	r2, r2, #1
    669c:	60fa      	str	r2, [r7, #12]
    669e:	2b00      	cmp	r3, #0
    66a0:	d1ea      	bne.n	6678 <strcpy+0x14>
	return dest;
    66a2:	687b      	ldr	r3, [r7, #4]
}
    66a4:	4618      	mov	r0, r3
    66a6:	f107 0714 	add.w	r7, r7, #20
    66aa:	46bd      	mov	sp, r7
    66ac:	bc80      	pop	{r7}
    66ae:	4770      	bx	lr

000066b0 <strncpy>:

char *strncpy(char *dest, const char *src, size_t n)
{
    66b0:	b480      	push	{r7}
    66b2:	b087      	sub	sp, #28
    66b4:	af00      	add	r7, sp, #0
    66b6:	60f8      	str	r0, [r7, #12]
    66b8:	60b9      	str	r1, [r7, #8]
    66ba:	607a      	str	r2, [r7, #4]
	const unsigned char *s = (unsigned char *) src;
    66bc:	68bb      	ldr	r3, [r7, #8]
    66be:	617b      	str	r3, [r7, #20]
	unsigned char *d = (unsigned char *) dest;
    66c0:	68fb      	ldr	r3, [r7, #12]
    66c2:	613b      	str	r3, [r7, #16]
	while (n-- && (*d++ = *s++));
    66c4:	bf00      	nop
    66c6:	687b      	ldr	r3, [r7, #4]
    66c8:	2b00      	cmp	r3, #0
    66ca:	bf0c      	ite	eq
    66cc:	2300      	moveq	r3, #0
    66ce:	2301      	movne	r3, #1
    66d0:	b2db      	uxtb	r3, r3
    66d2:	687a      	ldr	r2, [r7, #4]
    66d4:	f102 32ff 	add.w	r2, r2, #4294967295
    66d8:	607a      	str	r2, [r7, #4]
    66da:	2b00      	cmp	r3, #0
    66dc:	d014      	beq.n	6708 <strncpy+0x58>
    66de:	697b      	ldr	r3, [r7, #20]
    66e0:	781a      	ldrb	r2, [r3, #0]
    66e2:	693b      	ldr	r3, [r7, #16]
    66e4:	701a      	strb	r2, [r3, #0]
    66e6:	693b      	ldr	r3, [r7, #16]
    66e8:	781b      	ldrb	r3, [r3, #0]
    66ea:	2b00      	cmp	r3, #0
    66ec:	bf0c      	ite	eq
    66ee:	2300      	moveq	r3, #0
    66f0:	2301      	movne	r3, #1
    66f2:	b2db      	uxtb	r3, r3
    66f4:	693a      	ldr	r2, [r7, #16]
    66f6:	f102 0201 	add.w	r2, r2, #1
    66fa:	613a      	str	r2, [r7, #16]
    66fc:	697a      	ldr	r2, [r7, #20]
    66fe:	f102 0201 	add.w	r2, r2, #1
    6702:	617a      	str	r2, [r7, #20]
    6704:	2b00      	cmp	r3, #0
    6706:	d1de      	bne.n	66c6 <strncpy+0x16>
	return dest;
    6708:	68fb      	ldr	r3, [r7, #12]
}
    670a:	4618      	mov	r0, r3
    670c:	f107 071c 	add.w	r7, r7, #28
    6710:	46bd      	mov	sp, r7
    6712:	bc80      	pop	{r7}
    6714:	4770      	bx	lr
    6716:	bf00      	nop

00006718 <strcmp>:

int strcmp(const char *a, const char *b) __attribute__ ((naked));
int strcmp(const char *a, const char *b)
{
	__asm__(
    6718:	f810 2b01 	ldrb.w	r2, [r0], #1
    671c:	f811 3b01 	ldrb.w	r3, [r1], #1
    6720:	2a01      	cmp	r2, #1
    6722:	bf88      	it	hi
    6724:	429a      	cmphi	r2, r3
    6726:	f43f aff7 	beq.w	6718 <strcmp>
    672a:	eba2 0003 	sub.w	r0, r2, r3
    672e:	4770      	bx	lr
        "   beq     strcmp_lop      \n"
		"	sub     r0, r2, r3  	\n"
        "   bx      lr              \n"
		:::
	);
}
    6730:	4618      	mov	r0, r3
    6732:	bf00      	nop

00006734 <strlen>:

size_t strlen(const char *s) __attribute__ ((naked));
size_t strlen(const char *s)
{
	__asm__(
    6734:	f1a0 0301 	sub.w	r3, r0, #1

00006738 <strlen_loop>:
    6738:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    673c:	2a00      	cmp	r2, #0
    673e:	f47f affb 	bne.w	6738 <strlen_loop>
    6742:	eba3 0000 	sub.w	r0, r3, r0
    6746:	4770      	bx	lr
		"	sub  r0, r3, r0			\n"
		"	bx   lr					\n"
		:::
	);

}
    6748:	4618      	mov	r0, r3
    674a:	bf00      	nop

0000674c <strncmp>:
/*
This function is from zzz072
*/
int strncmp(const char *str_a, const char *str_b, size_t n)
{
    674c:	b480      	push	{r7}
    674e:	b087      	sub	sp, #28
    6750:	af00      	add	r7, sp, #0
    6752:	60f8      	str	r0, [r7, #12]
    6754:	60b9      	str	r1, [r7, #8]
    6756:	607a      	str	r2, [r7, #4]
    int i = 0;
    6758:	f04f 0300 	mov.w	r3, #0
    675c:	617b      	str	r3, [r7, #20]

    for(i = 0; i < n; i++) {
    675e:	f04f 0300 	mov.w	r3, #0
    6762:	617b      	str	r3, [r7, #20]
    6764:	e018      	b.n	6798 <strncmp+0x4c>
        if (str_a[i] != str_b[i]) {
    6766:	697b      	ldr	r3, [r7, #20]
    6768:	68fa      	ldr	r2, [r7, #12]
    676a:	18d3      	adds	r3, r2, r3
    676c:	781a      	ldrb	r2, [r3, #0]
    676e:	697b      	ldr	r3, [r7, #20]
    6770:	68b9      	ldr	r1, [r7, #8]
    6772:	18cb      	adds	r3, r1, r3
    6774:	781b      	ldrb	r3, [r3, #0]
    6776:	429a      	cmp	r2, r3
    6778:	d00a      	beq.n	6790 <strncmp+0x44>
            return str_a[i] - str_b[i];
    677a:	697b      	ldr	r3, [r7, #20]
    677c:	68fa      	ldr	r2, [r7, #12]
    677e:	18d3      	adds	r3, r2, r3
    6780:	781b      	ldrb	r3, [r3, #0]
    6782:	461a      	mov	r2, r3
    6784:	697b      	ldr	r3, [r7, #20]
    6786:	68b9      	ldr	r1, [r7, #8]
    6788:	18cb      	adds	r3, r1, r3
    678a:	781b      	ldrb	r3, [r3, #0]
    678c:	1ad3      	subs	r3, r2, r3
    678e:	e009      	b.n	67a4 <strncmp+0x58>
*/
int strncmp(const char *str_a, const char *str_b, size_t n)
{
    int i = 0;

    for(i = 0; i < n; i++) {
    6790:	697b      	ldr	r3, [r7, #20]
    6792:	f103 0301 	add.w	r3, r3, #1
    6796:	617b      	str	r3, [r7, #20]
    6798:	697a      	ldr	r2, [r7, #20]
    679a:	687b      	ldr	r3, [r7, #4]
    679c:	429a      	cmp	r2, r3
    679e:	d3e2      	bcc.n	6766 <strncmp+0x1a>
        if (str_a[i] != str_b[i]) {
            return str_a[i] - str_b[i];
        }
    }
    return 0;
    67a0:	f04f 0300 	mov.w	r3, #0
}
    67a4:	4618      	mov	r0, r3
    67a6:	f107 071c 	add.w	r7, r7, #28
    67aa:	46bd      	mov	sp, r7
    67ac:	bc80      	pop	{r7}
    67ae:	4770      	bx	lr

000067b0 <strcat>:

char *strcat(char *dst, const char *src)
{
    67b0:	b480      	push	{r7}
    67b2:	b085      	sub	sp, #20
    67b4:	af00      	add	r7, sp, #0
    67b6:	6078      	str	r0, [r7, #4]
    67b8:	6039      	str	r1, [r7, #0]
  char *ret = dst;
    67ba:	687b      	ldr	r3, [r7, #4]
    67bc:	60fb      	str	r3, [r7, #12]

  for (; *dst; ++dst);
    67be:	e003      	b.n	67c8 <strcat+0x18>
    67c0:	687b      	ldr	r3, [r7, #4]
    67c2:	f103 0301 	add.w	r3, r3, #1
    67c6:	607b      	str	r3, [r7, #4]
    67c8:	687b      	ldr	r3, [r7, #4]
    67ca:	781b      	ldrb	r3, [r3, #0]
    67cc:	2b00      	cmp	r3, #0
    67ce:	d1f7      	bne.n	67c0 <strcat+0x10>
  while ((*dst++ = *src++));
    67d0:	bf00      	nop
    67d2:	683b      	ldr	r3, [r7, #0]
    67d4:	781a      	ldrb	r2, [r3, #0]
    67d6:	687b      	ldr	r3, [r7, #4]
    67d8:	701a      	strb	r2, [r3, #0]
    67da:	687b      	ldr	r3, [r7, #4]
    67dc:	781b      	ldrb	r3, [r3, #0]
    67de:	2b00      	cmp	r3, #0
    67e0:	bf0c      	ite	eq
    67e2:	2300      	moveq	r3, #0
    67e4:	2301      	movne	r3, #1
    67e6:	b2db      	uxtb	r3, r3
    67e8:	687a      	ldr	r2, [r7, #4]
    67ea:	f102 0201 	add.w	r2, r2, #1
    67ee:	607a      	str	r2, [r7, #4]
    67f0:	683a      	ldr	r2, [r7, #0]
    67f2:	f102 0201 	add.w	r2, r2, #1
    67f6:	603a      	str	r2, [r7, #0]
    67f8:	2b00      	cmp	r3, #0
    67fa:	d1ea      	bne.n	67d2 <strcat+0x22>

  return ret;
    67fc:	68fb      	ldr	r3, [r7, #12]
}
    67fe:	4618      	mov	r0, r3
    6800:	f107 0714 	add.w	r7, r7, #20
    6804:	46bd      	mov	sp, r7
    6806:	bc80      	pop	{r7}
    6808:	4770      	bx	lr
    680a:	bf00      	nop

0000680c <host_call>:
    /* For Thumb-2 code use the BKPT instruction instead of SWI.
     * Refer to:
     * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0471c/Bgbjhiea.html
     * http://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M4 */
    int result;
    __asm__( \
    680c:	beab      	bkpt	0x00ab
    680e:	bf00      	nop
    6810:	4770      	bx	lr
      "bkpt 0xAB\n"\
      "nop\n" \
      "bx lr\n"\
        :"=r" (result) ::\
    );
    return result;
    6812:	4623      	mov	r3, r4
}
    6814:	4618      	mov	r0, r3
    6816:	bf00      	nop

00006818 <host_open>:

/* Detailed parameters please refer to
 * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0471c/Bgbjhiea.html */
int host_open(const char *pathname, int flags)
{
    6818:	b580      	push	{r7, lr}
    681a:	b086      	sub	sp, #24
    681c:	af00      	add	r7, sp, #0
    681e:	6078      	str	r0, [r7, #4]
    6820:	6039      	str	r1, [r7, #0]
    param semi_param[3] = {
    6822:	f107 030c 	add.w	r3, r7, #12
    6826:	f04f 0200 	mov.w	r2, #0
    682a:	601a      	str	r2, [r3, #0]
    682c:	f103 0304 	add.w	r3, r3, #4
    6830:	f04f 0200 	mov.w	r2, #0
    6834:	601a      	str	r2, [r3, #0]
    6836:	f103 0304 	add.w	r3, r3, #4
    683a:	f04f 0200 	mov.w	r2, #0
    683e:	601a      	str	r2, [r3, #0]
    6840:	f103 0304 	add.w	r3, r3, #4
    6844:	687b      	ldr	r3, [r7, #4]
    6846:	60fb      	str	r3, [r7, #12]
    6848:	683b      	ldr	r3, [r7, #0]
    684a:	613b      	str	r3, [r7, #16]
        { .pdChrPtr = (char *) pathname },
        { .pdInt    = flags },
        { .pdInt    = strlen(pathname) }
    684c:	6878      	ldr	r0, [r7, #4]
    684e:	f7ff ff71 	bl	6734 <strlen>
    6852:	4603      	mov	r3, r0

/* Detailed parameters please refer to
 * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0471c/Bgbjhiea.html */
int host_open(const char *pathname, int flags)
{
    param semi_param[3] = {
    6854:	617b      	str	r3, [r7, #20]
        { .pdChrPtr = (char *) pathname },
        { .pdInt    = flags },
        { .pdInt    = strlen(pathname) }
    };

    return host_call(HOSTCALL_OPEN, semi_param);
    6856:	f04f 0001 	mov.w	r0, #1
    685a:	f107 030c 	add.w	r3, r7, #12
    685e:	4619      	mov	r1, r3
    6860:	f7ff ffd4 	bl	680c <host_call>
    6864:	4603      	mov	r3, r0
}
    6866:	4618      	mov	r0, r3
    6868:	f107 0718 	add.w	r7, r7, #24
    686c:	46bd      	mov	sp, r7
    686e:	bd80      	pop	{r7, pc}

00006870 <host_read>:

size_t host_read(int fd, void *buf, size_t count)
{
    6870:	b580      	push	{r7, lr}
    6872:	b088      	sub	sp, #32
    6874:	af00      	add	r7, sp, #0
    6876:	60f8      	str	r0, [r7, #12]
    6878:	60b9      	str	r1, [r7, #8]
    687a:	607a      	str	r2, [r7, #4]
    param semi_param[3] = {
    687c:	f107 0314 	add.w	r3, r7, #20
    6880:	f04f 0200 	mov.w	r2, #0
    6884:	601a      	str	r2, [r3, #0]
    6886:	f103 0304 	add.w	r3, r3, #4
    688a:	f04f 0200 	mov.w	r2, #0
    688e:	601a      	str	r2, [r3, #0]
    6890:	f103 0304 	add.w	r3, r3, #4
    6894:	f04f 0200 	mov.w	r2, #0
    6898:	601a      	str	r2, [r3, #0]
    689a:	f103 0304 	add.w	r3, r3, #4
    689e:	68fb      	ldr	r3, [r7, #12]
    68a0:	617b      	str	r3, [r7, #20]
    68a2:	68bb      	ldr	r3, [r7, #8]
    68a4:	61bb      	str	r3, [r7, #24]
    68a6:	687b      	ldr	r3, [r7, #4]
    68a8:	61fb      	str	r3, [r7, #28]
        { .pdInt = fd },
        { .pdPtr = buf },
        { .pdInt = count }
    };

    return host_call(HOSTCALL_READ, semi_param);
    68aa:	f04f 0006 	mov.w	r0, #6
    68ae:	f107 0314 	add.w	r3, r7, #20
    68b2:	4619      	mov	r1, r3
    68b4:	f7ff ffaa 	bl	680c <host_call>
    68b8:	4603      	mov	r3, r0
}
    68ba:	4618      	mov	r0, r3
    68bc:	f107 0720 	add.w	r7, r7, #32
    68c0:	46bd      	mov	sp, r7
    68c2:	bd80      	pop	{r7, pc}

000068c4 <host_write>:

size_t host_write(int fd, const void *buf, size_t count)
{
    68c4:	b580      	push	{r7, lr}
    68c6:	b088      	sub	sp, #32
    68c8:	af00      	add	r7, sp, #0
    68ca:	60f8      	str	r0, [r7, #12]
    68cc:	60b9      	str	r1, [r7, #8]
    68ce:	607a      	str	r2, [r7, #4]
    param semi_param[3] = {
    68d0:	f107 0314 	add.w	r3, r7, #20
    68d4:	f04f 0200 	mov.w	r2, #0
    68d8:	601a      	str	r2, [r3, #0]
    68da:	f103 0304 	add.w	r3, r3, #4
    68de:	f04f 0200 	mov.w	r2, #0
    68e2:	601a      	str	r2, [r3, #0]
    68e4:	f103 0304 	add.w	r3, r3, #4
    68e8:	f04f 0200 	mov.w	r2, #0
    68ec:	601a      	str	r2, [r3, #0]
    68ee:	f103 0304 	add.w	r3, r3, #4
    68f2:	68fb      	ldr	r3, [r7, #12]
    68f4:	617b      	str	r3, [r7, #20]
    68f6:	68bb      	ldr	r3, [r7, #8]
    68f8:	61bb      	str	r3, [r7, #24]
    68fa:	687b      	ldr	r3, [r7, #4]
    68fc:	61fb      	str	r3, [r7, #28]
        { .pdInt = fd },
        { .pdPtr = (void *) buf },
        { .pdInt = count }
    };

    return host_call(HOSTCALL_WRITE, semi_param);
    68fe:	f04f 0005 	mov.w	r0, #5
    6902:	f107 0314 	add.w	r3, r7, #20
    6906:	4619      	mov	r1, r3
    6908:	f7ff ff80 	bl	680c <host_call>
    690c:	4603      	mov	r3, r0
}
    690e:	4618      	mov	r0, r3
    6910:	f107 0720 	add.w	r7, r7, #32
    6914:	46bd      	mov	sp, r7
    6916:	bd80      	pop	{r7, pc}

00006918 <host_close>:

int host_close(int fd)
{
    6918:	b580      	push	{r7, lr}
    691a:	b082      	sub	sp, #8
    691c:	af00      	add	r7, sp, #0
    691e:	6078      	str	r0, [r7, #4]
    return host_call(HOSTCALL_CLOSE, (void *)&fd);
    6920:	f04f 0002 	mov.w	r0, #2
    6924:	f107 0304 	add.w	r3, r7, #4
    6928:	4619      	mov	r1, r3
    692a:	f7ff ff6f 	bl	680c <host_call>
    692e:	4603      	mov	r3, r0
}
    6930:	4618      	mov	r0, r3
    6932:	f107 0708 	add.w	r7, r7, #8
    6936:	46bd      	mov	sp, r7
    6938:	bd80      	pop	{r7, pc}
    693a:	bf00      	nop

0000693c <host_system>:

int host_system(char *cmd, int str_len)
{
    693c:	b580      	push	{r7, lr}
    693e:	b086      	sub	sp, #24
    6940:	af00      	add	r7, sp, #0
    6942:	6078      	str	r0, [r7, #4]
    6944:	6039      	str	r1, [r7, #0]
    param semi_param[3] = {
    6946:	f107 030c 	add.w	r3, r7, #12
    694a:	f04f 0200 	mov.w	r2, #0
    694e:	601a      	str	r2, [r3, #0]
    6950:	f103 0304 	add.w	r3, r3, #4
    6954:	f04f 0200 	mov.w	r2, #0
    6958:	601a      	str	r2, [r3, #0]
    695a:	f103 0304 	add.w	r3, r3, #4
    695e:	f04f 0200 	mov.w	r2, #0
    6962:	601a      	str	r2, [r3, #0]
    6964:	f103 0304 	add.w	r3, r3, #4
    6968:	687b      	ldr	r3, [r7, #4]
    696a:	60fb      	str	r3, [r7, #12]
    696c:	683b      	ldr	r3, [r7, #0]
    696e:	613b      	str	r3, [r7, #16]
        { .pdPtr = (void *) cmd },
        { .pdInt = str_len }
    };
    return host_call(HOSTCALL_SYSTEM, semi_param);
    6970:	f04f 0012 	mov.w	r0, #18
    6974:	f107 030c 	add.w	r3, r7, #12
    6978:	4619      	mov	r1, r3
    697a:	f7ff ff47 	bl	680c <host_call>
    697e:	4603      	mov	r3, r0
}
    6980:	4618      	mov	r0, r3
    6982:	f107 0718 	add.w	r7, r7, #24
    6986:	46bd      	mov	sp, r7
    6988:	bd80      	pop	{r7, pc}
    698a:	bf00      	nop

0000698c <test_serial_plot>:
extern const char _sromfs;
volatile xSemaphoreHandle serial_tx_wait_sem = NULL;
volatile xQueueHandle serial_rx_queue = NULL;

void test_serial_plot()
{
    698c:	b580      	push	{r7, lr}
    698e:	b08a      	sub	sp, #40	; 0x28
    6990:	af00      	add	r7, sp, #0
	int roll = 5, pitch = 4, yaw = 0;
    6992:	f04f 0305 	mov.w	r3, #5
    6996:	627b      	str	r3, [r7, #36]	; 0x24
    6998:	f04f 0304 	mov.w	r3, #4
    699c:	623b      	str	r3, [r7, #32]
    699e:	f04f 0300 	mov.w	r3, #0
    69a2:	61fb      	str	r3, [r7, #28]
	int acc_x = 0, acc_y = 5, acc_z = 2;
    69a4:	f04f 0300 	mov.w	r3, #0
    69a8:	61bb      	str	r3, [r7, #24]
    69aa:	f04f 0305 	mov.w	r3, #5
    69ae:	617b      	str	r3, [r7, #20]
    69b0:	f04f 0302 	mov.w	r3, #2
    69b4:	613b      	str	r3, [r7, #16]
	int gyro_x = 0, gyro_y = 2, gyro_z = 5;
    69b6:	f04f 0300 	mov.w	r3, #0
    69ba:	60fb      	str	r3, [r7, #12]
    69bc:	f04f 0302 	mov.w	r3, #2
    69c0:	60bb      	str	r3, [r7, #8]
    69c2:	f04f 0305 	mov.w	r3, #5
    69c6:	607b      	str	r3, [r7, #4]
	while(1){
		vTaskDelay(20);
    69c8:	f04f 0014 	mov.w	r0, #20
    69cc:	f7fc ffee 	bl	39ac <vTaskDelay>
		if (roll<90)
    69d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    69d2:	2b59      	cmp	r3, #89	; 0x59
    69d4:	dc04      	bgt.n	69e0 <test_serial_plot+0x54>
			roll++;
    69d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    69d8:	f103 0301 	add.w	r3, r3, #1
    69dc:	627b      	str	r3, [r7, #36]	; 0x24
    69de:	e002      	b.n	69e6 <test_serial_plot+0x5a>
		else
			roll = -5;
    69e0:	f06f 0304 	mvn.w	r3, #4
    69e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (pitch<80)
    69e6:	6a3b      	ldr	r3, [r7, #32]
    69e8:	2b4f      	cmp	r3, #79	; 0x4f
    69ea:	dc04      	bgt.n	69f6 <test_serial_plot+0x6a>
			pitch++;
    69ec:	6a3b      	ldr	r3, [r7, #32]
    69ee:	f103 0301 	add.w	r3, r3, #1
    69f2:	623b      	str	r3, [r7, #32]
    69f4:	e002      	b.n	69fc <test_serial_plot+0x70>
		else
			pitch = -2;
    69f6:	f06f 0301 	mvn.w	r3, #1
    69fa:	623b      	str	r3, [r7, #32]

		if (yaw<180)
    69fc:	69fb      	ldr	r3, [r7, #28]
    69fe:	2bb3      	cmp	r3, #179	; 0xb3
    6a00:	dc04      	bgt.n	6a0c <test_serial_plot+0x80>
			yaw += 2;
    6a02:	69fb      	ldr	r3, [r7, #28]
    6a04:	f103 0302 	add.w	r3, r3, #2
    6a08:	61fb      	str	r3, [r7, #28]
    6a0a:	e002      	b.n	6a12 <test_serial_plot+0x86>
		else
			yaw = -180;
    6a0c:	f06f 03b3 	mvn.w	r3, #179	; 0xb3
    6a10:	61fb      	str	r3, [r7, #28]
        printf("Roll,%d ,Pitch,%d,Yaw,%d\r\n",roll,pitch,yaw);
    6a12:	f646 30ec 	movw	r0, #27628	; 0x6bec
    6a16:	f2c0 0000 	movt	r0, #0
    6a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6a1c:	6a3a      	ldr	r2, [r7, #32]
    6a1e:	69fb      	ldr	r3, [r7, #28]
    6a20:	f7ff fc10 	bl	6244 <printf>
        puts("CH1 3036.0(0.0),CH2 3036.0(0.0),CH3 2074.0(800.0),CH4 3100.0(0.0),CH5 1931.0(On)\r\n");
    6a24:	f646 4008 	movw	r0, #27656	; 0x6c08
    6a28:	f2c0 0000 	movt	r0, #0
    6a2c:	f7ff fb34 	bl	6098 <puts>
        puts("PID Roll,0.0,PID PITCH,0.0,PID YAW,1.0\r\n");
    6a30:	f646 405c 	movw	r0, #27740	; 0x6c5c
    6a34:	f2c0 0000 	movt	r0, #0
    6a38:	f7ff fb2e 	bl	6098 <puts>
        puts("MOTOR 1,798.0,MOTOR 2,802.0,MOTOR 3,798.0,MOTOR 4,802.0\r\n");
    6a3c:	f646 4088 	movw	r0, #27784	; 0x6c88
    6a40:	f2c0 0000 	movt	r0, #0
    6a44:	f7ff fb28 	bl	6098 <puts>
	
	}
    6a48:	e7be      	b.n	69c8 <test_serial_plot+0x3c>
    6a4a:	bf00      	nop

00006a4c <main>:
}
int main()
{
    6a4c:	b580      	push	{r7, lr}
    6a4e:	b084      	sub	sp, #16
    6a50:	af04      	add	r7, sp, #16
	init_rs232();
    6a52:	f7fe fae1 	bl	5018 <init_rs232>
	enable_rs232_interrupts();
    6a56:	f7fe fb37 	bl	50c8 <enable_rs232_interrupts>
	enable_rs232();
    6a5a:	f7fe fb5f 	bl	511c <enable_rs232>
	
	fs_init();
    6a5e:	f7fe fe65 	bl	572c <fs_init>
	fio_init();
    6a62:	f7fe ff8b 	bl	597c <fio_init>
	
	register_romfs("romfs", &_sromfs);
    6a66:	f646 40c4 	movw	r0, #27844	; 0x6cc4
    6a6a:	f2c0 0000 	movt	r0, #0
    6a6e:	f646 41d8 	movw	r1, #27864	; 0x6cd8
    6a72:	f2c0 0100 	movt	r1, #0
    6a76:	f7fe fe11 	bl	569c <register_romfs>
	
	/* Create the queue used by the serial task.  Messages for write to
	 * the RS232. */
	vSemaphoreCreateBinary(serial_tx_wait_sem);
    6a7a:	f04f 0001 	mov.w	r0, #1
    6a7e:	f04f 0100 	mov.w	r1, #0
    6a82:	f04f 0203 	mov.w	r2, #3
    6a86:	f7fc f9e1 	bl	2e4c <xQueueGenericCreate>
    6a8a:	4602      	mov	r2, r0
    6a8c:	f644 2348 	movw	r3, #19016	; 0x4a48
    6a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a94:	601a      	str	r2, [r3, #0]
    6a96:	f644 2348 	movw	r3, #19016	; 0x4a48
    6a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a9e:	681b      	ldr	r3, [r3, #0]
    6aa0:	2b00      	cmp	r3, #0
    6aa2:	d00d      	beq.n	6ac0 <main+0x74>
    6aa4:	f644 2348 	movw	r3, #19016	; 0x4a48
    6aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aac:	681b      	ldr	r3, [r3, #0]
    6aae:	4618      	mov	r0, r3
    6ab0:	f04f 0100 	mov.w	r1, #0
    6ab4:	f04f 0200 	mov.w	r2, #0
    6ab8:	f04f 0300 	mov.w	r3, #0
    6abc:	f7fc fa72 	bl	2fa4 <xQueueGenericSend>

	serial_rx_queue = xQueueCreate(1, sizeof(serial_msg));
    6ac0:	f04f 0001 	mov.w	r0, #1
    6ac4:	f04f 0101 	mov.w	r1, #1
    6ac8:	f04f 0200 	mov.w	r2, #0
    6acc:	f7fc f9be 	bl	2e4c <xQueueGenericCreate>
    6ad0:	4602      	mov	r2, r0
    6ad2:	f644 234c 	movw	r3, #19020	; 0x4a4c
    6ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ada:	601a      	str	r2, [r3, #0]
	/* Create a shell task */
	xTaskCreate(test_serial_plot,
    6adc:	f646 138d 	movw	r3, #27021	; 0x698d
    6ae0:	f2c0 0300 	movt	r3, #0
    6ae4:	f04f 0205 	mov.w	r2, #5
    6ae8:	9200      	str	r2, [sp, #0]
    6aea:	f04f 0200 	mov.w	r2, #0
    6aee:	9201      	str	r2, [sp, #4]
    6af0:	f04f 0200 	mov.w	r2, #0
    6af4:	9202      	str	r2, [sp, #8]
    6af6:	f04f 0200 	mov.w	r2, #0
    6afa:	9203      	str	r2, [sp, #12]
    6afc:	4618      	mov	r0, r3
    6afe:	f646 41cc 	movw	r1, #27852	; 0x6ccc
    6b02:	f2c0 0100 	movt	r1, #0
    6b06:	f44f 7200 	mov.w	r2, #512	; 0x200
    6b0a:	f04f 0300 	mov.w	r3, #0
    6b0e:	f7fc fdb9 	bl	3684 <xTaskGenericCreate>
	            (signed portCHAR *) "Shell ENV",
	            512 /* stack size */, NULL, tskIDLE_PRIORITY + 5, NULL);

	/* Start running the tasks. */
	vTaskStartScheduler();
    6b12:	f7fd f973 	bl	3dfc <vTaskStartScheduler>

	return 0;
    6b16:	f04f 0300 	mov.w	r3, #0
}
    6b1a:	4618      	mov	r0, r3
    6b1c:	46bd      	mov	sp, r7
    6b1e:	bd80      	pop	{r7, pc}

00006b20 <vApplicationTickHook>:

void vApplicationTickHook()
{
    6b20:	b480      	push	{r7}
    6b22:	af00      	add	r7, sp, #0
}
    6b24:	46bd      	mov	sp, r7
    6b26:	bc80      	pop	{r7}
    6b28:	4770      	bx	lr
    6b2a:	bf00      	nop

00006b2c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    6b2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    6b2e:	f000 b804 	b.w	6b3a <LoopCopyDataInit>

00006b32 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    6b32:	4b0c      	ldr	r3, [pc, #48]	; (6b64 <LoopFillZerobss+0x12>)
	ldr	r3, [r3, r1]
    6b34:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    6b36:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    6b38:	3104      	adds	r1, #4

00006b3a <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    6b3a:	480b      	ldr	r0, [pc, #44]	; (6b68 <LoopFillZerobss+0x16>)
	ldr	r3, =_edata
    6b3c:	4b0b      	ldr	r3, [pc, #44]	; (6b6c <LoopFillZerobss+0x1a>)
	adds	r2, r0, r1
    6b3e:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    6b40:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    6b42:	f4ff aff6 	bcc.w	6b32 <CopyDataInit>
	ldr	r2, =_sbss
    6b46:	4a0a      	ldr	r2, [pc, #40]	; (6b70 <LoopFillZerobss+0x1e>)
	b	LoopFillZerobss
    6b48:	f000 b803 	b.w	6b52 <LoopFillZerobss>

00006b4c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    6b4c:	2300      	movs	r3, #0
	str	r3, [r2], #4
    6b4e:	f842 3b04 	str.w	r3, [r2], #4

00006b52 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    6b52:	4b08      	ldr	r3, [pc, #32]	; (6b74 <LoopFillZerobss+0x22>)
	cmp	r2, r3
    6b54:	429a      	cmp	r2, r3
	bcc	FillZerobss
    6b56:	f4ff aff9 	bcc.w	6b4c <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    6b5a:	f7f9 fc1d 	bl	398 <SystemInit>
/* Call the application's entry point.*/
	bl	main
    6b5e:	f7ff ff75 	bl	6a4c <main>
	bx	lr    
    6b62:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
    6b64:	0000718b 	.word	0x0000718b
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    6b68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    6b6c:	20000038 	.word	0x20000038
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
    6b70:	20000040 	.word	0x20000040
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
    6b74:	20004a50 	.word	0x20004a50

00006b78 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    6b78:	f7ff bffe 	b.w	6b78 <ADC1_2_IRQHandler>

00006b7c <.LC0>:
    6b7c:	454c4449 	.word	0x454c4449
    6b80:	00000000 	.word	0x00000000

00006b84 <.LC1>:
    6b84:	00000a0d 	.word	0x00000a0d

00006b88 <.LC2>:
    6b88:	09097325 	.word	0x09097325
    6b8c:	25096325 	.word	0x25096325
    6b90:	75250975 	.word	0x75250975
    6b94:	0d752509 	.word	0x0d752509
    6b98:	0000000a 	.word	0x0000000a

00006b9c <ulKernelPriority>:
    6b9c:	0000007f                                ....

00006ba0 <.LC0>:
    6ba0:	33323130 	.word	0x33323130
    6ba4:	37363534 	.word	0x37363534
    6ba8:	42413938 	.word	0x42413938
    6bac:	46454443 	.word	0x46454443
    6bb0:	00000000 	.word	0x00000000

00006bb4 <.LC0>:
    6bb4:	69676572 	.word	0x69676572
    6bb8:	72657473 	.word	0x72657473
    6bbc:	2873665f 	.word	0x2873665f
    6bc0:	22732522 	.word	0x22732522
    6bc4:	7025202c 	.word	0x7025202c
    6bc8:	7025202c 	.word	0x7025202c
    6bcc:	000a0d29 	.word	0x000a0d29

00006bd0 <.LC0>:
    6bd0:	69676552 	.word	0x69676552
    6bd4:	72657473 	.word	0x72657473
    6bd8:	20676e69 	.word	0x20676e69
    6bdc:	66766564 	.word	0x66766564
    6be0:	0a0d2e73 	.word	0x0a0d2e73
    6be4:	00000000 	.word	0x00000000

00006be8 <.LC1>:
    6be8:	00766564 	.word	0x00766564

00006bec <.LC0>:
    6bec:	6c6c6f52 	.word	0x6c6c6f52
    6bf0:	2064252c 	.word	0x2064252c
    6bf4:	7469502c 	.word	0x7469502c
    6bf8:	252c6863 	.word	0x252c6863
    6bfc:	61592c64 	.word	0x61592c64
    6c00:	64252c77 	.word	0x64252c77
    6c04:	00000a0d 	.word	0x00000a0d

00006c08 <.LC1>:
    6c08:	20314843 	.word	0x20314843
    6c0c:	36333033 	.word	0x36333033
    6c10:	3028302e 	.word	0x3028302e
    6c14:	2c29302e 	.word	0x2c29302e
    6c18:	20324843 	.word	0x20324843
    6c1c:	36333033 	.word	0x36333033
    6c20:	3028302e 	.word	0x3028302e
    6c24:	2c29302e 	.word	0x2c29302e
    6c28:	20334843 	.word	0x20334843
    6c2c:	34373032 	.word	0x34373032
    6c30:	3828302e 	.word	0x3828302e
    6c34:	302e3030 	.word	0x302e3030
    6c38:	48432c29 	.word	0x48432c29
    6c3c:	31332034 	.word	0x31332034
    6c40:	302e3030 	.word	0x302e3030
    6c44:	302e3028 	.word	0x302e3028
    6c48:	48432c29 	.word	0x48432c29
    6c4c:	39312035 	.word	0x39312035
    6c50:	302e3133 	.word	0x302e3133
    6c54:	296e4f28 	.word	0x296e4f28
    6c58:	00000a0d 	.word	0x00000a0d

00006c5c <.LC2>:
    6c5c:	20444950 	.word	0x20444950
    6c60:	6c6c6f52 	.word	0x6c6c6f52
    6c64:	302e302c 	.word	0x302e302c
    6c68:	4449502c 	.word	0x4449502c
    6c6c:	54495020 	.word	0x54495020
    6c70:	302c4843 	.word	0x302c4843
    6c74:	502c302e 	.word	0x502c302e
    6c78:	59204449 	.word	0x59204449
    6c7c:	312c5741 	.word	0x312c5741
    6c80:	0a0d302e 	.word	0x0a0d302e
    6c84:	00000000 	.word	0x00000000

00006c88 <.LC3>:
    6c88:	4f544f4d 	.word	0x4f544f4d
    6c8c:	2c312052 	.word	0x2c312052
    6c90:	2e383937 	.word	0x2e383937
    6c94:	4f4d2c30 	.word	0x4f4d2c30
    6c98:	20524f54 	.word	0x20524f54
    6c9c:	30382c32 	.word	0x30382c32
    6ca0:	2c302e32 	.word	0x2c302e32
    6ca4:	4f544f4d 	.word	0x4f544f4d
    6ca8:	2c332052 	.word	0x2c332052
    6cac:	2e383937 	.word	0x2e383937
    6cb0:	4f4d2c30 	.word	0x4f4d2c30
    6cb4:	20524f54 	.word	0x20524f54
    6cb8:	30382c34 	.word	0x30382c34
    6cbc:	0d302e32 	.word	0x0d302e32
    6cc0:	0000000a 	.word	0x0000000a

00006cc4 <.LC4>:
    6cc4:	666d6f72 	.word	0x666d6f72
    6cc8:	00000073 	.word	0x00000073

00006ccc <.LC5>:
    6ccc:	6c656853 	.word	0x6c656853
    6cd0:	4e45206c 	.word	0x4e45206c
    6cd4:	00000056 	.word	0x00000056

00006cd8 <_binary_test_romfs_bin_start>:
    6cd8:	e0643825 	.word	0xe0643825
    6cdc:	0000000c 	.word	0x0000000c
    6ce0:	666d6f52 	.word	0x666d6f52
    6ce4:	65542073 	.word	0x65542073
    6ce8:	0a217473 	.word	0x0a217473
    6cec:	62fc8088 	.word	0x62fc8088
    6cf0:	000002fa 	.word	0x000002fa
    6cf4:	6d74683c 	.word	0x6d74683c
    6cf8:	3c0a3e6c 	.word	0x3c0a3e6c
    6cfc:	64616568 	.word	0x64616568
    6d00:	69743c3e 	.word	0x69743c3e
    6d04:	3e656c74 	.word	0x3e656c74
    6d08:	65626d45 	.word	0x65626d45
    6d0c:	64656464 	.word	0x64656464
    6d10:	73795320 	.word	0x73795320
    6d14:	206d6574 	.word	0x206d6574
    6d18:	7463654c 	.word	0x7463654c
    6d1c:	20657275 	.word	0x20657275
    6d20:	4e206e69 	.word	0x4e206e69
    6d24:	20554b43 	.word	0x20554b43
    6d28:	32313032 	.word	0x32313032
    6d2c:	69742f3c 	.word	0x69742f3c
    6d30:	3e656c74 	.word	0x3e656c74
    6d34:	65682f3c 	.word	0x65682f3c
    6d38:	0a3e6461 	.word	0x0a3e6461
    6d3c:	646f623c 	.word	0x646f623c
    6d40:	67622079 	.word	0x67622079
    6d44:	6f6c6f63 	.word	0x6f6c6f63
    6d48:	77223d72 	.word	0x77223d72
    6d4c:	65746968 	.word	0x65746968
    6d50:	65742022 	.word	0x65742022
    6d54:	223d7478 	.word	0x223d7478
    6d58:	63616c62 	.word	0x63616c62
    6d5c:	0a3e226b 	.word	0x0a3e226b
    6d60:	2020200a 	.word	0x2020200a
    6d64:	61743c20 	.word	0x61743c20
    6d68:	20656c62 	.word	0x20656c62
    6d6c:	74646977 	.word	0x74646977
    6d70:	31223d68 	.word	0x31223d68
    6d74:	22253030 	.word	0x22253030
    6d78:	20200a3e 	.word	0x20200a3e
    6d7c:	20202020 	.word	0x20202020
    6d80:	2072743c 	.word	0x2072743c
    6d84:	696c6176 	.word	0x696c6176
    6d88:	223d6e67 	.word	0x223d6e67
    6d8c:	22706f74 	.word	0x22706f74
    6d90:	64743c3e 	.word	0x64743c3e
    6d94:	64697720 	.word	0x64697720
    6d98:	223d6874 	.word	0x223d6874
    6d9c:	3e223038 	.word	0x3e223038
    6da0:	0a202009 	.word	0x0a202009
    6da4:	742f3c09 	.word	0x742f3c09
    6da8:	743c3e64 	.word	0x743c3e64
    6dac:	69772064 	.word	0x69772064
    6db0:	3d687464 	.word	0x3d687464
    6db4:	30303522 	.word	0x30303522
    6db8:	20093e22 	.word	0x20093e22
    6dbc:	20090a20 	.word	0x20090a20
    6dc0:	31683c20 	.word	0x31683c20
    6dc4:	626d453e 	.word	0x626d453e
    6dc8:	65646465 	.word	0x65646465
    6dcc:	682f3c64 	.word	0x682f3c64
    6dd0:	090a3e31 	.word	0x090a3e31
    6dd4:	703c2020 	.word	0x703c2020
    6dd8:	20090a3e 	.word	0x20090a3e
    6ddc:	54202020 	.word	0x54202020
    6de0:	77206568 	.word	0x77206568
    6de4:	70206265 	.word	0x70206265
    6de8:	20656761 	.word	0x20656761
    6dec:	20756f79 	.word	0x20756f79
    6df0:	20657261 	.word	0x20657261
    6df4:	63746177 	.word	0x63746177
    6df8:	676e6968 	.word	0x676e6968
    6dfc:	73617720 	.word	0x73617720
    6e00:	72657320 	.word	0x72657320
    6e04:	20646576 	.word	0x20646576
    6e08:	61207962 	.word	0x61207962
    6e0c:	6d697320 	.word	0x6d697320
    6e10:	20656c70 	.word	0x20656c70
    6e14:	0a626577 	.word	0x0a626577
    6e18:	20202009 	.word	0x20202009
    6e1c:	72657320 	.word	0x72657320
    6e20:	20726576 	.word	0x20726576
    6e24:	6e6e7572 	.word	0x6e6e7572
    6e28:	20676e69 	.word	0x20676e69
    6e2c:	74206e6f 	.word	0x74206e6f
    6e30:	6f20706f 	.word	0x6f20706f
    6e34:	68742066 	.word	0x68742066
    6e38:	696c2065 	.word	0x696c2065
    6e3c:	77746867 	.word	0x77746867
    6e40:	68676965 	.word	0x68676965
    6e44:	43542074 	.word	0x43542074
    6e48:	50492f50 	.word	0x50492f50
    6e4c:	61747320 	.word	0x61747320
    6e50:	3c206b63 	.word	0x3c206b63
    6e54:	20090a61 	.word	0x20090a61
    6e58:	68202020 	.word	0x68202020
    6e5c:	3d666572 	.word	0x3d666572
    6e60:	74746822 	.word	0x74746822
    6e64:	2f2f3a70 	.word	0x2f2f3a70
    6e68:	2e777777 	.word	0x2e777777
    6e6c:	73636973 	.word	0x73636973
    6e70:	2f65732e 	.word	0x2f65732e
    6e74:	6164617e 	.word	0x6164617e
    6e78:	776c2f6d 	.word	0x776c2f6d
    6e7c:	222f7069 	.word	0x222f7069
    6e80:	49776c3e 	.word	0x49776c3e
    6e84:	612f3c50 	.word	0x612f3c50
    6e88:	090a2e3e 	.word	0x090a2e3e
    6e8c:	2f3c2020 	.word	0x2f3c2020
    6e90:	090a3e70 	.word	0x090a3e70
    6e94:	703c2020 	.word	0x703c2020
    6e98:	20090a3e 	.word	0x20090a3e
    6e9c:	54202020 	.word	0x54202020
    6ea0:	66206568 	.word	0x66206568
    6ea4:	7375636f 	.word	0x7375636f
    6ea8:	20666f20 	.word	0x20666f20
    6eac:	20656874 	.word	0x20656874
    6eb0:	5049776c 	.word	0x5049776c
    6eb4:	50435420 	.word	0x50435420
    6eb8:	2050492f 	.word	0x2050492f
    6ebc:	6c706d69 	.word	0x6c706d69
    6ec0:	6e656d65 	.word	0x6e656d65
    6ec4:	69746174 	.word	0x69746174
    6ec8:	69206e6f 	.word	0x69206e6f
    6ecc:	6f742073 	.word	0x6f742073
    6ed0:	64657220 	.word	0x64657220
    6ed4:	0a656375 	.word	0x0a656375
    6ed8:	20202009 	.word	0x20202009
    6edc:	65687420 	.word	0x65687420
    6ee0:	4d415220 	.word	0x4d415220
    6ee4:	61737520 	.word	0x61737520
    6ee8:	77206567 	.word	0x77206567
    6eec:	656c6968 	.word	0x656c6968
    6ef0:	69747320 	.word	0x69747320
    6ef4:	68206c6c 	.word	0x68206c6c
    6ef8:	6e697661 	.word	0x6e697661
    6efc:	20612067 	.word	0x20612067
    6f00:	6c6c7566 	.word	0x6c6c7566
    6f04:	61637320 	.word	0x61637320
    6f08:	5420656c 	.word	0x5420656c
    6f0c:	202e5043 	.word	0x202e5043
    6f10:	73696854 	.word	0x73696854
    6f14:	2020090a 	.word	0x2020090a
    6f18:	616d2020 	.word	0x616d2020
    6f1c:	2073656b 	.word	0x2073656b
    6f20:	5049776c 	.word	0x5049776c
    6f24:	69757320 	.word	0x69757320
    6f28:	6c626174 	.word	0x6c626174
    6f2c:	6f662065 	.word	0x6f662065
    6f30:	73752072 	.word	0x73752072
    6f34:	6e692065 	.word	0x6e692065
    6f38:	626d6520 	.word	0x626d6520
    6f3c:	65646465 	.word	0x65646465
    6f40:	79732064 	.word	0x79732064
    6f44:	6d657473 	.word	0x6d657473
    6f48:	69772073 	.word	0x69772073
    6f4c:	74206874 	.word	0x74206874
    6f50:	0a736e65 	.word	0x0a736e65
    6f54:	20202009 	.word	0x20202009
    6f58:	20666f20 	.word	0x20666f20
    6f5c:	6f6c696b 	.word	0x6f6c696b
    6f60:	65747962 	.word	0x65747962
    6f64:	666f2073 	.word	0x666f2073
    6f68:	65726620 	.word	0x65726620
    6f6c:	41522065 	.word	0x41522065
    6f70:	6e61204d 	.word	0x6e61204d
    6f74:	6f722064 	.word	0x6f722064
    6f78:	66206d6f 	.word	0x66206d6f
    6f7c:	6120726f 	.word	0x6120726f
    6f80:	6e756f72 	.word	0x6e756f72
    6f84:	30342064 	.word	0x30342064
    6f88:	6c696b20 	.word	0x6c696b20
    6f8c:	7479626f 	.word	0x7479626f
    6f90:	090a7365 	.word	0x090a7365
    6f94:	20202020 	.word	0x20202020
    6f98:	6320666f 	.word	0x6320666f
    6f9c:	2065646f 	.word	0x2065646f
    6fa0:	2e4d4f52 	.word	0x2e4d4f52
    6fa4:	2020090a 	.word	0x2020090a
    6fa8:	3e702f3c 	.word	0x3e702f3c
    6fac:	2f3c090a 	.word	0x2f3c090a
    6fb0:	3c3e6474 	.word	0x3c3e6474
    6fb4:	0a3e6474 	.word	0x0a3e6474
    6fb8:	26202009 	.word	0x26202009
    6fbc:	7073626e 	.word	0x7073626e
    6fc0:	3c090a3b 	.word	0x3c090a3b
    6fc4:	3e64742f 	.word	0x3e64742f
    6fc8:	72742f3c 	.word	0x72742f3c
    6fcc:	20200a3e 	.word	0x20200a3e
    6fd0:	20202020 	.word	0x20202020
    6fd4:	61742f3c 	.word	0x61742f3c
    6fd8:	3e656c62 	.word	0x3e656c62
    6fdc:	622f3c0a 	.word	0x622f3c0a
    6fe0:	3e79646f 	.word	0x3e79646f
    6fe4:	682f3c0a 	.word	0x682f3c0a
    6fe8:	3e6c6d74 	.word	0x3e6c6d74
    6fec:	00a60a0a 	.word	0x00a60a0a
    6ff0:	018d7994 	.word	0x018d7994
    6ff4:	683c0000 	.word	0x683c0000
    6ff8:	3e6c6d74 	.word	0x3e6c6d74
    6ffc:	65683c0a 	.word	0x65683c0a
    7000:	3c3e6461 	.word	0x3c3e6461
    7004:	6c746974 	.word	0x6c746974
    7008:	6d453e65 	.word	0x6d453e65
    700c:	64646562 	.word	0x64646562
    7010:	2f3c6465 	.word	0x2f3c6465
    7014:	6c746974 	.word	0x6c746974
    7018:	2f3c3e65 	.word	0x2f3c3e65
    701c:	64616568 	.word	0x64616568
    7020:	623c0a3e 	.word	0x623c0a3e
    7024:	2079646f 	.word	0x2079646f
    7028:	6f636762 	.word	0x6f636762
    702c:	3d726f6c 	.word	0x3d726f6c
    7030:	69687722 	.word	0x69687722
    7034:	20226574 	.word	0x20226574
    7038:	74786574 	.word	0x74786574
    703c:	6c62223d 	.word	0x6c62223d
    7040:	226b6361 	.word	0x226b6361
    7044:	200a0a3e 	.word	0x200a0a3e
    7048:	3c202020 	.word	0x3c202020
    704c:	6c626174 	.word	0x6c626174
    7050:	69772065 	.word	0x69772065
    7054:	3d687464 	.word	0x3d687464
    7058:	30303122 	.word	0x30303122
    705c:	0a3e2225 	.word	0x0a3e2225
    7060:	20202020 	.word	0x20202020
    7064:	743c2020 	.word	0x743c2020
    7068:	61762072 	.word	0x61762072
    706c:	6e67696c 	.word	0x6e67696c
    7070:	6f74223d 	.word	0x6f74223d
    7074:	3c3e2270 	.word	0x3c3e2270
    7078:	77206474 	.word	0x77206474
    707c:	68746469 	.word	0x68746469
    7080:	3038223d 	.word	0x3038223d
    7084:	20093e22 	.word	0x20093e22
    7088:	3c090a20 	.word	0x3c090a20
    708c:	3e64742f 	.word	0x3e64742f
    7090:	2064743c 	.word	0x2064743c
    7094:	74646977 	.word	0x74646977
    7098:	35223d68 	.word	0x35223d68
    709c:	3e223030 	.word	0x3e223030
    70a0:	0a202009 	.word	0x0a202009
    70a4:	3c202009 	.word	0x3c202009
    70a8:	4c3e3168 	.word	0x4c3e3168
    70ac:	74686769 	.word	0x74686769
    70b0:	67696577 	.word	0x67696577
    70b4:	77207468 	.word	0x77207468
    70b8:	73206265 	.word	0x73206265
    70bc:	65767265 	.word	0x65767265
    70c0:	682f3c72 	.word	0x682f3c72
    70c4:	090a3e31 	.word	0x090a3e31
    70c8:	683c2020 	.word	0x683c2020
    70cc:	30343e32 	.word	0x30343e32
    70d0:	202d2034 	.word	0x202d2034
    70d4:	65676150 	.word	0x65676150
    70d8:	746f6e20 	.word	0x746f6e20
    70dc:	756f6620 	.word	0x756f6620
    70e0:	2f3c646e 	.word	0x2f3c646e
    70e4:	0a3e3268 	.word	0x0a3e3268
    70e8:	3c202009 	.word	0x3c202009
    70ec:	090a3e70 	.word	0x090a3e70
    70f0:	20202020 	.word	0x20202020
    70f4:	72726f53 	.word	0x72726f53
    70f8:	74202c79 	.word	0x74202c79
    70fc:	70206568 	.word	0x70206568
    7100:	20656761 	.word	0x20656761
    7104:	20756f79 	.word	0x20756f79
    7108:	20657261 	.word	0x20657261
    710c:	75716572 	.word	0x75716572
    7110:	69747365 	.word	0x69747365
    7114:	7720676e 	.word	0x7720676e
    7118:	6e207361 	.word	0x6e207361
    711c:	6620746f 	.word	0x6620746f
    7120:	646e756f 	.word	0x646e756f
    7124:	206e6f20 	.word	0x206e6f20
    7128:	73696874 	.word	0x73696874
    712c:	2020090a 	.word	0x2020090a
    7130:	65732020 	.word	0x65732020
    7134:	72657672 	.word	0x72657672
    7138:	090a202e 	.word	0x090a202e
    713c:	2f3c2020 	.word	0x2f3c2020
    7140:	090a3e70 	.word	0x090a3e70
    7144:	64742f3c 	.word	0x64742f3c
    7148:	64743c3e 	.word	0x64743c3e
    714c:	20090a3e 	.word	0x20090a3e
    7150:	626e2620 	.word	0x626e2620
    7154:	0a3b7073 	.word	0x0a3b7073
    7158:	742f3c09 	.word	0x742f3c09
    715c:	2f3c3e64 	.word	0x2f3c3e64
    7160:	0a3e7274 	.word	0x0a3e7274
    7164:	20202020 	.word	0x20202020
    7168:	2f3c2020 	.word	0x2f3c2020
    716c:	6c626174 	.word	0x6c626174
    7170:	3c0a3e65 	.word	0x3c0a3e65
    7174:	646f622f 	.word	0x646f622f
    7178:	3c0a3e79 	.word	0x3c0a3e79
    717c:	6d74682f 	.word	0x6d74682f
    7180:	000a3e6c 	.word	0x000a3e6c
    7184:	00000000 	.word	0x00000000
    7188:	0000      	.short	0x0000
	...
